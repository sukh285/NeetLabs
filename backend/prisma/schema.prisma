generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  image         String?
  role          UserRole        @default(USER)
  password      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  plan          UserPlan        @default(FREE)
  aiUsage       AiUsage[]
  playlists     Playlist[]
  problems      Problem[]
  problemSolved ProblemSolved[]
  submission    Submission[]
}

model Problem {
  id                String              @id @default(uuid())
  title             String
  description       String
  difficulty        Difficulty
  tags              String[]
  companyTags       String[]
  userId            String
  examples          Json
  constraints       String
  hints             String?
  editorial         String?
  testcases         Json
  codeSnippet       Json
  referenceSolution Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistProblems  ProblemInPlaylist[]
  solvedProblems    ProblemSolved[]
  submission        Submission[]
}

model Submission {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  problem       Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  testCases     TestCaseResult[]
}

model TestCaseResult {
  id             String     @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String?
  expected       String
  stderr         String?
  compiledOutput String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  submission     Submission @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String              @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problems    ProblemInPlaylist[]

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playlistId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem    Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model AiUsage {
  id     String   @id @default(uuid())
  userId String
  count  Int      @default(0)
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum UserPlan {
  FREE
  PRO
  ADVANCED
}
