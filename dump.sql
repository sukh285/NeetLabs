--
-- PostgreSQL database dump
--

-- Dumped from database version 17.5 (Debian 17.5-1.pgdg120+1)
-- Dumped by pg_dump version 17.5 (Debian 17.5-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: Difficulty; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."Difficulty" AS ENUM (
    'EASY',
    'MEDIUM',
    'HARD'
);


--
-- Name: PlaylistAccess; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."PlaylistAccess" AS ENUM (
    'FREE',
    'PRO',
    'ADVANCED',
    'CUSTOM'
);


--
-- Name: UserPlan; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."UserPlan" AS ENUM (
    'FREE',
    'PRO',
    'ADVANCED'
);


--
-- Name: UserRole; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."UserRole" AS ENUM (
    'ADMIN',
    'USER'
);


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: AiUsage; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."AiUsage" (
    id text NOT NULL,
    "userId" text NOT NULL,
    count integer DEFAULT 0 NOT NULL,
    date timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


--
-- Name: Playlist; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Playlist" (
    id text NOT NULL,
    name text NOT NULL,
    description text,
    "userId" text NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    "accessLevel" public."PlaylistAccess" DEFAULT 'CUSTOM'::public."PlaylistAccess" NOT NULL
);


--
-- Name: Problem; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Problem" (
    id text NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    difficulty public."Difficulty" NOT NULL,
    tags text[],
    "userId" text NOT NULL,
    examples jsonb NOT NULL,
    constraints text NOT NULL,
    hints text,
    editorial text,
    testcases jsonb NOT NULL,
    "codeSnippet" jsonb NOT NULL,
    "referenceSolution" jsonb NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    "companyTags" text[]
);


--
-- Name: ProblemInPlaylist; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."ProblemInPlaylist" (
    id text NOT NULL,
    "playlistId" text NOT NULL,
    "problemId" text NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


--
-- Name: ProblemSolved; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."ProblemSolved" (
    id text NOT NULL,
    "userId" text NOT NULL,
    "problemId" text NOT NULL,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


--
-- Name: Submission; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."Submission" (
    id text NOT NULL,
    "userId" text NOT NULL,
    "problemId" text NOT NULL,
    "sourceCode" jsonb NOT NULL,
    language text NOT NULL,
    stdin text,
    stdout text,
    stderr text,
    "compileOutput" text,
    status text NOT NULL,
    memory text,
    "time" text,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


--
-- Name: TestCaseResult; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."TestCaseResult" (
    id text NOT NULL,
    "submissionId" text NOT NULL,
    "testCase" integer NOT NULL,
    passed boolean NOT NULL,
    stdout text,
    expected text NOT NULL,
    stderr text,
    "compiledOutput" text,
    status text NOT NULL,
    memory text,
    "time" text,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL
);


--
-- Name: User; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public."User" (
    id text NOT NULL,
    name text,
    email text NOT NULL,
    image text,
    role public."UserRole" DEFAULT 'USER'::public."UserRole" NOT NULL,
    password text,
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone NOT NULL,
    plan public."UserPlan" DEFAULT 'FREE'::public."UserPlan" NOT NULL,
    "emailVerified" boolean DEFAULT false NOT NULL,
    "verificationToken" text,
    "resetToken" text
);


--
-- Name: _prisma_migrations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public._prisma_migrations (
    id character varying(36) NOT NULL,
    checksum character varying(64) NOT NULL,
    finished_at timestamp with time zone,
    migration_name character varying(255) NOT NULL,
    logs text,
    rolled_back_at timestamp with time zone,
    started_at timestamp with time zone DEFAULT now() NOT NULL,
    applied_steps_count integer DEFAULT 0 NOT NULL
);


--
-- Data for Name: AiUsage; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."AiUsage" (id, "userId", count, date) FROM stdin;
37f03032-a364-4303-b291-db50fab8dc87	56100fd2-2245-45c6-9343-574316fc07ae	5	2025-07-20 18:30:00
2eb76969-8e06-4848-b4cf-0c31e6066f67	56100fd2-2245-45c6-9343-574316fc07ae	5	2025-07-21 18:30:00
99f63c52-3018-41b6-bfb5-d38b984d5543	3b5857be-f292-4ae5-9c4e-608effc88d44	5	2025-07-21 18:30:00
099881a0-d838-4f52-90a8-2852cd1bef77	06c807d0-2f95-4f8d-a130-8e77c45627b7	3	2025-07-21 18:30:00
\.


--
-- Data for Name: Playlist; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."Playlist" (id, name, description, "userId", "createdAt", "updatedAt", "accessLevel") FROM stdin;
0835749a-651c-4d54-85ed-9743c88f2f48	Playlist1	A playlist for testing number 1	7177a6c7-b397-49e2-a7f7-c50d779154f1	2025-06-22 17:56:36.855	2025-06-22 17:56:36.855	CUSTOM
c797e691-3fa7-4a69-a5a1-86d5567b7b98	Playlist 1	First Playlist	2a179277-32c9-4853-a8c2-3d2de754781d	2025-07-07 11:12:11.756	2025-07-07 11:12:11.756	CUSTOM
54d1df5c-fefc-40d0-b5c5-64d686879501	playlist 2	2nd playlist	2a179277-32c9-4853-a8c2-3d2de754781d	2025-07-26 00:40:58.011	2025-07-26 00:40:58.011	CUSTOM
65e56047-4eae-4837-99ca-490d96a1cfb2	NeetLabs Mastery Sheet: Code Your Fundamentals	Unlock your true coding potential with the NeetLabs Mastery Sheet — a thoughtfully crafted collection of must-solve problems designed to build your foundation, sharpen your problem-solving skills, and prepare you for real-world coding interviews. This sheet strikes the perfect balance between easy and medium challenges, covering arrays, strings, linked lists, trees, dynamic programming, and more. Ready to boost your confidence and crack your next coding interview? Let’s dive in!	2a179277-32c9-4853-a8c2-3d2de754781d	2025-07-26 14:54:51.375	2025-07-26 14:54:51.375	FREE
58fd5636-f09c-4894-bada-10e5b66625ab	NeetLabs DSA Pro: Ace the Interview	Step up your coding game with this playlist — a powerful selection of algorithmically rich problems that refine your understanding of complex data structures, dynamic programming nuances, graph theory, and advanced algorithmic patterns. This collection challenges you to think critically and optimize effectively, perfect for experienced coders aiming to ace tough technical interviews or competitions.	2a179277-32c9-4853-a8c2-3d2de754781d	2025-07-26 15:29:41.47	2025-07-26 15:29:41.47	PRO
2d85afc9-df1c-4b89-b42e-2791e544eefd	user7 playlist	user7	06c807d0-2f95-4f8d-a130-8e77c45627b7	2025-07-26 15:56:40.613	2025-07-26 15:56:40.613	CUSTOM
\.


--
-- Data for Name: Problem; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."Problem" (id, title, description, difficulty, tags, "userId", examples, constraints, hints, editorial, testcases, "codeSnippet", "referenceSolution", "createdAt", "updatedAt", "companyTags") FROM stdin;
d773532a-3fbb-4418-9e3b-ed3636de0b87	Add Two Numbers	Given 2 numbers: add them	EASY	{maths,operators,numbers}	7177a6c7-b397-49e2-a7f7-c50d779154f1	{"JAVA": {"input": "-5 12", "output": "7", "explanation": "Adding -5 and 12 gives 7"}, "PYTHON": {"input": "3 7", "output": "10", "explanation": "Adding 3 and 7 gives 10"}}	-10^9 <= a, b <= 10^9	\N	\N	[{"input": "100 200", "output": "300"}, {"input": "-500 -600", "output": "-1100"}, {"input": "0 0", "output": "0"}]	{"JAVA": "// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}", "PYTHON": "# Read input and print the sum of two numbers\\nimport sys\\n\\n# Read entire input from stdin\\ninput_line = sys.stdin.read()\\n\\n# Split and convert to integers\\na, b = map(int, input_line.strip().split())\\n\\n# Print the result\\nprint(a + b)", "JAVASCRIPT": "// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"}	{"JAVA": "// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    Scanner sc = new Scanner(System.in);\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n    System.out.println(a + b);\\n  }\\n}", "PYTHON": "# Read input and print the sum of two numbers\\nimport sys\\n\\ninput_line = sys.stdin.read()\\na, b = map(int, input_line.strip().split())\\nprint(a + b)", "JAVASCRIPT": "// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\nconst input = fs.readFileSync(0, 'utf-8');\\nconst [a, b] = input.trim().split(' ').map(Number);\\nconsole.log(a + b);"}	2025-06-21 11:23:41.924	2025-06-21 11:23:41.924	\N
cdb7c83d-ec47-4072-8704-9553ca348cbc	Longest Substring Without Repeating Characters	Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous non-empty sequence of characters within a string.	MEDIUM	{"Hash Table",String,"Sliding Window"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "s = \\"abcabcbb\\"", "output": "3", "explanation": "The answer is \\"abc\\", with the length of 3."}, "PYTHON": {"input": "s = \\"abcabcbb\\"", "output": "3", "explanation": "The answer is \\"abc\\", with the length of 3."}, "JAVASCRIPT": {"input": "s = \\"abcabcbb\\"", "output": "3", "explanation": "The answer is \\"abc\\", with the length of 3."}}	0 <= s.length <= 5 * 10^4\ns consists of English letters, digits, symbols and spaces.	\N	\N	[{"input": "abcabcbb", "output": "3"}, {"input": "bbbbb", "output": "1"}, {"input": "pwwkew", "output": "3"}, {"input": " ", "output": "0"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int lengthOfLongestSubstring(String s) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        \\n        int result = lengthOfLongestSubstring(input);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        # Write your code here\\n        pass\\n\\n# Input parsing\\nif __name__ == \\"__main__\\":\\n    import sys\\n    \\n    # Read input string\\n    s = sys.stdin.readline().strip()\\n    \\n    # Call solution\\n    sol = Solution()\\n    result = sol.lengthOfLongestSubstring(s)\\n    \\n    # Output result\\n    print(result)", "JAVASCRIPT": "/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction lengthOfLongestSubstring(s) {\\n    // Write your code here\\n}\\n\\n// Add readline for dynamic input handling\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\n// Process input line\\nrl.on('line', (line) => {\\n  const result = lengthOfLongestSubstring(line.trim());\\n  console.log(result);\\n  rl.close();\\n});"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int lengthOfLongestSubstring(String s) {\\n        if (s.length() == 0) return 0;\\n        \\n        Set<Character> charSet = new HashSet<>();\\n        int left = 0;\\n        int maxLength = 0;\\n        \\n        for (int right = 0; right < s.length(); right++) {\\n            // If character is already in set, remove characters from left\\n            while (charSet.contains(s.charAt(right))) {\\n                charSet.remove(s.charAt(left));\\n                left++;\\n            }\\n            \\n            // Add current character to set\\n            charSet.add(s.charAt(right));\\n            \\n            // Update max length\\n            maxLength = Math.max(maxLength, right - left + 1);\\n        }\\n        \\n        return maxLength;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        \\n        int result = lengthOfLongestSubstring(input);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        if not s:\\n            return 0\\n        \\n        char_set = set()\\n        left = 0\\n        max_length = 0\\n        \\n        for right in range(len(s)):\\n            # If character is already in set, remove characters from left\\n            while s[right] in char_set:\\n                char_set.remove(s[left])\\n                left += 1\\n            \\n            # Add current character to set\\n            char_set.add(s[right])\\n            \\n            # Update max length\\n            max_length = max(max_length, right - left + 1)\\n        \\n        return max_length\\n\\n# Input parsing\\nif __name__ == \\"__main__\\":\\n    import sys\\n    \\n    # Read input string\\n    s = sys.stdin.readline().strip()\\n    \\n    # Call solution\\n    sol = Solution()\\n    result = sol.lengthOfLongestSubstring(s)\\n    \\n    # Output result\\n    print(result)", "JAVASCRIPT": "/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction lengthOfLongestSubstring(s) {\\n    if (s.length === 0) return 0;\\n    \\n    const charSet = new Set();\\n    let left = 0;\\n    let maxLength = 0;\\n    \\n    for (let right = 0; right < s.length; right++) {\\n        // If character is already in set, remove characters from left\\n        while (charSet.has(s[right])) {\\n            charSet.delete(s[left]);\\n            left++;\\n        }\\n        \\n        // Add current character to set\\n        charSet.add(s[right]);\\n        \\n        // Update max length\\n        maxLength = Math.max(maxLength, right - left + 1);\\n    }\\n    \\n    return maxLength;\\n}\\n\\n// Add readline for dynamic input handling\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\n// Process input line\\nrl.on('line', (line) => {\\n  const result = lengthOfLongestSubstring(line.trim());\\n  console.log(result);\\n  rl.close();\\n});"}	2025-07-23 22:16:43.525	2025-07-23 22:16:43.525	{Facebook,Amazon}
380fe475-e22b-49fc-aec5-d9796ebc2a9d	Two Sum	Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.	EASY	{Array,"Hash Table"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "nums = [2,7,11,15], target = 9", "output": "[0,1]", "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."}, "PYTHON": {"input": "nums = [2,7,11,15], target = 9", "output": "[0,1]", "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."}, "JAVASCRIPT": {"input": "nums = [2,7,11,15], target = 9", "output": "[0,1]", "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."}}	2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.	\N	\N	[{"input": "[2,7,11,15]\\n9", "output": "[0,1]"}, {"input": "[3,2,4]\\n6", "output": "[1,2]"}, {"input": "[3,3]\\n6", "output": "[0,1]"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int[] twoSum(int[] nums, int target) {\\n        // Write your code here\\n        return new int[0];\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        \\n        // Parse array input\\n        String numsStr = br.readLine().trim();\\n        numsStr = numsStr.substring(1, numsStr.length() - 1); // Remove brackets\\n        String[] numsArray = numsStr.split(\\",\\");\\n        int[] nums = new int[numsArray.length];\\n        for (int i = 0; i < numsArray.length; i++) {\\n            nums[i] = Integer.parseInt(numsArray[i].trim());\\n        }\\n        \\n        // Parse target\\n        int target = Integer.parseInt(br.readLine().trim());\\n        \\n        int[] result = twoSum(nums, target);\\n        if (result.length == 2) {\\n            System.out.println(\\"[\\" + result[0] + \\",\\" + result[1] + \\"]\\");\\n        } else {\\n            System.out.println(\\"[]\\");\\n        }\\n\\n    }\\n}", "PYTHON": "from typing import List\\n\\nclass Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    import json\\n    \\n    nums_line = sys.stdin.readline().strip()\\n    target_line = sys.stdin.readline().strip()\\n    \\n    nums = json.loads(nums_line)\\n    target = int(target_line)\\n    \\n    sol = Solution()\\n    result = sol.twoSum(nums, target)\\n    \\n    print(json.dumps(result, separators=(',', ':')))\\n\\n", "JAVASCRIPT": "/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n    // Write your code here\\n}\\n\\n// Add readline for dynamic input handling\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const nums = JSON.parse(inputLines[0]);\\n    const target = parseInt(inputLines[1]);\\n    \\n    const result = twoSum(nums, target);\\n    console.log(JSON.stringify(result));\\n    rl.close();\\n  }\\n});"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int[] twoSum(int[] nums, int target) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        \\n        for (int i = 0; i < nums.length; i++) {\\n            int complement = target - nums[i];\\n            \\n            if (map.containsKey(complement)) {\\n                return new int[]{map.get(complement), i};\\n            }\\n            \\n            map.put(nums[i], i);\\n        }\\n        \\n        return new int[0];\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        \\n        // Parse array input\\n        String numsStr = br.readLine().trim();\\n        numsStr = numsStr.substring(1, numsStr.length() - 1); // Remove brackets\\n        String[] numsArray = numsStr.split(\\",\\");\\n        int[] nums = new int[numsArray.length];\\n        for (int i = 0; i < numsArray.length; i++) {\\n            nums[i] = Integer.parseInt(numsArray[i].trim());\\n        }\\n        \\n        // Parse target\\n        int target = Integer.parseInt(br.readLine().trim());\\n        \\n        int[] result = twoSum(nums, target);\\n        if (result.length == 2) {\\n            System.out.println(\\"[\\" + result[0] + \\",\\" + result[1] + \\"]\\");\\n        } else {\\n            System.out.println(\\"[]\\");\\n        }\\n    }\\n}", "PYTHON": "from typing import List\\n\\nclass Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        num_map = {}\\n        \\n        for i, num in enumerate(nums):\\n            complement = target - num\\n            if complement in num_map:\\n                return [num_map[complement], i]\\n            num_map[num] = i\\n        \\n        return []\\n\\n# Input parsing\\nif __name__ == \\"__main__\\":\\n    import sys\\n    import json\\n    \\n    nums_line = sys.stdin.readline().strip()\\n    target_line = sys.stdin.readline().strip()\\n    \\n    nums = json.loads(nums_line)\\n    target = int(target_line)\\n    \\n    sol = Solution()\\n    result = sol.twoSum(nums, target)\\n    \\n    print(json.dumps(result, separators=(',', ':')))\\n\\n", "JAVASCRIPT": "/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n    const map = new Map();\\n    \\n    for (let i = 0; i < nums.length; i++) {\\n        const complement = target - nums[i];\\n        \\n        if (map.has(complement)) {\\n            return [map.get(complement), i];\\n        }\\n        \\n        map.set(nums[i], i);\\n    }\\n    \\n    return [];\\n}\\n\\n// Add readline for dynamic input handling\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const nums = JSON.parse(inputLines[0]);\\n    const target = parseInt(inputLines[1]);\\n    \\n    const result = twoSum(nums, target);\\n    console.log(JSON.stringify(result));\\n    rl.close();\\n  }\\n});"}	2025-07-23 22:14:53.204	2025-07-24 21:49:34.901	{Microsoft,Apple}
ba19c1cc-df9b-42ee-a0f7-e598e200de13	Maximum Subarray Sum	Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum, and return its sum.	MEDIUM	{"Dynamic Programming",Arrays,"Kadane's Algorithm"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6", "explanation": "The subarray [4,-1,2,1] has the largest sum = 6"}, "PYTHON": {"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6", "explanation": " Subarray [4, -1, 2, 1] gives the max sum."}, "JAVASCRIPT": {"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6", "explanation": " Subarray [4, -1, 2, 1] gives the max sum."}}	1 <= nums.length <= 10^5\n\n-10^4 <= nums[i] <= 10^4	\N	\N	[{"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6"}, {"input": "[1]", "output": "1"}, {"input": "[5,4,-1,7,8]", "output": "23"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public int maxSubArray(int[] nums) {\\n        // Implement your solution here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws Exception {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]]\\", \\"\\");\\n        String[] parts = input.split(\\",\\");\\n        int[] nums = Arrays.stream(parts).mapToInt(Integer::parseInt).toArray();\\n\\n        Main main = new Main();\\n        int result = main.maxSubArray(nums);\\n\\n        System.out.println(result);\\n        scanner.close();\\n    }\\n}\\n", "PYTHON": "import sys\\nimport json\\n\\nnums = json.loads(sys.stdin.readline().strip())\\n\\nclass Solution:\\n    def maxSubArray(self, nums):\\n        # Implement your solution here\\n        pass\\n\\n# Solve\\nsol = Solution()\\nresult = sol.maxSubArray(nums)\\n\\n# Print result\\nprint(result)\\n", "JAVASCRIPT": "const readline = require('readline');\\n\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nrl.on('line', (line) => {\\n  const nums = JSON.parse(line.trim());\\n  const result = maxSubArray(nums);\\n  console.log(result);\\n  rl.close();\\n});\\n\\nfunction maxSubArray(nums) {\\n  // Implement your solution here\\n}\\n"}	{"JAVA": "// Add your reference solution here\\r\\n\\r\\npublic class Main {\\r\\n    public int maxSubArray(int[] nums) {\\r\\n        int maxSum = nums[0];\\r\\n        int currentSum = nums[0];\\r\\n\\r\\n        for (int i = 1; i < nums.length; i++) {\\r\\n            currentSum = Math.max(nums[i], currentSum + nums[i]);\\r\\n            maxSum = Math.max(maxSum, currentSum);\\r\\n        }\\r\\n\\r\\n        return maxSum;\\r\\n    }\\r\\n}\\r\\n", "PYTHON": "# Add your reference solution here\\r\\n\\r\\nclass Solution:\\r\\ndef maxSubArray(self, nums):\\r\\n    max_sum = nums[0]\\r\\n    current_sum = nums[0]\\r\\n\\r\\nfor i in range(1, len(nums)):\\r\\n    current_sum = max(nums[i], current_sum + nums[i])\\r\\n    max_sum = max(max_sum, current_sum)\\r\\n\\r\\nreturn max_sum\\r\\n", "JAVASCRIPT": "function maxSubArray(nums) {\\r\\n  let maxSum = nums[0];\\r\\n  let currentSum = nums[0];\\r\\n\\r\\n  for (let i = 1; i < nums.length; i++) {\\r\\n    currentSum = Math.max(nums[i], currentSum + nums[i]);\\r\\n    maxSum = Math.max(maxSum, currentSum);\\r\\n  }\\r\\n\\r\\n  return maxSum;\\r\\n}\\r\\n\\r\\nconst readline = require('readline');\\r\\nconst rl = readline.createInterface({\\r\\n  input: process.stdin,\\r\\n  output: process.stdout,\\r\\n  terminal: false\\r\\n});\\r\\n\\r\\nrl.on('line', (line) => {\\r\\n  const nums = JSON.parse(line.trim());\\r\\n  const result = maxSubArray(nums);\\r\\n  console.log(result);  // Make sure this is here\\r\\n  rl.close();\\r\\n});\\r\\n"}	2025-07-12 16:08:22.306	2025-07-12 16:08:22.306	\N
6645d2d9-2f7a-4dc3-a82f-0b6b556dc29d	Longest Increasing Subsequence	Given an array of integers, find the length of the longest strictly increasing subsequence.	MEDIUM	{"Dynamic Programming",Arrays}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "arr = [7, 7, 7, 7, 7, 7, 7]", "output": "1", "explanation": "All elements equal, LIS length is 1."}, "PYTHON": {"input": "arr = [10, 9, 2, 5, 3, 7, 101, 18]", "output": "4", "explanation": "The longest increasing subsequence is [2,3,7,101] or [2,3,7,18]."}, "JAVASCRIPT": {"input": "arr = [0, 1, 0, 3, 2, 3]", "output": "4", "explanation": "The longest increasing subsequence is [0,1,2,3]."}}	1 ≤ arr.length ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9	\N	\N	[{"input": "[10, 9, 2, 5, 3, 7, 101, 18]", "output": "4"}, {"input": "[0, 1, 0, 3, 2, 3]", "output": "4"}, {"input": "[7, 7, 7, 7, 7, 7, 7]", "output": "1"}, {"input": "[]", "output": "0"}, {"input": "[4, 10, 4, 3, 8, 9]", "output": "3"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int lengthOfLIS(int[] arr) {\\n        // implement here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(lengthOfLIS(arr));\\n    }\\n}", "PYTHON": "import sys, json\\narr = json.loads(sys.stdin.read())\\n\\ndef length_of_lis(arr):\\n    # implement here\\n    pass\\n\\nprint(length_of_lis(arr))", "JAVASCRIPT": "const fs = require('fs');\\nconst arr = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction lengthOfLIS(arr) {\\n  // implement here\\n}\\n\\nconsole.log(lengthOfLIS(arr));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int lengthOfLIS(int[] arr) {\\n        ArrayList<Integer> sub = new ArrayList<>();\\n        for (int x : arr) {\\n            int left = 0, right = sub.size();\\n            while (left < right) {\\n                int mid = (left + right) / 2;\\n                if (sub.get(mid) < x) left = mid + 1;\\n                else right = mid;\\n            }\\n            if (left == sub.size()) sub.add(x);\\n            else sub.set(left, x);\\n        }\\n        return sub.size();\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(lengthOfLIS(arr));\\n    }\\n}", "PYTHON": "import sys, json, bisect\\narr = json.loads(sys.stdin.read())\\n\\ndef length_of_lis(arr):\\n    sub = []\\n    for x in arr:\\n        i = bisect.bisect_left(sub, x)\\n        if i == len(sub):\\n            sub.append(x)\\n        else:\\n            sub[i] = x\\n    return len(sub)\\n\\nprint(length_of_lis(arr))", "JAVASCRIPT": "const fs = require('fs');\\nconst arr = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction lengthOfLIS(arr) {\\n  const sub = [];\\n  for (let x of arr) {\\n    let left = 0, right = sub.length;\\n    while (left < right) {\\n      let mid = (left + right) >> 1;\\n      if (sub[mid] < x) left = mid + 1;\\n      else right = mid;\\n    }\\n    if (left === sub.length) sub.push(x);\\n    else sub[left] = x;\\n  }\\n  return sub.length;\\n}\\n\\nconsole.log(lengthOfLIS(arr));"}	2025-07-26 08:54:31.854	2025-07-26 08:54:31.854	{Amazon,Google,Facebook}
c20ef665-5b0f-4886-95ab-236c5828a20e	Climbing Stairs	You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?	EASY	{"Dynamic Programming",Math,Memoization}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "n = 4", "output": "5", "explanation": "There are five ways to climb to the top:\\n1. 1 step + 1 step + 1 step + 1 step\\n2. 1 step + 1 step + 2 steps\\n3. 1 step + 2 steps + 1 step\\n4. 2 steps + 1 step + 1 step\\n5. 2 steps + 2 steps"}, "PYTHON": {"input": "n = 3", "output": "3", "explanation": "There are three ways to climb to the top:\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step"}, "JAVASCRIPT": {"input": "n = 2", "output": "2", "explanation": "There are two ways to climb to the top:\\n1. 1 step + 1 step\\n2. 2 steps"}}	1 <= n <= 45	\N	\N	[{"input": "2", "output": "2"}, {"input": "3", "output": "3"}, {"input": "4", "output": "5"}]	{"JAVA": "import java.util.Scanner;\\n  \\n  class Main {\\n    public int climbStairs(int n) {\\n        // Write your code here\\n        return 0;\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = Integer.parseInt(scanner.nextLine().trim());\\n        \\n        // Use Main class instead of Solution\\n        Main main = new Main();\\n        int result = main.climbStairs(n);\\n        \\n        System.out.println(result);\\n        scanner.close();\\n    }\\n  }", "PYTHON": "class Solution:\\n    def climbStairs(self, n: int) -> int:\\n        # Write your code here\\n        pass\\n  \\n  # Input parsing\\nif __name__ == \\"__main__\\":\\n    import sys\\n    \\n    # Parse input\\n    n = int(sys.stdin.readline().strip())\\n    \\n    # Solve\\n    sol = Solution()\\n    result = sol.climbStairs(n)\\n    \\n    # Print result\\n    print(result)", "JAVASCRIPT": "/**\\n  * @param {number} n\\n  * @return {number}\\n  */\\n  function climbStairs(n) {\\n  // Write your code here\\n  }\\n  \\n  // Parse input and execute\\n  const readline = require('readline');\\n  const rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n  });\\n  \\n  rl.on('line', (line) => {\\n  const n = parseInt(line.trim());\\n  const result = climbStairs(n);\\n  \\n  console.log(result);\\n  rl.close();\\n  });"}	{"JAVA": "import java.util.Scanner;\\n  \\n  class Main {\\n    public int climbStairs(int n) {\\n        // Base cases\\n        if (n <= 2) {\\n            return n;\\n        }\\n        \\n        // Dynamic programming approach\\n        int[] dp = new int[n + 1];\\n        dp[1] = 1;\\n        dp[2] = 2;\\n        \\n        for (int i = 3; i <= n; i++) {\\n            dp[i] = dp[i - 1] + dp[i - 2];\\n        }\\n        \\n        return dp[n];\\n        \\n        /* Alternative approach with O(1) space\\n        int a = 1; // ways to climb 1 step\\n        int b = 2; // ways to climb 2 steps\\n        \\n        for (int i = 3; i <= n; i++) {\\n            int temp = a + b;\\n            a = b;\\n            b = temp;\\n        }\\n        \\n        return n == 1 ? a : b;\\n        */\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = Integer.parseInt(scanner.nextLine().trim());\\n        \\n        // Use Main class instead of Solution\\n        Main main = new Main();\\n        int result = main.climbStairs(n);\\n        \\n        System.out.println(result);\\n        scanner.close();\\n    }\\n  }", "PYTHON": "class Solution:\\r\\n    def climbStairs(self, n: int) -> int:\\r\\n        # Base cases\\r\\n        if n <= 2:\\r\\n            return n\\r\\n        \\r\\n        # Dynamic programming approach\\r\\n        dp = [0] * (n + 1)\\r\\n        dp[1] = 1\\r\\n        dp[2] = 2\\r\\n        \\r\\n        for i in range(3, n + 1):\\r\\n            dp[i] = dp[i - 1] + dp[i - 2]\\r\\n        \\r\\n        return dp[n]\\r\\n        \\r\\n        # Alternative approach with O(1) space\\r\\n        # a, b = 1, 2\\r\\n        # \\r\\n        # for i in range(3, n + 1):\\r\\n        #     a, b = b, a + b\\r\\n        # \\r\\n        # return a if n == 1 else b\\r\\n  \\r\\n  # Input parsing\\r\\nif __name__ == \\"__main__\\":\\r\\n    import sys\\r\\n    \\r\\n    # Parse input\\r\\n    n = int(sys.stdin.readline().strip())\\r\\n    \\r\\n    # Solve\\r\\n    sol = Solution()\\r\\n    result = sol.climbStairs(n)\\r\\n    \\r\\n    # Print result\\r\\n    print(result)", "JAVASCRIPT": "/**\\n  * @param {number} n\\n  * @return {number}\\n  */\\n  function climbStairs(n) {\\n  // Base cases\\n  if (n <= 2) {\\n    return n;\\n  }\\n  \\n  // Dynamic programming approach\\n  let dp = new Array(n + 1);\\n  dp[1] = 1;\\n  dp[2] = 2;\\n  \\n  for (let i = 3; i <= n; i++) {\\n    dp[i] = dp[i - 1] + dp[i - 2];\\n  }\\n  \\n  return dp[n];\\n  \\n  /* Alternative approach with O(1) space\\n  let a = 1; // ways to climb 1 step\\n  let b = 2; // ways to climb 2 steps\\n  \\n  for (let i = 3; i <= n; i++) {\\n    let temp = a + b;\\n    a = b;\\n    b = temp;\\n  }\\n  \\n  return n === 1 ? a : b;\\n  */\\n  }\\n  \\n  // Parse input and execute\\n  const readline = require('readline');\\n  const rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n  });\\n  \\n  rl.on('line', (line) => {\\n  const n = parseInt(line.trim());\\n  const result = climbStairs(n);\\n  \\n  console.log(result);\\n  rl.close();\\n  });"}	2025-07-13 10:54:02.008	2025-07-18 10:29:54.632	\N
12546f3f-9617-4641-be2e-f2afe0fb9ef5	Count Vowels in a String	Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Vowels can be lowercase or uppercase.	EASY	{String,Counting}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "s = \\"hello\\"", "output": "2", "explanation": "\\"e\\" and \\"o\\" are vowels."}, "PYTHON": {"input": "s = \\"hello\\"", "output": "2", "explanation": "\\"e\\" and \\"o\\" are vowels."}, "JAVASCRIPT": {"input": "s = \\"hello\\"", "output": "2", "explanation": "\\"e\\" and \\"o\\" are vowels."}}	1 <= s.length <= 10^5\ns consists of English letters only.	\N	\N	[{"input": "hello", "output": "2"}, {"input": "abcde", "output": "2"}, {"input": "xyz", "output": "0"}, {"input": "AEIOUaeiou", "output": "10"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int countVowels(String s) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        int result = countVowels(input);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def countVowels(self, s: str) -> int:\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    s = sys.stdin.readline().strip()\\n    sol = Solution()\\n    print(sol.countVowels(s))", "JAVASCRIPT": "/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction countVowels(s) {\\n    // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nrl.on('line', (line) => {\\n  const result = countVowels(line.trim());\\n  console.log(result);\\n  rl.close();\\n});"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int countVowels(String s) {\\n        Set<Character> vowels = new HashSet<>(Arrays.asList('a','e','i','o','u','A','E','I','O','U'));\\n        int count = 0;\\n        for (char ch : s.toCharArray()) {\\n            if (vowels.contains(ch)) count++;\\n        }\\n        return count;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        int result = countVowels(input);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def countVowels(self, s: str) -> int:\\n        vowels = set('aeiouAEIOU')\\n        return sum(1 for ch in s if ch in vowels)\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    s = sys.stdin.readline().strip()\\n    sol = Solution()\\n    print(sol.countVowels(s))", "JAVASCRIPT": "/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction countVowels(s) {\\n    const vowels = new Set(['a','e','i','o','u','A','E','I','O','U']);\\n    let count = 0;\\n    for (let ch of s) {\\n        if (vowels.has(ch)) count++;\\n    }\\n    return count;\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nrl.on('line', (line) => {\\n  const result = countVowels(line.trim());\\n  console.log(result);\\n  rl.close();\\n});"}	2025-07-24 22:01:49.638	2025-07-24 22:01:49.638	{Amazon,Google}
f37fdcfd-24ef-4350-a479-d4e048ad0107	Sum of Digits	Given a non-negative integer n, return the sum of its digits.	EASY	{Math,String}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "n = 1234", "output": "10", "explanation": "1 + 2 + 3 + 4 = 10"}, "PYTHON": {"input": "n = 1234", "output": "10", "explanation": "1 + 2 + 3 + 4 = 10"}, "JAVASCRIPT": {"input": "n = 1234", "output": "10", "explanation": "1 + 2 + 3 + 4 = 10"}}	0 <= n <= 10^9	\N	\N	[{"input": "1234", "output": "10"}, {"input": "0", "output": "0"}, {"input": "999", "output": "27"}]	{"JAVA": "import java.io.*;\\n\\npublic class Main {\\n    public static int sumOfDigits(int n) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine().trim());\\n        int result = sumOfDigits(n);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def sumOfDigits(self, n: int) -> int:\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    n = int(sys.stdin.readline().strip())\\n    sol = Solution()\\n    print(sol.sumOfDigits(n))", "JAVASCRIPT": "function sumOfDigits(n) {\\n    // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\\n\\nrl.on('line', (line) => {\\n  const n = parseInt(line.trim());\\n  const result = sumOfDigits(n);\\n  console.log(result);\\n  rl.close();\\n});"}	{"JAVA": "import java.io.*;\\n\\npublic class Main {\\n    public static int sumOfDigits(int n) {\\n        int sum = 0;\\n        while (n > 0) {\\n            sum += n % 10;\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine().trim());\\n        int result = sumOfDigits(n);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def sumOfDigits(self, n: int) -> int:\\n        return sum(int(d) for d in str(n))\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    n = int(sys.stdin.readline().strip())\\n    sol = Solution()\\n    print(sol.sumOfDigits(n))", "JAVASCRIPT": "function sumOfDigits(n) {\\n    return n.toString().split('').reduce((acc, digit) => acc + Number(digit), 0);\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\\n\\nrl.on('line', (line) => {\\n  const n = parseInt(line.trim());\\n  const result = sumOfDigits(n);\\n  console.log(result);\\n  rl.close();\\n});"}	2025-07-24 22:12:43.827	2025-07-24 22:12:43.827	{Google}
763bd38d-7bac-4e5e-ba33-8d2a5c587507	Valid Palindrome	A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string s, return true if it is a palindrome, or false otherwise.	EASY	{String,"Two Pointers"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "s = \\"A man, a plan, a canal: Panama\\"", "output": "true", "explanation": "\\"amanaplanacanalpanama\\" is a palindrome."}, "PYTHON": {"input": "s = \\"A man, a plan, a canal: Panama\\"", "output": "true", "explanation": "\\"amanaplanacanalpanama\\" is a palindrome."}, "JAVASCRIPT": {"input": "s = \\"A man, a plan, a canal: Panama\\"", "output": "true", "explanation": "\\"amanaplanacanalpanama\\" is a palindrome."}}	1 <= s.length <= 2 * 10^5\ns consists only of printable ASCII characters.	\N	\N	[{"input": "A man, a plan, a canal: Panama", "output": "true"}, {"input": "race a car", "output": "false"}, {"input": " ", "output": "true"}]	{"JAVA": "import java.util.Scanner;\\n  \\n  public class Main {\\n      public static String preprocess(String s) {\\n          return s.replaceAll(\\"[^a-zA-Z0-9]\\", \\"\\").toLowerCase();\\n      }\\n  \\n      public static boolean isPalindrome(String s) {\\n         \\n      }\\n  \\n      public static void main(String[] args) {\\n          Scanner sc = new Scanner(System.in);\\n          String input = sc.nextLine();\\n  \\n          boolean result = isPalindrome(input);\\n          System.out.println(result ? \\"true\\" : \\"false\\");\\n      }\\n  }\\n  ", "PYTHON": "class Solution:\\n        def isPalindrome(self, s: str) -> bool:\\n            # Write your code here\\n            pass\\n    \\n    # Input parsing\\nif __name__ == \\"__main__\\":\\n        import sys\\n        # Read the input string\\n        s = sys.stdin.readline().strip()\\n        \\n        # Call solution\\n        sol = Solution()\\n        result = sol.isPalindrome(s)\\n        \\n        # Output result\\n        print(str(result).lower())  # Convert True/False to lowercase true/false", "JAVASCRIPT": "/**\\n     * @param {string} s\\n     * @return {boolean}\\n     */\\n    function isPalindrome(s) {\\n      // Write your code here\\n    }\\n    \\n    // Add readline for dynamic input handling\\n    const readline = require('readline');\\n    const rl = readline.createInterface({\\n      input: process.stdin,\\n      output: process.stdout,\\n      terminal: false\\n    });\\n    \\n    // Process input line\\n    rl.on('line', (line) => {\\n      // Call solution with the input string\\n      const result = isPalindrome(line);\\n      \\n      // Output the result\\n      console.log(result ? \\"true\\" : \\"false\\");\\n      rl.close();\\n    });"}	{"JAVA": "import java.util.Scanner;\\n  \\n  public class Main {\\n      public static String preprocess(String s) {\\n          return s.replaceAll(\\"[^a-zA-Z0-9]\\", \\"\\").toLowerCase();\\n      }\\n  \\n      public static boolean isPalindrome(String s) {\\n          s = preprocess(s);\\n          int left = 0, right = s.length() - 1;\\n  \\n          while (left < right) {\\n              if (s.charAt(left) != s.charAt(right)) return false;\\n              left++;\\n              right--;\\n          }\\n  \\n          return true;\\n      }\\n  \\n      public static void main(String[] args) {\\n          Scanner sc = new Scanner(System.in);\\n          String input = sc.nextLine();\\n  \\n          boolean result = isPalindrome(input);\\n          System.out.println(result ? \\"true\\" : \\"false\\");\\n      }\\n  }\\n  ", "PYTHON": "class Solution:\\r\\n        def isPalindrome(self, s: str) -> bool:\\r\\n            # Convert to lowercase and keep only alphanumeric characters\\r\\n            filtered_chars = [c.lower() for c in s if c.isalnum()]\\r\\n            \\r\\n            # Check if it's a palindrome\\r\\n            return filtered_chars == filtered_chars[::-1]\\r\\n    \\r\\n    # Input parsing\\r\\nif __name__ == \\"__main__\\":\\r\\n        import sys\\r\\n        # Read the input string\\r\\n        s = sys.stdin.readline().strip()\\r\\n        \\r\\n        # Call solution\\r\\n        sol = Solution()\\r\\n        result = sol.isPalindrome(s)\\r\\n        \\r\\n        # Output result\\r\\n        print(str(result).lower())  # Convert True/False to lowercase true/false", "JAVASCRIPT": "/**\\n     * @param {string} s\\n     * @return {boolean}\\n     */\\n    function isPalindrome(s) {\\n      // Convert to lowercase and remove non-alphanumeric characters\\n      s = s.toLowerCase().replace(/[^a-z0-9]/g, '');\\n      \\n      // Check if it's a palindrome\\n      let left = 0;\\n      let right = s.length - 1;\\n      \\n      while (left < right) {\\n        if (s[left] !== s[right]) {\\n          return false;\\n        }\\n        left++;\\n        right--;\\n      }\\n      \\n      return true;\\n    }\\n    \\n    // Add readline for dynamic input handling\\n    const readline = require('readline');\\n    const rl = readline.createInterface({\\n      input: process.stdin,\\n      output: process.stdout,\\n      terminal: false\\n    });\\n    \\n    // Process input line\\n    rl.on('line', (line) => {\\n      // Call solution with the input string\\n      const result = isPalindrome(line);\\n      \\n      // Output the result\\n      console.log(result ? \\"true\\" : \\"false\\");\\n      rl.close();\\n    });"}	2025-07-13 13:44:22.606	2025-07-13 13:44:22.606	\N
c3455dcc-2c25-483c-af7b-78f54ca98d5e	Merge k Sorted Lists	You are given an array of k linked-lists, each sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.	HARD	{"Linked Lists",Heap,"Priorirty Queue"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "[[1,4,5],[1,3,4],[2,6]]", "output": "[1,1,2,3,4,4,5,6]", "explanation": "The linked-lists are:\\n\\n[1,4,5]\\n[1,3,4]\\n[2,6]\\n\\nMerging them into one sorted list: [1,1,2,3,4,4,5,6]"}, "PYTHON": {"input": "[[1,4,5],[1,3,4],[2,6]]", "output": "[1,1,2,3,4,4,5,6]", "explanation": "The linked-lists are:\\n\\n[1,4,5]\\n[1,3,4]\\n[2,6]\\n\\nMerging them into one sorted list: [1,1,2,3,4,4,5,6]"}, "JAVASCRIPT": {"input": "[[1,4,5],[1,3,4],[2,6]]", "output": "[1,1,2,3,4,4,5,6]", "explanation": "The linked-lists are:\\n\\n[1,4,5]\\n[1,3,4]\\n[2,6]\\n\\nMerging them into one sorted list: [1,1,2,3,4,4,5,6]"}}	k == lists.length\n0 <= k <= 10^4\n0 <= lists[i].length <= 500\n-10^4 <= lists[i][j] <= 10^4\nlists[i] is sorted in ascending order\nThe sum of lists[i].length will not exceed 10^4	\N	\N	[{"input": "[[1,4,5],[1,3,4],[2,6]]", "output": "[1,1,2,3,4,4,5,6]"}, {"input": "[]", "output": "[]"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\n// Definition for singly-linked list\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\npublic class Main {\\n    public static ListNode mergeKLists(ListNode[] lists) {\\n        // Implement your solution here\\n        return null;\\n    }\\n    \\n    // Helper function to convert array to linked list\\n    public static ListNode arrayToList(int[] arr) {\\n        if (arr == null || arr.length == 0) return null;\\n        ListNode head = new ListNode(arr[0]);\\n        ListNode current = head;\\n        for (int i = 1; i < arr.length; i++) {\\n            current.next = new ListNode(arr[i]);\\n            current = current.next;\\n        }\\n        return head;\\n    }\\n    \\n    // Helper function to convert linked list to array\\n    public static List<Integer> listToArray(ListNode head) {\\n        List<Integer> result = new ArrayList<>();\\n        while (head != null) {\\n            result.add(head.val);\\n            head = head.next;\\n        }\\n        return result;\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine();\\n        \\n        // Parse input (simplified for this example)\\n        // Handle JSON-like input: [[1,4,5],[1,3,4],[2,6]]\\n        input = input.trim();\\n        \\n        if (input.equals(\\"[]\\")) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n        \\n        List<ListNode> lists = new ArrayList<>();\\n        // Simple parsing for the example\\n        // In practice, you'd need more robust JSON parsing\\n        \\n        ListNode result = mergeKLists(lists.toArray(new ListNode[0]));\\n        System.out.println(listToArray(result).toString().replace(\\" \\", \\"\\"));\\n    }\\n}", "PYTHON": "# Definition for singly-linked list\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def mergeKLists(self, lists):\\n        # Implement your solution here\\n        pass\\n\\n# Helper function to convert array to linked list\\ndef array_to_list(arr):\\n    if not arr:\\n        return None\\n    head = ListNode(arr[0])\\n    current = head\\n    for i in range(1, len(arr)):\\n        current.next = ListNode(arr[i])\\n        current = current.next\\n    return head\\n\\n# Helper function to convert linked list to array\\ndef list_to_array(head):\\n    result = []\\n    while head:\\n        result.append(head.val)\\n        head = head.next\\n    return result\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    import json\\n    \\n    input_line = sys.stdin.readline().strip()\\n    \\n    # Parse input - handle both JSON and string formats\\n    if input_line.startswith('[[') and input_line.endswith(']]'):\\n        # Remove outer brackets and split by '],['\\n        input_line = input_line[2:-2]  # Remove [[ and ]]\\n        if input_line == '':\\n            input_data = []\\n        else:\\n            # Split by '],['\\n            parts = input_line.split('],[')\\n            input_data = []\\n            for part in parts:\\n                if part.strip():\\n                    input_data.append([int(x.strip()) for x in part.split(',')])\\n                else:\\n                    input_data.append([])\\n    else:\\n        # Try JSON parsing\\n        try:\\n            input_data = json.loads(input_line)\\n        except:\\n            input_data = []\\n    \\n    # Convert arrays to linked lists\\n    lists = [array_to_list(arr) for arr in input_data]\\n    \\n    sol = Solution()\\n    result = sol.mergeKLists(lists)\\n    \\n    print(json.dumps(list_to_array(result), separators=(',', ':')))", "JAVASCRIPT": "const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\n// Definition for singly-linked list\\nfunction ListNode(val, next) {\\n    this.val = (val === undefined ? 0 : val);\\n    this.next = (next === undefined ? null : next);\\n}\\n\\nfunction mergeKLists(lists) {\\n    // Implement your solution here\\n    return null;\\n}\\n\\n// Helper function to convert array to linked list\\nfunction arrayToList(arr) {\\n    if (!arr || arr.length === 0) return null;\\n    let head = new ListNode(arr[0]);\\n    let current = head;\\n    for (let i = 1; i < arr.length; i++) {\\n        current.next = new ListNode(arr[i]);\\n        current = current.next;\\n    }\\n    return head;\\n}\\n\\n// Helper function to convert linked list to array\\nfunction listToArray(head) {\\n    let result = [];\\n    while (head) {\\n        result.push(head.val);\\n        head = head.next;\\n    }\\n    return result;\\n}\\n\\nrl.on('line', (line) => {\\n    const input = JSON.parse(line.trim());\\n    const lists = input.map(arr => arrayToList(arr));\\n    const result = mergeKLists(lists);\\n    console.log(JSON.stringify(listToArray(result))); // ✅ Ensures no extra spaces\\n    rl.close();\\n});\\n"}	{"JAVA": "import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\n// Definition for singly-linked list\\r\\nclass ListNode {\\r\\n    int val;\\r\\n    ListNode next;\\r\\n    ListNode() {}\\r\\n    ListNode(int val) { this.val = val; }\\r\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\r\\n}\\r\\n\\r\\npublic class Main {\\r\\n    public static ListNode mergeKLists(ListNode[] lists) {\\r\\n        if (lists == null || lists.length == 0) return null;\\r\\n        \\r\\n        // Divide and conquer approach\\r\\n        while (lists.length > 1) {\\r\\n            List<ListNode> mergedLists = new ArrayList<>();\\r\\n            \\r\\n            for (int i = 0; i < lists.length; i += 2) {\\r\\n                ListNode l1 = lists[i];\\r\\n                ListNode l2 = i + 1 < lists.length ? lists[i + 1] : null;\\r\\n                mergedLists.add(mergeTwoLists(l1, l2));\\r\\n            }\\r\\n            \\r\\n            lists = mergedLists.toArray(new ListNode[0]);\\r\\n        }\\r\\n        \\r\\n        return lists[0];\\r\\n    }\\r\\n    \\r\\n    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\r\\n        ListNode dummy = new ListNode(0);\\r\\n        ListNode current = dummy;\\r\\n        \\r\\n        while (l1 != null && l2 != null) {\\r\\n            if (l1.val <= l2.val) {\\r\\n                current.next = l1;\\r\\n                l1 = l1.next;\\r\\n            } else {\\r\\n                current.next = l2;\\r\\n                l2 = l2.next;\\r\\n            }\\r\\n            current = current.next;\\r\\n        }\\r\\n        \\r\\n        current.next = l1 != null ? l1 : l2;\\r\\n        return dummy.next;\\r\\n    }\\r\\n    \\r\\n    // Helper function to convert array to linked list\\r\\n    public static ListNode arrayToList(int[] arr) {\\r\\n        if (arr == null || arr.length == 0) return null;\\r\\n        ListNode head = new ListNode(arr[0]);\\r\\n        ListNode current = head;\\r\\n        for (int i = 1; i < arr.length; i++) {\\r\\n            current.next = new ListNode(arr[i]);\\r\\n            current = current.next;\\r\\n        }\\r\\n        return head;\\r\\n    }\\r\\n    \\r\\n    // Helper function to convert linked list to array\\r\\n    public static List<Integer> listToArray(ListNode head) {\\r\\n        List<Integer> result = new ArrayList<>();\\r\\n        while (head != null) {\\r\\n            result.add(head.val);\\r\\n            head = head.next;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    public static void main(String[] args) {\\r\\n        Scanner scanner = new Scanner(System.in);\\r\\n        String input = scanner.nextLine().trim();\\r\\n        \\r\\n        if (input.equals(\\"[]\\")) {\\r\\n            System.out.println(\\"[]\\");\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Remove outer brackets and split\\r\\n        input = input.substring(2, input.length() - 2); // remove [[ and ]]\\r\\n        String[] parts = input.split(\\"\\\\\\\\],\\\\\\\\[\\");\\r\\n\\r\\n        List<ListNode> listNodes = new ArrayList<>();\\r\\n\\r\\n        for (String part : parts) {\\r\\n            if (part.trim().isEmpty()) {\\r\\n                listNodes.add(null);\\r\\n                continue;\\r\\n            }\\r\\n            String[] nums = part.split(\\",\\");\\r\\n            int[] arr = Arrays.stream(nums)\\r\\n                .map(String::trim)\\r\\n                .mapToInt(Integer::parseInt)\\r\\n                .toArray();\\r\\n            listNodes.add(arrayToList(arr));\\r\\n        }\\r\\n\\r\\n        ListNode result = mergeKLists(listNodes.toArray(new ListNode[0]));\\r\\n        System.out.println(listToArray(result).toString().replace(\\" \\", \\"\\"));\\r\\n    }\\r\\n}\\r\\n", "PYTHON": "# Definition for singly-linked list\\r\\nclass ListNode:\\r\\n    def __init__(self, val=0, next=None):\\r\\n        self.val = val\\r\\n        self.next = next\\r\\n\\r\\nclass Solution:\\r\\n    def mergeKLists(self, lists):\\r\\n        if not lists or len(lists) == 0:\\r\\n            return None\\r\\n        \\r\\n        # Divide and conquer approach\\r\\n        while len(lists) > 1:\\r\\n            merged_lists = []\\r\\n            \\r\\n            for i in range(0, len(lists), 2):\\r\\n                l1 = lists[i]\\r\\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\\r\\n                merged_lists.append(self.mergeTwoLists(l1, l2))\\r\\n            \\r\\n            lists = merged_lists\\r\\n        \\r\\n        return lists[0]\\r\\n    \\r\\n    def mergeTwoLists(self, l1, l2):\\r\\n        dummy = ListNode(0)\\r\\n        current = dummy\\r\\n        \\r\\n        while l1 and l2:\\r\\n            if l1.val <= l2.val:\\r\\n                current.next = l1\\r\\n                l1 = l1.next\\r\\n            else:\\r\\n                current.next = l2\\r\\n                l2 = l2.next\\r\\n            current = current.next\\r\\n        \\r\\n        current.next = l1 or l2\\r\\n        return dummy.next\\r\\n\\r\\n# Helper function to convert array to linked list\\r\\ndef array_to_list(arr):\\r\\n    if not arr:\\r\\n        return None\\r\\n    head = ListNode(arr[0])\\r\\n    current = head\\r\\n    for i in range(1, len(arr)):\\r\\n        current.next = ListNode(arr[i])\\r\\n        current = current.next\\r\\n    return head\\r\\n\\r\\n# Helper function to convert linked list to array\\r\\ndef list_to_array(head):\\r\\n    result = []\\r\\n    while head:\\r\\n        result.append(head.val)\\r\\n        head = head.next\\r\\n    return result\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    import sys\\r\\n    import json\\r\\n    \\r\\n    input_line = sys.stdin.readline().strip()\\r\\n    \\r\\n    # Parse input - handle both JSON and string formats\\r\\n    if input_line.startswith('[[') and input_line.endswith(']]'):\\r\\n        # Remove outer brackets and split by '],['\\r\\n        input_line = input_line[2:-2]  # Remove [[ and ]]\\r\\n        if input_line == '':\\r\\n            input_data = []\\r\\n        else:\\r\\n            # Split by '],['\\r\\n            parts = input_line.split('],[')\\r\\n            input_data = []\\r\\n            for part in parts:\\r\\n                if part.strip():\\r\\n                    input_data.append([int(x.strip()) for x in part.split(',')])\\r\\n                else:\\r\\n                    input_data.append([])\\r\\n    else:\\r\\n        # Try JSON parsing\\r\\n        try:\\r\\n            input_data = json.loads(input_line)\\r\\n        except:\\r\\n            input_data = []\\r\\n    \\r\\n    # Convert arrays to linked lists\\r\\n    lists = [array_to_list(arr) for arr in input_data]\\r\\n    \\r\\n    sol = Solution()\\r\\n    result = sol.mergeKLists(lists)\\r\\n    \\r\\n    print(json.dumps(list_to_array(result), separators=(',', ':')))", "JAVASCRIPT": "const readline = require('readline');\\r\\nconst rl = readline.createInterface({\\r\\n    input: process.stdin,\\r\\n    output: process.stdout\\r\\n});\\r\\n\\r\\n// Definition for singly-linked list\\r\\nfunction ListNode(val, next) {\\r\\n    this.val = (val===undefined ? 0 : val);\\r\\n    this.next = (next===undefined ? null : next);\\r\\n}\\r\\n\\r\\nfunction mergeKLists(lists) {\\r\\n    if (!lists || lists.length === 0) return null;\\r\\n    \\r\\n    // Divide and conquer approach\\r\\n    while (lists.length > 1) {\\r\\n        let mergedLists = [];\\r\\n        \\r\\n        for (let i = 0; i < lists.length; i += 2) {\\r\\n            let l1 = lists[i];\\r\\n            let l2 = i + 1 < lists.length ? lists[i + 1] : null;\\r\\n            mergedLists.push(mergeTwoLists(l1, l2));\\r\\n        }\\r\\n        \\r\\n        lists = mergedLists;\\r\\n    }\\r\\n    \\r\\n    return lists[0];\\r\\n}\\r\\n\\r\\nfunction mergeTwoLists(l1, l2) {\\r\\n    let dummy = new ListNode(0);\\r\\n    let current = dummy;\\r\\n    \\r\\n    while (l1 && l2) {\\r\\n        if (l1.val <= l2.val) {\\r\\n            current.next = l1;\\r\\n            l1 = l1.next;\\r\\n        } else {\\r\\n            current.next = l2;\\r\\n            l2 = l2.next;\\r\\n        }\\r\\n        current = current.next;\\r\\n    }\\r\\n    \\r\\n    current.next = l1 || l2;\\r\\n    return dummy.next;\\r\\n}\\r\\n\\r\\n// Helper function to convert array to linked list\\r\\nfunction arrayToList(arr) {\\r\\n    if (!arr || arr.length === 0) return null;\\r\\n    let head = new ListNode(arr[0]);\\r\\n    let current = head;\\r\\n    for (let i = 1; i < arr.length; i++) {\\r\\n        current.next = new ListNode(arr[i]);\\r\\n        current = current.next;\\r\\n    }\\r\\n    return head;\\r\\n}\\r\\n\\r\\n// Helper function to convert linked list to array\\r\\nfunction listToArray(head) {\\r\\n    let result = [];\\r\\n    while (head) {\\r\\n        result.push(head.val);\\r\\n        head = head.next;\\r\\n    }\\r\\n    return result;\\r\\n}\\r\\n\\r\\nrl.on('line', (line) => {\\r\\n    const input = JSON.parse(line.trim());\\r\\n    const lists = input.map(arr => arrayToList(arr));\\r\\n    const result = mergeKLists(lists);\\r\\n    console.log(JSON.stringify(listToArray(result)));\\r\\n    rl.close();\\r\\n});"}	2025-07-13 11:43:03.112	2025-07-18 10:57:00.775	\N
f5488396-8c9a-4479-89d8-b70181bfa61d	Longest Word With All Prefixes	Given a list of words, return the longest word such that every prefix of the word is also in the list. If multiple results are possible, return the lexicographically smallest one. If no such word exists, return an empty string.	MEDIUM	{"Hash Table",Sorting,Prefix}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "words = [\\"w\\", \\"wo\\", \\"wor\\", \\"worl\\", \\"world\\"]", "output": "world", "explanation": "All prefixes of 'world' (w, wo, wor, worl) exist in the list."}, "PYTHON": {"input": "words = ['w', 'wo', 'wor', 'worl', 'world']", "output": "world", "explanation": "All prefixes of 'world' (w, wo, wor, worl) exist in the list."}, "JAVASCRIPT": {"input": "words = ['w', 'wo', 'wor', 'worl', 'world']", "output": "world", "explanation": "All prefixes of 'world' (w, wo, wor, worl) exist in the list."}}	1 <= words.length <= 10^4\n1 <= words[i].length <= 30\nAll words contain only lowercase English letters.	\N	\N	[{"input": "w wo wor worl world", "output": "world"}, {"input": "a aa aaa aaaa", "output": "aaaa"}, {"input": "b ba bac bad", "output": "bac"}, {"input": "m ma man", "output": "man"}, {"input": "k ka kar kart karti karth", "output": "karth"}, {"input": "a ab abc abcd", "output": "abcd"}]	{"JAVA": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static String longestWord(String[] words) {\\n        // Write your code here\\n        return \\"\\";\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String[] words = br.readLine().trim().split(\\"\\\\\\\\s+\\");\\n        System.out.println(longestWord(words));\\n    }\\n}", "PYTHON": "class Solution:\\n    def longestWord(self, words):\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    words = sys.stdin.readline().strip().split()\\n    sol = Solution()\\n    print(sol.longestWord(words))", "JAVASCRIPT": "/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nfunction longestWord(words) {\\n    // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\\n\\nrl.on('line', (line) => {\\n  const words = line.trim().split(/\\\\s+/);\\n  const result = longestWord(words);\\n  console.log(result);\\n  rl.close();\\n});"}	{"JAVA": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Main {\\n    public static String longestWord(String[] words) {\\n        Set<String> wordSet = new HashSet<>(Arrays.asList(words));\\n        Arrays.sort(words);\\n        String best = \\"\\";\\n        for (String word : words) {\\n            boolean allExist = true;\\n            for (int i = 1; i < word.length(); i++) {\\n                if (!wordSet.contains(word.substring(0, i))) {\\n                    allExist = false;\\n                    break;\\n                }\\n            }\\n            if (allExist && (word.length() > best.length() ||\\n                (word.length() == best.length() && word.compareTo(best) < 0))) {\\n                best = word;\\n            }\\n        }\\n        return best;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String[] words = br.readLine().trim().split(\\" \\");\\n        System.out.println(longestWord(words));\\n    }\\n}", "PYTHON": "class Solution:\\n    def longestWord(self, words):\\n        word_set = set(words)\\n        words.sort()\\n        best = \\"\\"\\n        for word in words:\\n            if all(word[:i] in word_set for i in range(1, len(word))):\\n                if len(word) > len(best) or (len(word) == len(best) and word < best):\\n                    best = word\\n        return best\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    words = sys.stdin.readline().strip().split()\\n    sol = Solution()\\n    print(sol.longestWord(words))", "JAVASCRIPT": "/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nfunction longestWord(words) {\\n    const wordSet = new Set(words);\\n    words.sort();\\n    let best = \\"\\";\\n    for (const word of words) {\\n        let valid = true;\\n        for (let i = 1; i < word.length; i++) {\\n            if (!wordSet.has(word.slice(0, i))) {\\n                valid = false;\\n                break;\\n            }\\n        }\\n        if (valid && (word.length > best.length || (word.length === best.length && word < best))) {\\n            best = word;\\n        }\\n    }\\n    return best;\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\\n\\nrl.on('line', (line) => {\\n  const words = line.trim().split(/\\\\s+/);\\n  const result = longestWord(words);\\n  console.log(result);\\n  rl.close();\\n});"}	2025-07-24 22:44:15.858	2025-07-24 22:44:15.858	{Google,Amazon}
64fe9845-9627-40d7-9c33-ea38a95ae747	Maximum Length of Contiguous (0,1) Subarray	Given a binary array (containing only 0s and 1s), return the length of the longest contiguous subarray that contains an equal number of 0s and 1s.	MEDIUM	{Array,"Hash Map","Prefix Sum"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "[1,0,1,0]", "output": "4", "explanation": "The subarray [1,0,1,0] has two 0s and two 1s."}, "PYTHON": {"input": "[0,0,1,1,0]", "output": "4", "explanation": "The subarray [0,0,1,1] has equal 0s and 1s."}, "JAVASCRIPT": {"input": "[0,1,0,1,1,0]", "output": "6", "explanation": "The entire array has equal number of 0s and 1s."}}	1 <= nums.length <= 10^5\nEach element in nums is either 0 or 1.	\N	\N	[{"input": "[0,1]", "output": "2"}, {"input": "[0,1,0]", "output": "2"}, {"input": "[0,1,1,0,1,1,1,0]", "output": "4"}, {"input": "[1,1,1,1]", "output": "0"}, {"input": "[0,0,1,1,0]", "output": "4"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int findMaxLength(int[] nums) {\\n        // TODO: Implement your solution here\\n        return 0;\\n    }\\n\\n    // Manual JSON array parser for Judge0 compatibility\\n    public static int[] parseJsonArray(String json) {\\n        json = json.trim();\\n        if (json.startsWith(\\"[\\") && json.endsWith(\\"]\\")) {\\n            json = json.substring(1, json.length() - 1).trim();\\n        }\\n        if (json.isEmpty()) return new int[0];\\n\\n        String[] parts = json.split(\\",\\");\\n        int[] result = new int[parts.length];\\n        for (int i = 0; i < parts.length; i++) {\\n            result[i] = Integer.parseInt(parts[i].trim());\\n        }\\n        return result;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine();\\n\\n        int[] nums = parseJsonArray(input);\\n        int result = findMaxLength(nums);\\n        System.out.println(result);\\n    }\\n}\\n", "PYTHON": "def findMaxLength(nums):\\n    # Write your code here\\n    return 0\\n\\n# Input parsing\\nimport sys\\nimport json\\ninput_data = sys.stdin.read().strip()\\nnums = json.loads(input_data)\\nresult = findMaxLength(nums)\\nprint(result)", "JAVASCRIPT": "/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nfunction findMaxLength(nums) {\\n    // Write your code here\\n    return 0;\\n}\\n\\n// Input parsing\\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\\nconst nums = JSON.parse(input);\\nconst result = findMaxLength(nums);\\nconsole.log(result);"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int findMaxLength(int[] nums) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        map.put(0, -1);\\n        int maxLen = 0, count = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            count += nums[i] == 1 ? 1 : -1;\\n            if (map.containsKey(count)) {\\n                maxLen = Math.max(maxLen, i - map.get(count));\\n            } else {\\n                map.put(count, i);\\n            }\\n        }\\n        return maxLen;\\n    }\\n\\n    // Manual parser for array input like \\"[0, 1, 0, 1]\\"\\n    public static int[] parseJsonArray(String json) {\\n        json = json.trim();\\n        if (json.startsWith(\\"[\\") && json.endsWith(\\"]\\")) {\\n            json = json.substring(1, json.length() - 1).trim();\\n        }\\n        if (json.isEmpty()) return new int[0];\\n\\n        String[] parts = json.split(\\",\\");\\n        int[] result = new int[parts.length];\\n        for (int i = 0; i < parts.length; i++) {\\n            result[i] = Integer.parseInt(parts[i].trim());\\n        }\\n        return result;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine();\\n        int[] nums = parseJsonArray(input);\\n\\n        int result = findMaxLength(nums);\\n        System.out.println(result);\\n    }\\n}\\n", "PYTHON": "def findMaxLength(nums):\\n    count_map = {0: -1}\\n    max_len = count = 0\\n    for i, num in enumerate(nums):\\n        count += 1 if num == 1 else -1\\n        if count in count_map:\\n            max_len = max(max_len, i - count_map[count])\\n        else:\\n            count_map[count] = i\\n    return max_len\\n\\n# Input parsing\\nimport sys\\nimport json\\ninput_data = sys.stdin.read().strip()\\nnums = json.loads(input_data)\\nresult = findMaxLength(nums)\\nprint(result)", "JAVASCRIPT": "function findMaxLength(nums) {\\n    const map = new Map();\\n    map.set(0, -1);\\n    let maxLen = 0, count = 0;\\n    for (let i = 0; i < nums.length; i++) {\\n        count += nums[i] === 1 ? 1 : -1;\\n        if (map.has(count)) {\\n            maxLen = Math.max(maxLen, i - map.get(count));\\n        } else {\\n            map.set(count, i);\\n        }\\n    }\\n    return maxLen;\\n}\\n\\n// Input parsing\\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\\nconst nums = JSON.parse(input);\\nconst result = findMaxLength(nums);\\nconsole.log(result);"}	2025-07-24 22:51:37.432	2025-07-24 22:57:31.237	{Amazon,Facebook}
e16cde39-647a-4c18-817e-29eed14274ac	Find Maximum Element in Array	Given an array of integers, return the maximum element in the array.	EASY	{Arrays}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "arr = [100]", "output": "100", "explanation": "The largest value in the array is 100."}, "PYTHON": {"input": "arr = [-10, -20, -5, -1]", "output": "-1", "explanation": "The largest value in the array is -1."}, "JAVASCRIPT": {"input": "arr = [1, 3, 2, 5, 4]", "output": "5", "explanation": "The largest value in the array is 5."}}	1 <= arr.length <= 10^4\n-10^5 <= arr[i] <= 10^5	\N	\N	[{"input": "[1, 3, 2, 5, 4]", "output": "5"}, {"input": "[-10, -20, -5, -1]", "output": "-1"}, {"input": "[100]", "output": "100"}, {"input": "[2, 2, 2, 2]", "output": "2"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int findMax(int[] arr) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n\\n        // Manual parsing from JSON-like array string\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");  // remove brackets and spaces\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n\\n        System.out.println(findMax(arr));\\n    }\\n}\\n", "PYTHON": "class Solution:\\n    def findMax(self, arr):\\n        # Write your code here\\n        pass\\n\\nif __name__ == '__main__':\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline())\\n    sol = Solution()\\n    print(sol.findMax(arr))", "JAVASCRIPT": "/**\\n * @param {number[]} arr\\n * @return {number}\\n */\\nfunction findMax(arr) {\\n    // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\n\\nrl.on('line', (line) => {\\n  const arr = JSON.parse(line);\\n  console.log(findMax(arr));\\n  rl.close();\\n});"}	{"JAVA": "import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static int findMax(int[] arr) {\\r\\n        int max = arr[0];\\r\\n        for (int num : arr) {\\r\\n            max = Math.max(max, num);\\r\\n        }\\r\\n        return max;\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n        String input = br.readLine().trim();\\r\\n\\r\\n        // Manual parsing from JSON-like array string\\r\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");\\r\\n        String[] tokens = input.split(\\",\\");\\r\\n        int[] arr = new int[tokens.length];\\r\\n        for (int i = 0; i < tokens.length; i++) {\\r\\n            arr[i] = Integer.parseInt(tokens[i]);\\r\\n        }\\r\\n\\r\\n        System.out.println(findMax(arr));\\r\\n    }\\r\\n}\\r\\n", "PYTHON": "class Solution:\\n    def findMax(self, arr):\\n        return max(arr)\\n\\nif __name__ == '__main__':\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline())\\n    sol = Solution()\\n    print(sol.findMax(arr))", "JAVASCRIPT": "function findMax(arr) {\\n    return Math.max(...arr);\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n  const arr = JSON.parse(line);\\n  console.log(findMax(arr));\\n  rl.close();\\n});"}	2025-07-24 23:05:11.682	2025-07-24 23:05:11.682	{Google,Microsoft}
87a550f5-fdd2-4f87-95aa-904ea1604fbb	Find Median of Two Sorted Arrays	Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).	HARD	{Array,"Binary Search","Divide and Conquer"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "nums1 = [], nums2 = [1]", "output": "1.0", "explanation": "Only one element in second array, median is 1."}, "PYTHON": {"input": "nums1 = [1,2], nums2 = [3,4]", "output": "2.5", "explanation": "Merged array is [1,2,3,4], median is (2+3)/2 = 2.5."}, "JAVASCRIPT": {"input": "nums1 = [1,3], nums2 = [2]", "output": "2.0", "explanation": "Merged array is [1,2,3], median is 2."}}	0 <= m, n <= 10^6\n-10^6 <= nums1[i], nums2[i] <= 10^6\nnums1 and nums2 are sorted in non-decreasing order.	\N	\N	[{"input": "[1,3]\\n[2]", "output": "2.0"}, {"input": "[1,2]\\n[3,4]", "output": "2.5"}, {"input": "[]\\n[1]", "output": "1.0"}, {"input": "[0,0]\\n[0,0]", "output": "0.0"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {\\n        //Write your code here\\n\\n        return 0.0;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input1 = br.readLine().trim();\\n        String input2 = br.readLine().trim();\\n\\n        int[] nums1 = parseArray(input1);\\n        int[] nums2 = parseArray(input2);\\n\\n        double result = findMedianSortedArrays(nums1, nums2);\\n        System.out.println(result);\\n    }\\n\\n    public static int[] parseArray(String input) {\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");\\n        if (input.isEmpty()) return new int[0];\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n        return arr;\\n    }\\n}\\n", "PYTHON": "class Solution:\\n    def findMedianSortedArrays(self, nums1, nums2):\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    nums1 = json.loads(sys.stdin.readline().strip())\\n    nums2 = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    result = sol.findMedianSortedArrays(nums1, nums2)\\n    print(f\\"{result:.1f}\\")\\n", "JAVASCRIPT": "/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nfunction findMedianSortedArrays(nums1, nums2) {\\n  // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const nums1 = JSON.parse(inputLines[0]);\\n    const nums2 = JSON.parse(inputLines[1]);\\n    const result = findMedianSortedArrays(nums1, nums2);\\n    console.log(result.toFixed(1));\\n    rl.close();\\n  }\\n});"}	{"JAVA": "import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {\\r\\n        if (nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);\\r\\n\\r\\n        int m = nums1.length, n = nums2.length;\\r\\n        int low = 0, high = m;\\r\\n\\r\\n        while (low <= high) {\\r\\n            int partitionX = (low + high) / 2;\\r\\n            int partitionY = (m + n + 1) / 2 - partitionX;\\r\\n\\r\\n            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];\\r\\n            int minRightX = (partitionX == m) ? Integer.MAX_VALUE : nums1[partitionX];\\r\\n\\r\\n            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];\\r\\n            int minRightY = (partitionY == n) ? Integer.MAX_VALUE : nums2[partitionY];\\r\\n\\r\\n            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\\r\\n                if ((m + n) % 2 == 0) {\\r\\n                    return ((double)Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\\r\\n                } else {\\r\\n                    return (double)Math.max(maxLeftX, maxLeftY);\\r\\n                }\\r\\n            } else if (maxLeftX > minRightY) {\\r\\n                high = partitionX - 1;\\r\\n            } else {\\r\\n                low = partitionX + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        throw new IllegalArgumentException(\\"Input arrays are not sorted properly.\\");\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) throws IOException {\\r\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n        String input1 = br.readLine().trim();\\r\\n        String input2 = br.readLine().trim();\\r\\n\\r\\n        int[] nums1 = parseArray(input1);\\r\\n        int[] nums2 = parseArray(input2);\\r\\n\\r\\n        double result = findMedianSortedArrays(nums1, nums2);\\r\\n        System.out.println(result);\\r\\n    }\\r\\n\\r\\n    public static int[] parseArray(String input) {\\r\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");\\r\\n        if (input.isEmpty()) return new int[0];\\r\\n        String[] tokens = input.split(\\",\\");\\r\\n        int[] arr = new int[tokens.length];\\r\\n        for (int i = 0; i < tokens.length; i++) {\\r\\n            arr[i] = Integer.parseInt(tokens[i]);\\r\\n        }\\r\\n        return arr;\\r\\n    }\\r\\n}\\r\\n", "PYTHON": "class Solution:\\r\\n    def findMedianSortedArrays(self, nums1, nums2):\\r\\n        if len(nums1) > len(nums2):\\r\\n            nums1, nums2 = nums2, nums1\\r\\n        m, n = len(nums1), len(nums2)\\r\\n        low, high = 0, m\\r\\n        while low <= high:\\r\\n            partitionX = (low + high) // 2\\r\\n            partitionY = (m + n + 1) // 2 - partitionX\\r\\n\\r\\n            maxLeftX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\\r\\n            minRightX = float('inf') if partitionX == m else nums1[partitionX]\\r\\n\\r\\n            maxLeftY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\\r\\n            minRightY = float('inf') if partitionY == n else nums2[partitionY]\\r\\n\\r\\n            if maxLeftX <= minRightY and maxLeftY <= minRightX:\\r\\n                if (m + n) % 2 == 0:\\r\\n                    return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2\\r\\n                else:\\r\\n                    return max(maxLeftX, maxLeftY)\\r\\n            elif maxLeftX > minRightY:\\r\\n                high = partitionX - 1\\r\\n            else:\\r\\n                low = partitionX + 1\\r\\n        raise ValueError(\\"Input arrays are not sorted properly\\")\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    import sys, json\\r\\n    nums1 = json.loads(sys.stdin.readline().strip())\\r\\n    nums2 = json.loads(sys.stdin.readline().strip())\\r\\n    sol = Solution()\\r\\n    result = sol.findMedianSortedArrays(nums1, nums2)\\r\\n    print(f\\"{result:.1f}\\")\\r\\n", "JAVASCRIPT": "function findMedianSortedArrays(nums1, nums2) {\\r\\n  if (nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);\\r\\n\\r\\n  let m = nums1.length, n = nums2.length;\\r\\n  let low = 0, high = m;\\r\\n  while (low <= high) {\\r\\n    let partitionX = Math.floor((low + high) / 2);\\r\\n    let partitionY = Math.floor((m + n + 1) / 2) - partitionX;\\r\\n\\r\\n    let maxLeftX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];\\r\\n    let minRightX = partitionX === m ? Infinity : nums1[partitionX];\\r\\n\\r\\n    let maxLeftY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];\\r\\n    let minRightY = partitionY === n ? Infinity : nums2[partitionY];\\r\\n\\r\\n    if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\\r\\n      if ((m + n) % 2 === 0) {\\r\\n        return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\\r\\n      } else {\\r\\n        return Math.max(maxLeftX, maxLeftY);\\r\\n      }\\r\\n    } else if (maxLeftX > minRightY) {\\r\\n      high = partitionX - 1;\\r\\n    } else {\\r\\n      low = partitionX + 1;\\r\\n    }\\r\\n  }\\r\\n  throw new Error(\\"Input arrays are not sorted properly\\");\\r\\n}\\r\\n\\r\\nconst readline = require('readline');\\r\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\r\\nlet inputLines = [];\\r\\nrl.on('line', (line) => {\\r\\n  inputLines.push(line.trim());\\r\\n  if (inputLines.length === 2) {\\r\\n    const nums1 = JSON.parse(inputLines[0]);\\r\\n    const nums2 = JSON.parse(inputLines[1]);\\r\\n    const result = findMedianSortedArrays(nums1, nums2);\\r\\n    console.log(result.toFixed(1));\\r\\n    rl.close();\\r\\n  }\\r\\n});"}	2025-07-24 23:35:08.283	2025-07-24 23:35:08.283	{Google,Amazon,Microsoft}
7e3ad7ce-53ab-4e66-9df7-857fa84d4522	Encode and Decode Strings	Design an algorithm to encode a list of strings to a single string. The encoded string is then decoded back to the original list of strings.	MEDIUM	{Strings,Design}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "strs = [\\"hello\\", \\"\\", \\"world\\"]", "output": "[\\"hello\\",\\"\\",\\"world\\"]", "explanation": "Empty strings are encoded and decoded properly."}, "PYTHON": {"input": "strs = [\\"neet\\", \\"code\\", \\"love\\", \\"you\\"]", "output": "[\\"neet\\",\\"code\\",\\"love\\",\\"you\\"]", "explanation": "Encoded and then decoded list matches the original."}, "JAVASCRIPT": {"input": "strs = [\\"we\\", \\"say\\", \\":\\", \\"yes\\"]", "output": "[\\"we\\",\\"say\\",\\":\\",\\"yes\\"]", "explanation": "Special characters like ':' are handled correctly."}}	0 <= strs.length < 100, 0 <= strs[i].length < 200, strs[i] contains only UTF-8 characters.	\N	\N	[{"input": "[\\"neet\\", \\"code\\", \\"love\\", \\"you\\"]", "output": "[\\"neet\\",\\"code\\",\\"love\\",\\"you\\"]"}, {"input": "[\\"we\\", \\"say\\", \\":\\", \\"yes\\"]", "output": "[\\"we\\",\\"say\\",\\":\\",\\"yes\\"]"}, {"input": "[]", "output": "[]"}, {"input": "[\\"\\"]", "output": "[\\"\\"]"}, {"input": "[\\"hello\\", \\"\\", \\"world\\"]", "output": "[\\"hello\\",\\"\\",\\"world\\"]"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static String encode(List<String> strs) {\\n        // implement here\\n        return \\"\\";\\n    }\\n\\n    public static List<String> decode(String s) {\\n        // implement here\\n        return new ArrayList<>();\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n        List<String> inputList = new ArrayList<>();\\n        if (!line.isEmpty()) {\\n            String[] tokens = line.split(\\",(?=([^\\"]*\\"[^\\"]*\\")*[^\\"]*$)\\");\\n            for (String token : tokens) {\\n                token = token.trim();\\n                if (token.startsWith(\\"\\\\\\"\\") && token.endsWith(\\"\\\\\\"\\")) {\\n                    token = token.substring(1, token.length() - 1);\\n                }\\n                inputList.add(token);\\n            }\\n        }\\n        String encoded = encode(inputList);\\n        List<String> decoded = decode(encoded);\\n        // Print JSON style formatted list\\n        System.out.println(toJson(decoded));\\n    }\\n\\n    public static String toJson(List<String> list) {\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(\\"[\\");\\n        for (int i = 0; i < list.size(); i++) {\\n            sb.append(\\"\\\\\\"\\").append(list.get(i).replace(\\"\\\\\\"\\", \\"\\\\\\\\\\\\\\"\\")).append(\\"\\\\\\"\\");\\n            if (i != list.size() - 1) sb.append(\\",\\");\\n        }\\n        sb.append(\\"]\\");\\n        return sb.toString();\\n    }\\n}", "PYTHON": "import sys, json\\nstrs = json.loads(sys.stdin.read())\\n\\ndef encode(strs):\\n    # implement here\\n    pass\\n\\ndef decode(s):\\n    # implement here\\n    pass\\n\\n# Example usage:\\nencoded = encode(strs)\\nprint(json.dumps(decode(encoded)))", "JAVASCRIPT": "const fs = require('fs');\\nconst strs = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction encode(strs) {\\n  // implement here\\n}\\n\\nfunction decode(s) {\\n  // implement here\\n}\\n\\nlet encoded = encode(strs);\\nconsole.log(JSON.stringify(decode(encoded)));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static String encode(List<String> strs) {\\n        StringBuilder sb = new StringBuilder();\\n        for (String s : strs) {\\n            sb.append(s.length()).append(':').append(s);\\n        }\\n        return sb.toString();\\n    }\\n\\n    public static List<String> decode(String s) {\\n        List<String> res = new ArrayList<>();\\n        int i = 0;\\n        while (i < s.length()) {\\n            int j = i;\\n            while (s.charAt(j) != ':') {\\n                j++;\\n            }\\n            int length = Integer.parseInt(s.substring(i, j));\\n            res.add(s.substring(j + 1, j + 1 + length));\\n            i = j + 1 + length;\\n        }\\n        return res;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n        List<String> inputList = new ArrayList<>();\\n        if (!line.isEmpty()) {\\n            String[] tokens = line.split(\\",(?=([^\\"]*\\"[^\\"]*\\")*[^\\"]*$)\\");\\n            for (String token : tokens) {\\n                token = token.trim();\\n                if (token.startsWith(\\"\\\\\\"\\") && token.endsWith(\\"\\\\\\"\\")) {\\n                    token = token.substring(1, token.length() - 1);\\n                }\\n                inputList.add(token);\\n            }\\n        }\\n        String encoded = encode(inputList);\\n        List<String> decoded = decode(encoded);\\n        System.out.println(toJson(decoded));\\n    }\\n\\n    public static String toJson(List<String> list) {\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(\\"[\\");\\n        for (int i = 0; i < list.size(); i++) {\\n            sb.append(\\"\\\\\\"\\").append(list.get(i).replace(\\"\\\\\\"\\", \\"\\\\\\\\\\\\\\"\\")).append(\\"\\\\\\"\\");\\n            if (i != list.size() - 1) sb.append(\\",\\");\\n        }\\n        sb.append(\\"]\\");\\n        return sb.toString();\\n    }\\n}", "PYTHON": "import sys, json\\nstrs = json.loads(sys.stdin.read())\\n\\ndef encode(strs):\\n    encoded = \\"\\"\\n    for s in strs:\\n        encoded += str(len(s)) + ':' + s\\n    return encoded\\n\\ndef decode(s):\\n    res = []\\n    i = 0\\n    while i < len(s):\\n        j = i\\n        while s[j] != ':':\\n            j += 1\\n        length = int(s[i:j])\\n        res.append(s[j+1:j+1+length])\\n        i = j + 1 + length\\n    return res\\n\\nencoded = encode(strs)\\nprint(json.dumps(decode(encoded)))", "JAVASCRIPT": "const fs = require('fs');\\nconst strs = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction encode(strs) {\\n  let result = '';\\n  for (let s of strs) {\\n    result += s.length + ':' + s;\\n  }\\n  return result;\\n}\\n\\nfunction decode(s) {\\n  let res = [];\\n  let i = 0;\\n  while (i < s.length) {\\n    let j = i;\\n    while (s[j] !== ':') j++;\\n    let length = parseInt(s.slice(i, j));\\n    res.push(s.slice(j + 1, j + 1 + length));\\n    i = j + 1 + length;\\n  }\\n  return res;\\n}\\n\\nconst encoded = encode(strs);\\nconsole.log(JSON.stringify(decode(encoded)));"}	2025-07-26 13:27:23.754	2025-07-26 13:27:23.754	{Facebook,Google,Amazon}
44054196-3fe1-478b-be5c-bb63767d8702	Calculate Array Sum	Given an array of integers, return the sum of all the elements in the array.	EASY	{Arrays}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "arr = [5, 5, 5, 5]", "output": "20", "explanation": "5 * 4 = 20"}, "PYTHON": {"input": "arr = [1, -1, 2, -2]", "output": "0", "explanation": "Sum of all elements is 0"}, "JAVASCRIPT": {"input": "arr = [10, 20, 30]", "output": "60", "explanation": "10 + 20 + 30 = 60"}}	1 <= arr.length <= 10^4\n-10^5 <= arr[i] <= 10^5	\N	\N	[{"input": "[1, 2, 3, 4, 5]", "output": "15"}, {"input": "[-1, -2, -3, -4]", "output": "-10"}, {"input": "[0, 0, 0]", "output": "0"}, {"input": "[100000, -100000]", "output": "0"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int sumArray(int[] arr) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n\\n        // Manual parsing from JSON-like array string\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");  // remove brackets and spaces\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n\\n        System.out.println(sumArray(arr));\\n    }\\n}\\n", "PYTHON": "class Solution:\\n    def sumArray(self, arr):\\n        # Write your code here\\n        pass\\n\\nif __name__ == '__main__':\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline())\\n    sol = Solution()\\n    print(sol.sumArray(arr))", "JAVASCRIPT": "/**\\n * @param {number[]} arr\\n * @return {number}\\n */\\nfunction sumArray(arr) {\\n    // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\n\\nrl.on('line', (line) => {\\n  const arr = JSON.parse(line);\\n  console.log(sumArray(arr));\\n  rl.close();\\n});"}	{"JAVA": "import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static int sumArray(int[] arr) {\\r\\n        int sum = 0;\\r\\n        for (int num : arr) {\\r\\n            sum += num;\\r\\n        }\\r\\n        return sum;\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n        String input = br.readLine().trim();\\r\\n\\r\\n        // Manual parsing from JSON-like array string\\r\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");  // remove brackets and spaces\\r\\n        String[] tokens = input.split(\\",\\");\\r\\n        int[] arr = new int[tokens.length];\\r\\n        for (int i = 0; i < tokens.length; i++) {\\r\\n            arr[i] = Integer.parseInt(tokens[i]);\\r\\n        }\\r\\n\\r\\n        System.out.println(sumArray(arr));\\r\\n    }\\r\\n}\\r\\n", "PYTHON": "class Solution:\\n    def sumArray(self, arr):\\n        return sum(arr)\\n\\nif __name__ == '__main__':\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline())\\n    sol = Solution()\\n    print(sol.sumArray(arr))", "JAVASCRIPT": "function sumArray(arr) {\\n    return arr.reduce((a, b) => a + b, 0);\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n  const arr = JSON.parse(line);\\n  console.log(sumArray(arr));\\n  rl.close();\\n});"}	2025-07-24 23:07:36.81	2025-07-24 23:07:36.81	{Amazon,Meta}
ca036853-ced3-4ce8-bfc1-d45eb7be1f35	Maximum Sum of Non-Adjacent Elements	Given an array of integers, find the maximum sum of elements such that no two chosen numbers are adjacent in the array.	HARD	{"Dynamic Programming",Arrays}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "arr = [5, 5, 10, 100, 10, 5]", "output": "110", "explanation": "Choose 5 + 100 + 5 = 110"}, "PYTHON": {"input": "arr = [3, 2, 5, 10, 7]", "output": "15", "explanation": "Choose 3, 10 → 3 + 10 = 13 or 2 + 10 = 12, best is 15"}, "JAVASCRIPT": {"input": "arr = [3, 2, 7, 10]", "output": "13", "explanation": "Choose 3 and 10 → 3 + 10 = 13"}}	1 <= arr.length <= 10^5\n-10^4 <= arr[i] <= 10^4	\N	\N	[{"input": "[3, 2, 7, 10]", "output": "13"}, {"input": "[3, 2, 5, 10, 7]", "output": "15"}, {"input": "[-1, -2, -3, -4]", "output": "0"}, {"input": "[5, 5, 10, 100, 10, 5]", "output": "110"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int maxNonAdjacentSum(int[] arr) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        input = input.replaceAll(\\"[\\\\[\\\\]\\\\s]\\", \\"\\");\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n        System.out.println(maxNonAdjacentSum(arr));\\n    }\\n}", "PYTHON": "class Solution:\\n    def maxNonAdjacentSum(self, arr):\\n        # Write your code here\\n        pass\\n\\nif __name__ == '__main__':\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    print(sol.maxNonAdjacentSum(arr))", "JAVASCRIPT": "/**\\n * @param {number[]} arr\\n * @return {number}\\n */\\nfunction maxNonAdjacentSum(arr) {\\n    // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\n\\nrl.on('line', (line) => {\\n    const arr = JSON.parse(line.trim());\\n    console.log(maxNonAdjacentSum(arr));\\n    rl.close();\\n});"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int maxNonAdjacentSum(int[] arr) {\\n        int incl = 0, excl = 0;\\n        for (int num : arr) {\\n            int newExcl = Math.max(incl, excl);\\n            incl = excl + num;\\n            excl = newExcl;\\n        }\\n        return Math.max(incl, excl);\\n    }\\n\\n    public static void main(String[] args) throws Exception {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        input = input.replaceAll(\\"[\\\\[\\\\]\\\\s]\\", \\"\\");\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n        System.out.println(maxNonAdjacentSum(arr));\\n    }\\n}", "PYTHON": "class Solution:\\n    def maxNonAdjacentSum(self, arr):\\n        incl, excl = 0, 0\\n        for num in arr:\\n            new_excl = max(incl, excl)\\n            incl = excl + num\\n            excl = new_excl\\n        return max(incl, excl)\\n\\nif __name__ == '__main__':\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    print(sol.maxNonAdjacentSum(arr))", "JAVASCRIPT": "function maxNonAdjacentSum(arr) {\\n    let incl = 0, excl = 0;\\n    for (let num of arr) {\\n        let newExcl = Math.max(incl, excl);\\n        incl = excl + num;\\n        excl = newExcl;\\n    }\\n    return Math.max(incl, excl);\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n    const arr = JSON.parse(line.trim());\\n    console.log(maxNonAdjacentSum(arr));\\n    rl.close();\\n});"}	2025-07-24 23:10:36.331	2025-07-24 23:10:36.331	{Google,Amazon}
5b978148-bf44-4073-adcc-532f958cbdd9	Find Length of Linked List	Given the head of a singly linked list, return the length of the linked list. The linked list is represented as an array of integers where each element corresponds to a node's value.	EASY	{"Linked Lists"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "head = [5,5,5,5,5]", "output": "5", "explanation": "Five nodes, all with value 5, length is 5."}, "PYTHON": {"input": "head = [10]", "output": "1", "explanation": "Only one node exists, length is 1."}, "JAVASCRIPT": {"input": "head = [1,2,3,4]", "output": "4", "explanation": "List has 4 nodes, so length is 4."}}	0 <= number of nodes <= 10^5\n-10^6 <= Node.val <= 10^6	\N	\N	[{"input": "[1,2,3,4]", "output": "4"}, {"input": "[]", "output": "0"}, {"input": "[10]", "output": "1"}, {"input": "[5,5,5,5,5]", "output": "5"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int lengthOfLinkedList(int[] head) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        if (input.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n        System.out.println(lengthOfLinkedList(arr));\\n    }\\n}", "PYTHON": "class Solution:\\n    def lengthOfLinkedList(self, head):\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    print(sol.lengthOfLinkedList(arr))", "JAVASCRIPT": "/**\\n * @param {number[]} head\\n * @return {number}\\n */\\nfunction lengthOfLinkedList(head) {\\n  // Write your code here\\n}\\n\\n// Read input and output length\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n  const arr = JSON.parse(line.trim());\\n  const result = lengthOfLinkedList(arr);\\n  console.log(result);\\n  rl.close();\\n});"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int lengthOfLinkedList(int[] head) {\\n        return head.length;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        if (input.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n        System.out.println(lengthOfLinkedList(arr));\\n    }\\n}", "PYTHON": "class Solution:\\n    def lengthOfLinkedList(self, head):\\n        return len(head)\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    print(sol.lengthOfLinkedList(arr))", "JAVASCRIPT": "function lengthOfLinkedList(head) {\\n  return head.length;\\n}\\n\\n// Read input and output length\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n  const arr = JSON.parse(line.trim());\\n  const result = lengthOfLinkedList(arr);\\n  console.log(result);\\n  rl.close();\\n});"}	2025-07-24 23:22:25.879	2025-07-24 23:22:25.879	{Google,Microsoft}
1988aa8c-2673-4f7f-a907-89df44bb5074	Remove Nth Node From End of Linked List	Given the head of a singly linked list, remove the nth node from the end of the list and return its head. The linked list is represented as an array of integers where each element corresponds to a node's value.	MEDIUM	{"Linked List","Two Pointers"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "head = [1], n = 1", "output": "[]", "explanation": "Removing the only node results in an empty list."}, "PYTHON": {"input": "head = [1,2], n = 1", "output": "[1]", "explanation": "Remove the last node '2', resulting list is [1]."}, "JAVASCRIPT": {"input": "head = [1,2,3,4,5], n = 2", "output": "[1,2,3,5]", "explanation": "Remove the 2nd node from the end, which is '4'."}}	1 <= number of nodes <= 10^5\n1 <= n <= number of nodes\n-10^6 <= Node.val <= 10^6	\N	\N	[{"input": "[1,2,3,4,5]\\n2", "output": "[1,2,3,5]"}, {"input": "[1]\\n1", "output": "[]"}, {"input": "[1,2]\\n1", "output": "[1]"}, {"input": "[1,2]\\n2", "output": "[2]"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int[] removeNthFromEnd(int[] head, int n) {\\n        // Write your code here\\n        return new int[0];\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String inputList = br.readLine().trim();\\n        String inputN = br.readLine().trim();\\n\\n        inputList = inputList.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        int[] head;\\n        if (inputList.isEmpty()) {\\n            head = new int[0];\\n        } else {\\n            String[] tokens = inputList.split(\\",\\");\\n            head = new int[tokens.length];\\n            for (int i = 0; i < tokens.length; i++) {\\n                head[i] = Integer.parseInt(tokens[i]);\\n            }\\n        }\\n\\n        int n = Integer.parseInt(inputN);\\n        int[] result = removeNthFromEnd(head, n);\\n        System.out.println(Arrays.toString(result));\\n    }\\n}", "PYTHON": "class Solution:\\n    def removeNthFromEnd(self, head, n):\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    head = json.loads(sys.stdin.readline().strip())\\n    n = int(sys.stdin.readline().strip())\\n    sol = Solution()\\n    result = sol.removeNthFromEnd(head, n)\\n    print(result)", "JAVASCRIPT": "/**\\n * @param {number[]} head\\n * @param {number} n\\n * @return {number[]}\\n */\\nfunction removeNthFromEnd(head, n) {\\n  // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const head = JSON.parse(inputLines[0]);\\n    const n = parseInt(inputLines[1], 10);\\n    const result = removeNthFromEnd(head, n);\\n    console.log(JSON.stringify(result));\\n    rl.close();\\n  }\\n});"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int[] removeNthFromEnd(int[] head, int n) {\\n        int length = head.length;\\n        int idxToRemove = length - n;\\n        int[] result = new int[length - 1];\\n        int j = 0;\\n        for (int i = 0; i < length; i++) {\\n            if (i != idxToRemove) {\\n                result[j++] = head[i];\\n            }\\n        }\\n        return result;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String inputList = br.readLine().trim();\\n        String inputN = br.readLine().trim();\\n\\n        inputList = inputList.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        int[] head;\\n        if (inputList.isEmpty()) {\\n            head = new int[0];\\n        } else {\\n            String[] tokens = inputList.split(\\",\\");\\n            head = new int[tokens.length];\\n            for (int i = 0; i < tokens.length; i++) {\\n                head[i] = Integer.parseInt(tokens[i]);\\n            }\\n        }\\n\\n        int n = Integer.parseInt(inputN);\\n        int[] result = removeNthFromEnd(head, n);\\n        System.out.println(Arrays.toString(result));\\n    }\\n}", "PYTHON": "class Solution:\\n    def removeNthFromEnd(self, head, n):\\n        length = len(head)\\n        idx_to_remove = length - n\\n        return [head[i] for i in range(length) if i != idx_to_remove]\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    head = json.loads(sys.stdin.readline().strip())\\n    n = int(sys.stdin.readline().strip())\\n    sol = Solution()\\n    result = sol.removeNthFromEnd(head, n)\\n    print(result)", "JAVASCRIPT": "function removeNthFromEnd(head, n) {\\n  const length = head.length;\\n  const idxToRemove = length - n;\\n  return head.filter((_, i) => i !== idxToRemove);\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const head = JSON.parse(inputLines[0]);\\n    const n = parseInt(inputLines[1], 10);\\n    const result = removeNthFromEnd(head, n);\\n    console.log(JSON.stringify(result));\\n    rl.close();\\n  }\\n});"}	2025-07-24 23:24:07.939	2025-07-24 23:24:07.939	{Amazon,Microsoft,Google}
ea635f68-966a-46df-acc6-56abbc568762	Reverse Nodes in k-Group	Given the head of a singly linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. Nodes that are not a multiple of k at the end should remain as is. The linked list is represented as an array of integers.	HARD	{"Linked List",Recursion,"Two Pointers"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "head = [1,2,3,4,5,6], k = 3", "output": "[3,2,1,6,5,4]", "explanation": "Two groups of 3 nodes reversed."}, "PYTHON": {"input": "head = [1,2,3,4,5], k = 3", "output": "[3,2,1,4,5]", "explanation": "First 3 nodes reversed, last two remain."}, "JAVASCRIPT": {"input": "head = [1,2,3,4,5], k = 2", "output": "[2,1,4,3,5]", "explanation": "Every group of 2 nodes is reversed."}}	1 <= number of nodes <= 10^5\n1 <= k <= number of nodes\n-10^6 <= Node.val <= 10^6	\N	\N	[{"input": "[1,2,3,4,5]\\n2", "output": "[2,1,4,3,5]"}, {"input": "[1,2,3,4,5]\\n3", "output": "[3,2,1,4,5]"}, {"input": "[1,2,3,4,5,6]\\n3", "output": "[3,2,1,6,5,4]"}, {"input": "[1]\\n1", "output": "[1]"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int[] reverseKGroup(int[] head, int k) {\\n        // Write your code here\\n        return new int[0];\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String inputList = br.readLine().trim();\\n        String inputK = br.readLine().trim();\\n\\n        inputList = inputList.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        int[] head;\\n        if (inputList.isEmpty()) {\\n            head = new int[0];\\n        } else {\\n            String[] tokens = inputList.split(\\",\\");\\n            head = new int[tokens.length];\\n            for (int i = 0; i < tokens.length; i++) {\\n                head[i] = Integer.parseInt(tokens[i]);\\n            }\\n        }\\n\\n        int k = Integer.parseInt(inputK);\\n        int[] result = reverseKGroup(head, k);\\n        System.out.println(Arrays.toString(result));\\n    }\\n}", "PYTHON": "class Solution:\\n    def reverseKGroup(self, head, k):\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    head = json.loads(sys.stdin.readline().strip())\\n    k = int(sys.stdin.readline().strip())\\n    sol = Solution()\\n    result = sol.reverseKGroup(head, k)\\n    print(result)", "JAVASCRIPT": "/**\\n * @param {number[]} head\\n * @param {number} k\\n * @return {number[]}\\n */\\nfunction reverseKGroup(head, k) {\\n  // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const head = JSON.parse(inputLines[0]);\\n    const k = parseInt(inputLines[1], 10);\\n    const result = reverseKGroup(head, k);\\n    console.log(JSON.stringify(result));\\n    rl.close();\\n  }\\n});"}	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int[] reverseKGroup(int[] head, int k) {\\n        int n = head.length;\\n        int[] result = new int[n];\\n        int idx = 0;\\n        for (int i = 0; i < n; i += k) {\\n            if (i + k <= n) {\\n                for (int j = i + k - 1; j >= i; j--) {\\n                    result[idx++] = head[j];\\n                }\\n            } else {\\n                for (int j = i; j < n; j++) {\\n                    result[idx++] = head[j];\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String inputList = br.readLine().trim();\\n        String inputK = br.readLine().trim();\\n\\n        inputList = inputList.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        int[] head;\\n        if (inputList.isEmpty()) {\\n            head = new int[0];\\n        } else {\\n            String[] tokens = inputList.split(\\",\\");\\n            head = new int[tokens.length];\\n            for (int i = 0; i < tokens.length; i++) {\\n                head[i] = Integer.parseInt(tokens[i]);\\n            }\\n        }\\n\\n        int k = Integer.parseInt(inputK);\\n        int[] result = reverseKGroup(head, k);\\n        System.out.println(Arrays.toString(result));\\n    }\\n}", "PYTHON": "class Solution:\\n    def reverseKGroup(self, head, k):\\n        n = len(head)\\n        result = []\\n        for i in range(0, n, k):\\n            if i + k <= n:\\n                result.extend(head[i:i+k][::-1])\\n            else:\\n                result.extend(head[i:])\\n        return result\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    head = json.loads(sys.stdin.readline().strip())\\n    k = int(sys.stdin.readline().strip())\\n    sol = Solution()\\n    result = sol.reverseKGroup(head, k)\\n    print(result)", "JAVASCRIPT": "function reverseKGroup(head, k) {\\n  const n = head.length;\\n  const result = [];\\n  for (let i = 0; i < n; i += k) {\\n    if (i + k <= n) {\\n      // Reverse the group\\n      for (let j = i + k - 1; j >= i; j--) {\\n        result.push(head[j]);\\n      }\\n    } else {\\n      // Append the remaining nodes as is\\n      for (let j = i; j < n; j++) {\\n        result.push(head[j]);\\n      }\\n    }\\n  }\\n  return result;\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const head = JSON.parse(inputLines[0]);\\n    const k = parseInt(inputLines[1], 10);\\n    const result = reverseKGroup(head, k);\\n    console.log(JSON.stringify(result));\\n    rl.close();\\n  }\\n});"}	2025-07-24 23:25:16.606	2025-07-24 23:25:16.606	{Google,Facebook,Microsoft}
8225b2d0-11bf-4cb5-aca1-14287a1f1c53	Longest Consecutive Sequence	Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) time.	MEDIUM	{Arrays,Hashing,Sets}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "nums = [1,2,0,1]", "output": "3", "explanation": "Longest consecutive sequence is [0,1,2]."}, "PYTHON": {"input": "nums = [0,3,7,2,5,8,4,6,0,1]", "output": "9", "explanation": "Longest consecutive sequence is [0,1,2,3,4,5,6,7,8]."}, "JAVASCRIPT": {"input": "nums = [100, 4, 200, 1, 3, 2]", "output": "4", "explanation": "Longest consecutive sequence is [1, 2, 3, 4]."}}	0 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9	\N	\N	[{"input": "[100, 4, 200, 1, 3, 2]", "output": "4"}, {"input": "[0, 3, 7, 2, 5, 8, 4, 6, 0, 1]", "output": "9"}, {"input": "[]", "output": "0"}, {"input": "[1, 2, 0, 1]", "output": "3"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int longestConsecutive(int[] nums) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        int[] nums;\\n        if (input.isEmpty()) {\\n            nums = new int[0];\\n        } else {\\n            String[] tokens = input.split(\\",\\");\\n            nums = new int[tokens.length];\\n            for (int i = 0; i < tokens.length; i++) {\\n                nums[i] = Integer.parseInt(tokens[i]);\\n            }\\n        }\\n        int result = longestConsecutive(nums);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def longestConsecutive(self, nums):\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    nums = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    result = sol.longestConsecutive(nums)\\n    print(result)", "JAVASCRIPT": "/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nfunction longestConsecutive(nums) {\\n  // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n  const nums = JSON.parse(line.trim());\\n  const result = longestConsecutive(nums);\\n  console.log(result);\\n  rl.close();\\n});"}	{"JAVA": "import java.io.*;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static int longestConsecutive(int[] nums) {\\r\\n        Set<Integer> numSet = new HashSet<>();\\r\\n        for (int num : nums) numSet.add(num);\\r\\n\\r\\n        int longestStreak = 0;\\r\\n\\r\\n        for (int num : numSet) {\\r\\n            if (!numSet.contains(num - 1)) {\\r\\n                int currentNum = num;\\r\\n                int currentStreak = 1;\\r\\n\\r\\n                while (numSet.contains(currentNum + 1)) {\\r\\n                    currentNum++;\\r\\n                    currentStreak++;\\r\\n                }\\r\\n\\r\\n                longestStreak = Math.max(longestStreak, currentStreak);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return longestStreak;\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) throws IOException {\\r\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n        String input = br.readLine().trim();\\r\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");\\r\\n\\r\\n        int[] nums;\\r\\n        if (input.isEmpty()) {\\r\\n            nums = new int[0];\\r\\n        } else {\\r\\n            String[] tokens = input.split(\\",\\");\\r\\n            nums = new int[tokens.length];\\r\\n            for (int i = 0; i < tokens.length; i++) {\\r\\n                nums[i] = Integer.parseInt(tokens[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        int result = longestConsecutive(nums);\\r\\n        System.out.println(result);\\r\\n    }\\r\\n}\\r\\n", "PYTHON": "class Solution:\\r\\n    def longestConsecutive(self, nums):\\r\\n        num_set = set(nums)\\r\\n        longest_streak = 0\\r\\n\\r\\n        for num in num_set:\\r\\n            if num - 1 not in num_set:\\r\\n                current_num = num\\r\\n                current_streak = 1\\r\\n\\r\\n                while current_num + 1 in num_set:\\r\\n                    current_num += 1\\r\\n                    current_streak += 1\\r\\n\\r\\n                longest_streak = max(longest_streak, current_streak)\\r\\n\\r\\n        return longest_streak\\r\\n\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    import sys, json\\r\\n    nums = json.loads(sys.stdin.readline().strip())\\r\\n    sol = Solution()\\r\\n    result = sol.longestConsecutive(nums)\\r\\n    print(result)\\r\\n", "JAVASCRIPT": "/**\\r\\n * @param {number[]} nums\\r\\n * @return {number}\\r\\n */\\r\\nfunction longestConsecutive(nums) {\\r\\n  const numSet = new Set(nums);\\r\\n  let longestStreak = 0;\\r\\n\\r\\n  for (let num of numSet) {\\r\\n    if (!numSet.has(num - 1)) {\\r\\n      let currentNum = num;\\r\\n      let currentStreak = 1;\\r\\n\\r\\n      while (numSet.has(currentNum + 1)) {\\r\\n        currentNum += 1;\\r\\n        currentStreak += 1;\\r\\n      }\\r\\n\\r\\n      longestStreak = Math.max(longestStreak, currentStreak);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return longestStreak;\\r\\n}\\r\\n\\r\\nconst readline = require('readline');\\r\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\r\\n\\r\\nrl.on('line', (line) => {\\r\\n  const nums = JSON.parse(line.trim());\\r\\n  const result = longestConsecutive(nums);\\r\\n  console.log(result);\\r\\n  rl.close();\\r\\n});\\r\\n"}	2025-07-24 23:44:39.556	2025-07-24 23:44:39.556	{Facebook,Amazon,Google}
cdc59748-f667-441e-bf48-53e721d170f0	Count Elements Greater Than Average	Given an array of integers, count how many elements are strictly greater than the average of all elements.\n\nReturn 0 if the array is empty.	EASY	{Arrays,Math}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "nums = [100, 200, 300, 400, 500]", "output": "2", "explanation": "Average is 300. Elements greater are [400, 500]."}, "PYTHON": {"input": "nums = [10, 10, 10, 10]", "output": "0", "explanation": "All elements equal the average, so count is 0."}, "JAVASCRIPT": {"input": "nums = [1, 2, 3, 4, 5]", "output": "2", "explanation": "Average is 3. Elements > 3 are [4, 5]."}}	0 <= nums.length <= 1000\n-10^4 <= nums[i] <= 10^4	\N	\N	[{"input": "[1, 2, 3, 4, 5]", "output": "2"}, {"input": "[10, 10, 10, 10]", "output": "0"}, {"input": "[100, 200, 300, 400, 500]", "output": "2"}, {"input": "[]", "output": "0"}]	{"JAVA": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int countGreaterThanAverage(int[] nums) {\\n        // Write your code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\s]\\", \\"\\");\\n        int[] nums;\\n        if (input.isEmpty()) {\\n            nums = new int[0];\\n        } else {\\n            String[] tokens = input.split(\\",\\");\\n            nums = new int[tokens.length];\\n            for (int i = 0; i < tokens.length; i++) {\\n                nums[i] = Integer.parseInt(tokens[i]);\\n            }\\n        }\\n        int result = countGreaterThanAverage(nums);\\n        System.out.println(result);\\n    }\\n}", "PYTHON": "class Solution:\\n    def countGreaterThanAverage(self, nums):\\n        # Write your code here\\n        pass\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    nums = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    result = sol.countGreaterThanAverage(nums)\\n    print(result)", "JAVASCRIPT": "/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nfunction countGreaterThanAverage(nums) {\\n  // Write your code here\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n  const nums = JSON.parse(line.trim());\\n  const result = countGreaterThanAverage(nums);\\n  console.log(result);\\n  rl.close();\\n});"}	{"JAVA": "import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static int countGreaterThanAverage(int[] nums) {\\r\\n        if (nums.length == 0) return 0;\\r\\n        double sum = 0;\\r\\n        for (int num : nums) sum += num;\\r\\n        double avg = sum / nums.length;\\r\\n        int count = 0;\\r\\n        for (int num : nums) {\\r\\n            if (num > avg) count++;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) throws IOException {\\r\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\r\\n        String input = br.readLine().trim();\\r\\n\\r\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");\\r\\n        int[] nums;\\r\\n        if (input.isEmpty()) {\\r\\n            nums = new int[0];\\r\\n        } else {\\r\\n            String[] tokens = input.split(\\",\\");\\r\\n            nums = new int[tokens.length];\\r\\n            for (int i = 0; i < tokens.length; i++) {\\r\\n                nums[i] = Integer.parseInt(tokens[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        int result = countGreaterThanAverage(nums);\\r\\n        System.out.println(result);\\r\\n    }\\r\\n}\\r\\n", "PYTHON": "def countGreaterThanAverage(nums):\\r\\n    if not nums:\\r\\n        return 0\\r\\n    avg = sum(nums) / len(nums)\\r\\n    return sum(1 for x in nums if x > avg)\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    import sys\\r\\n    input_line = sys.stdin.read().strip()\\r\\n    input_line = input_line.replace('[', '').replace(']', '').replace(' ', '')\\r\\n    if input_line == '':\\r\\n        nums = []\\r\\n    else:\\r\\n        nums = list(map(int, input_line.split(',')))\\r\\n    result = countGreaterThanAverage(nums)\\r\\n    print(result)\\r\\n", "JAVASCRIPT": "const readline = require(\\"readline\\");\\r\\n\\r\\nfunction countGreaterThanAverage(nums) {\\r\\n  if (nums.length === 0) return 0;\\r\\n  const avg = nums.reduce((a, b) => a + b, 0) / nums.length;\\r\\n  return nums.filter(n => n > avg).length;\\r\\n}\\r\\n\\r\\nconst rl = readline.createInterface({\\r\\n  input: process.stdin,\\r\\n  output: process.stdout,\\r\\n  terminal: false,\\r\\n});\\r\\n\\r\\nlet input = \\"\\";\\r\\n\\r\\nrl.on(\\"line\\", function (line) {\\r\\n  input += line;\\r\\n});\\r\\n\\r\\nrl.on(\\"close\\", function () {\\r\\n  input = input.trim();\\r\\n  const nums = input === \\"\\" ? [] : input.replace(/[\\\\[\\\\]\\\\s]/g, \\"\\").split(\\",\\").map(Number);\\r\\n  const result = countGreaterThanAverage(nums);\\r\\n  console.log(result);\\r\\n});\\r\\n"}	2025-07-24 23:50:11.311	2025-07-24 23:50:11.311	{Google,Apple}
e5fc879c-e9aa-4869-990b-6cb328d20925	Kth Smallest Element in a BST	Given the root of a binary search tree and an integer k, return the kᵗʰ smallest value (1-indexed) of all the values of the nodes in the tree.	MEDIUM	{"Binary Search Tree","Inorder Traversal","Divide & Conquer"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "root = [2,1,3], k = 2", "output": "2", "explanation": "The second smallest element is 2."}, "PYTHON": {"input": "root = [5,3,6,2,4,null,null,1], k = 3", "output": "3", "explanation": "The third smallest element is 3."}, "JAVASCRIPT": {"input": "root = [3,1,4,null,2], k = 1", "output": "1", "explanation": "The smallest element is 1."}}	The number of nodes in the tree is n. 1 ≤ k ≤ n ≤ 10⁵.	\N	\N	[{"input": "[3,1,4,null,2], 1", "output": "1"}, {"input": "[5,3,6,2,4, null, null,1], 3", "output": "3"}, {"input": "[2,1,3], 2", "output": "2"}]	{"JAVA": "import java.util.*;\\n\\nclass TreeNode {\\n    int val;\\n    TreeNode left, right;\\n    TreeNode(int x) { val = x; }\\n}\\n\\npublic class Main {\\n    public static TreeNode buildTree(String[] arr) {\\n        if (arr.length == 0 || arr[0].equals(\\"null\\")) return null;\\n        TreeNode[] nodes = new TreeNode[arr.length];\\n        for (int i = 0; i < arr.length; i++) {\\n            if (!arr[i].equals(\\"null\\")) nodes[i] = new TreeNode(Integer.parseInt(arr[i]));\\n        }\\n        for (int i = 0, j = 1; j < arr.length; i++) {\\n            if (nodes[i] != null) {\\n                if (j < arr.length) nodes[i].left = nodes[j++];\\n                if (j < arr.length) nodes[i].right = nodes[j++];\\n            }\\n        }\\n        return nodes[0];\\n    }\\n\\n    public static int kthSmallest(TreeNode root, int k) {\\n        // write your code here\\n        return -1;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String[] parts = sc.nextLine().trim().split(\\",\\");\\n        String[] nodeStrs = parts[0].trim().replaceAll(\\"[\\\\[\\\\]\\\\s]\\", \\"\\").split(\\"\\\\\\\\,\\");\\n        int k = Integer.parseInt(parts[1].trim());\\n        TreeNode root = buildTree(nodeStrs);\\n        System.out.println(kthSmallest(root, k));\\n    }\\n}", "PYTHON": "import sys, json\\n\\nclass TreeNode:\\n    def __init__(self, val):\\n        self.val = val\\n        self.left = None\\n        self.right = None\\n\\ndef build_tree(arr):\\n    if not arr or arr[0] is None:\\n        return None\\n    nodes = [TreeNode(val) if val is not None else None for val in arr]\\n    child_index = 1\\n    for i in range(len(nodes)):\\n        if nodes[i] is not None:\\n            if child_index < len(nodes):\\n                nodes[i].left = nodes[child_index]\\n                child_index += 1\\n            if child_index < len(nodes):\\n                nodes[i].right = nodes[child_index]\\n                child_index += 1\\n    return nodes[0]\\n\\ndef kthSmallest(root, k):\\n    # write your code here\\n    pass\\n\\nif __name__ == \\"__main__\\":\\n    arr_str, k_str = sys.stdin.read().strip().split(',')\\n    arr = json.loads(arr_str)\\n    k = int(k_str)\\n    root = build_tree(arr)\\n    print(kthSmallest(root, k))", "JAVASCRIPT": "// Definition for a binary tree node.\\nfunction TreeNode(val) {\\n  this.val = val;\\n  this.left = this.right = null;\\n}\\n\\nfunction buildTree(arr) {\\n  if (!arr.length || arr[0] === null) return null;\\n  const nodes = arr.map(val => val === null ? null : new TreeNode(val));\\n  for (let i = 0, j = 1; j < nodes.length; i++) {\\n    if (nodes[i] !== null) {\\n      if (j < nodes.length) nodes[i].left = nodes[j++];\\n      if (j < nodes.length) nodes[i].right = nodes[j++];\\n    }\\n  }\\n  return nodes[0];\\n}\\n\\nfunction kthSmallest(root, k) {\\n  // write your code here\\n}\\n\\nfunction parseInput(input) {\\n  const jsonArrayMatch = input.match(/^\\\\s*(\\\\[[^\\\\]]*\\\\])\\\\s*,\\\\s*(\\\\d+)\\\\s*$/);\\n  if (!jsonArrayMatch) throw new Error(\\"Invalid input format\\");\\n  return [JSON.parse(jsonArrayMatch[1]), parseInt(jsonArrayMatch[2])];\\n}\\n\\nconst input = require('fs').readFileSync(0, 'utf-8').trim();\\nconst [arr, k] = parseInput(input);\\nconst root = buildTree(arr);\\nconsole.log(kthSmallest(root, k));\\n"}	{"JAVA": "import java.util.*;\\n\\nclass TreeNode {\\n    int val;\\n    TreeNode left, right;\\n    TreeNode(int x) { val = x; }\\n}\\n\\npublic class Main {\\n    public static TreeNode buildTree(String[] arr) {\\n        if (arr.length == 0 || arr[0].equals(\\"null\\")) return null;\\n        TreeNode[] nodes = new TreeNode[arr.length];\\n        for (int i = 0; i < arr.length; i++) {\\n            if (!arr[i].equals(\\"null\\")) nodes[i] = new TreeNode(Integer.parseInt(arr[i]));\\n        }\\n        for (int i = 0, j = 1; j < arr.length; i++) {\\n            if (nodes[i] != null) {\\n                if (j < arr.length) nodes[i].left = nodes[j++];\\n                if (j < arr.length) nodes[i].right = nodes[j++];\\n            }\\n        }\\n        return nodes[0];\\n    }\\n\\n    public static int kthSmallest(TreeNode root, int k) {\\n        Stack<TreeNode> stack = new Stack<>();\\n        TreeNode node = root;\\n        int count = 0;\\n        while (node != null || !stack.isEmpty()) {\\n            while (node != null) {\\n                stack.push(node);\\n                node = node.left;\\n            }\\n            node = stack.pop();\\n            count++;\\n            if (count == k) return node.val;\\n            node = node.right;\\n        }\\n        return -1;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String[] parts = sc.nextLine().trim().split(\\",\\");\\n        String[] nodeStrs = parts[0].trim().replaceAll(\\"[\\\\[\\\\]\\\\s]\\", \\"\\").split(\\",\\");\\n        int k = Integer.parseInt(parts[1].trim());\\n        TreeNode root = buildTree(nodeStrs);\\n        System.out.println(kthSmallest(root, k));\\n    }\\n}", "PYTHON": "import sys, json\\n\\nclass TreeNode:\\n    def __init__(self, val):\\n        self.val = val\\n        self.left = None\\n        self.right = None\\n\\ndef build_tree(arr):\\n    if not arr or arr[0] is None:\\n        return None\\n    nodes = [TreeNode(val) if val is not None else None for val in arr]\\n    child_index = 1\\n    for i in range(len(nodes)):\\n        if nodes[i] is not None:\\n            if child_index < len(nodes):\\n                nodes[i].left = nodes[child_index]\\n                child_index += 1\\n            if child_index < len(nodes):\\n                nodes[i].right = nodes[child_index]\\n                child_index += 1\\n    return nodes[0]\\n\\ndef kthSmallest(root, k):\\n    stack = []\\n    node = root\\n    count = 0\\n    while stack or node:\\n        while node:\\n            stack.append(node)\\n            node = node.left\\n        node = stack.pop()\\n        count += 1\\n        if count == k:\\n            return node.val\\n        node = node.right\\n    return -1\\n\\nif __name__ == \\"__main__\\":\\n    arr_str, k_str = sys.stdin.read().strip().split(',')\\n    arr = json.loads(arr_str)\\n    k = int(k_str)\\n    root = build_tree(arr)\\n    print(kthSmallest(root, k))", "JAVASCRIPT": "function TreeNode(val) {\\r\\n  this.val = val;\\r\\n  this.left = this.right = null;\\r\\n}\\r\\n\\r\\nfunction buildTree(arr) {\\r\\n  if (!arr.length || arr[0] === null) return null;\\r\\n  const nodes = arr.map(val => val === null ? null : new TreeNode(val));\\r\\n  for (let i = 0, j = 1; j < nodes.length; i++) {\\r\\n    if (nodes[i] !== null) {\\r\\n      if (j < nodes.length) nodes[i].left = nodes[j++];\\r\\n      if (j < nodes.length) nodes[i].right = nodes[j++];\\r\\n    }\\r\\n  }\\r\\n  return nodes[0];\\r\\n}\\r\\n\\r\\nfunction kthSmallest(root, k) {\\r\\n  const stack = [];\\r\\n  let node = root;\\r\\n  let count = 0;\\r\\n  while (node || stack.length > 0) {\\r\\n    while (node) {\\r\\n      stack.push(node);\\r\\n      node = node.left;\\r\\n    }\\r\\n    node = stack.pop();\\r\\n    count++;\\r\\n    if (count === k) return node.val;\\r\\n    node = node.right;\\r\\n  }\\r\\n  return -1;\\r\\n}\\r\\n\\r\\nfunction parseInput(input) {\\r\\n  const jsonArrayMatch = input.match(/^\\\\s*(\\\\[[^\\\\]]*\\\\])\\\\s*,\\\\s*(\\\\d+)\\\\s*$/);\\r\\n  if (!jsonArrayMatch) throw new Error(\\"Invalid input format\\");\\r\\n  return [JSON.parse(jsonArrayMatch[1]), parseInt(jsonArrayMatch[2])];\\r\\n}\\r\\n\\r\\nconst input = require('fs').readFileSync(0, 'utf-8').trim();\\r\\nconst [arr, k] = parseInput(input);\\r\\nconst root = buildTree(arr);\\r\\nconsole.log(kthSmallest(root, k));\\r\\n"}	2025-07-26 07:40:10.045	2025-07-26 07:40:10.045	{Google,Microsoft}
18b38b50-b9c7-4aaf-aa28-77c56f6cabae	Number of Islands	Given a 2D grid map of '1's (land) and '0's (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.	MEDIUM	{Graph,"Depth-First Search",Matrix}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "grid = [[\\"1\\",\\"1\\",\\"0\\"],[\\"0\\",\\"1\\",\\"0\\"],[\\"1\\",\\"0\\",\\"1\\"]]", "output": "3", "explanation": "3 disconnected islands are present."}, "PYTHON": {"input": "grid = [[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"]]", "output": "3", "explanation": "There are 3 islands in the grid."}, "JAVASCRIPT": {"input": "grid = [[\\"1\\",\\"0\\",\\"1\\",\\"0\\"],[\\"0\\",\\"1\\",\\"0\\",\\"1\\"]]", "output": "4", "explanation": "Each '1' is disconnected, so 4 islands exist."}}	1 ≤ grid.length ≤ 300, 1 ≤ grid[0].length ≤ 300	\N	\N	[{"input": "[[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"]]", "output": "3"}, {"input": "[[\\"1\\",\\"0\\",\\"1\\",\\"0\\"],[\\"0\\",\\"1\\",\\"0\\",\\"1\\"]]", "output": "4"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine();\\n        String[][] grid = parseGrid(line);\\n        System.out.println(numIslands(grid));\\n    }\\n\\n    public static int numIslands(String[][] grid) {\\n        //Write code here\\n        return 0;\\n    }\\n\\n    private static String[][] parseGrid(String input) {\\n        input = input.replaceAll(\\"\\\\\\\\[\\\\\\\\[|\\\\\\\\]\\\\]\\", \\"\\").replaceAll(\\"\\\\\\"\\", \\"\\");\\n        String[] rows = input.split(\\"],\\\\[\\");\\n        String[][] grid = new String[rows.length][];\\n        for (int i = 0; i < rows.length; i++) {\\n            grid[i] = rows[i].split(\\",\\");\\n        }\\n        return grid;\\n    }\\n}", "PYTHON": "import sys, json\\n\\ndef numIslands(grid):\\n    # Write your code here\\n    pass\\n\\nif __name__ == \\"__main__\\":\\n    input_str = sys.stdin.read().strip()\\n    grid = json.loads(input_str)\\n    print(numIslands(grid))", "JAVASCRIPT": "function numIslands(grid) {\\n  //Implement code here\\n\\n}\\n\\nconst input = require('fs').readFileSync(0, 'utf-8').trim();\\nconst grid = JSON.parse(input);\\nconsole.log(numIslands(grid));"}	{"JAVA": "import java.util.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static void main(String[] args) {\\r\\n        Scanner sc = new Scanner(System.in);\\r\\n        String line = sc.nextLine();\\r\\n        String[][] grid = parseGrid(line);\\r\\n        System.out.println(numIslands(grid));\\r\\n    }\\r\\n\\r\\n    public static int numIslands(String[][] grid) {\\r\\n        int rows = grid.length, cols = grid[0].length;\\r\\n        boolean[][] visited = new boolean[rows][cols];\\r\\n        int count = 0;\\r\\n        for (int r = 0; r < rows; r++) {\\r\\n            for (int c = 0; c < cols; c++) {\\r\\n                if (grid[r][c].equals(\\"1\\") && !visited[r][c]) {\\r\\n                    dfs(grid, visited, r, c);\\r\\n                    count++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    private static void dfs(String[][] grid, boolean[][] visited, int r, int c) {\\r\\n        int rows = grid.length, cols = grid[0].length;\\r\\n        if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c].equals(\\"0\\") || visited[r][c]) return;\\r\\n        visited[r][c] = true;\\r\\n        dfs(grid, visited, r+1, c);\\r\\n        dfs(grid, visited, r-1, c);\\r\\n        dfs(grid, visited, r, c+1);\\r\\n        dfs(grid, visited, r, c-1);\\r\\n    }\\r\\n\\r\\n    private static String[][] parseGrid(String input) {\\r\\n        input = input.replaceAll(\\"\\\\\\\\[\\\\\\\\[|\\\\\\\\]\\\\]\\", \\"\\").replaceAll(\\"\\\\\\"\\", \\"\\");\\r\\n        String[] rows = input.split(\\"],\\\\[\\");\\r\\n        String[][] grid = new String[rows.length][];\\r\\n        for (int i = 0; i < rows.length; i++) {\\r\\n            grid[i] = rows[i].split(\\",\\");\\r\\n        }\\r\\n        return grid;\\r\\n    }\\r\\n}", "PYTHON": "import sys, json\\r\\n\\r\\ndef numIslands(grid):\\r\\n    if not grid:\\r\\n        return 0\\r\\n    rows, cols = len(grid), len(grid[0])\\r\\n    visited = [[False]*cols for _ in range(rows)]\\r\\n\\r\\n    def dfs(r, c):\\r\\n        if r < 0 or c < 0 or r >= rows or c >= cols:\\r\\n            return\\r\\n        if grid[r][c] == '0' or visited[r][c]:\\r\\n            return\\r\\n        visited[r][c] = True\\r\\n        dfs(r+1, c)\\r\\n        dfs(r-1, c)\\r\\n        dfs(r, c+1)\\r\\n        dfs(r, c-1)\\r\\n\\r\\n    count = 0\\r\\n    for r in range(rows):\\r\\n        for c in range(cols):\\r\\n            if grid[r][c] == '1' and not visited[r][c]:\\r\\n                dfs(r, c)\\r\\n                count += 1\\r\\n    return count\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    input_str = sys.stdin.read().strip()\\r\\n    grid = json.loads(input_str)\\r\\n    print(numIslands(grid))", "JAVASCRIPT": "function numIslands(grid) {\\r\\n  if (!grid || grid.length === 0) return 0;\\r\\n  const rows = grid.length, cols = grid[0].length;\\r\\n  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));\\r\\n\\r\\n  function dfs(r, c) {\\r\\n    if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] === '0' || visited[r][c]) return;\\r\\n    visited[r][c] = true;\\r\\n    dfs(r + 1, c);\\r\\n    dfs(r - 1, c);\\r\\n    dfs(r, c + 1);\\r\\n    dfs(r, c - 1);\\r\\n  }\\r\\n\\r\\n  let count = 0;\\r\\n  for (let r = 0; r < rows; r++) {\\r\\n    for (let c = 0; c < cols; c++) {\\r\\n      if (grid[r][c] === '1' && !visited[r][c]) {\\r\\n        dfs(r, c);\\r\\n        count++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  return count;\\r\\n}\\r\\n\\r\\nconst input = require('fs').readFileSync(0, 'utf-8').trim();\\r\\nconst grid = JSON.parse(input);\\r\\nconsole.log(numIslands(grid));"}	2025-07-26 07:50:17.037	2025-07-26 07:50:17.037	{Amazon,Facebook,Google}
3e8cad48-40cb-4240-80d9-85f7fcb990b6	Generate Parentheses	Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.	MEDIUM	{Backtracking,Recursion}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "n = 3", "output": "[\\\\\\"((()))\\\\\\", \\\\\\"(()())\\\\\\", \\\\\\"(())()\\\\\\", \\\\\\"()(())\\\\\\", \\\\\\"()()()\\\\\\"]", "explanation": "Calling generateParenthesis(3) returns a List<String> containing all valid combinations."}, "PYTHON": {"input": "n = 3", "output": "[\\"((()))\\",\\"(()())\\",\\"(())()\\",\\"()(())\\",\\"()()()\\"]", "explanation": "There are 5 combinations of well-formed parentheses for 3 pairs."}, "JAVASCRIPT": {"input": "const n = 3", "output": "[\\\\\\"((()))\\\\\\",\\\\\\"(()())\\\\\\",\\\\\\"(())()\\\\\\",\\\\\\"()(())\\\\\\",\\\\\\"()()()\\\\\\"]", "explanation": "Calling generateParenthesis(3) returns 5 valid combinations of well-formed parentheses."}}	1 ≤ n ≤ 8	\N	\N	[{"input": "3", "output": "[\\"((()))\\",\\"(()())\\",\\"(())()\\",\\"()(())\\",\\"()()()\\"]"}, {"input": "1", "output": "[\\"()\\"]"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static List<String> generateParenthesis(int n) {\\n        //Write code here\\n        return 0;\\n    }\\n\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = Integer.parseInt(sc.nextLine().trim());\\n        List<String> res = generateParenthesis(n);\\n        System.out.println(res);\\n    }\\n}", "PYTHON": "import sys, json\\n\\ndef generateParenthesis(n):\\n    # Write code here\\n    pass\\n\\nif __name__ == \\"__main__\\":\\n    n = int(sys.stdin.read().strip())\\n    print(json.dumps(generateParenthesis(n)))", "JAVASCRIPT": "const fs = require(\\"fs\\");\\n\\nfunction generateParenthesis(n) {\\n  //Write code here\\n}\\n\\nconst input = fs.readFileSync(0, \\"utf-8\\").trim();\\nconst n = parseInt(input);\\nconsole.log(JSON.stringify(generateParenthesis(n)));"}	{"JAVA": "import java.util.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static List<String> generateParenthesis(int n) {\\r\\n        List<String> result = new ArrayList<>();\\r\\n        backtrack(result, \\"\\", 0, 0, n);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    private static void backtrack(List<String> result, String current, int open, int close, int max) {\\r\\n        if (current.length() == max * 2) {\\r\\n            result.add(current);\\r\\n            return;\\r\\n        }\\r\\n        if (open < max) {\\r\\n            backtrack(result, current + \\"(\\", open + 1, close, max);\\r\\n        }\\r\\n        if (close < open) {\\r\\n            backtrack(result, current + \\")\\", open, close + 1, max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) {\\r\\n        Scanner sc = new Scanner(System.in);\\r\\n        int n = Integer.parseInt(sc.nextLine().trim());\\r\\n        List<String> res = generateParenthesis(n);\\r\\n        System.out.println(res);\\r\\n    }\\r\\n}", "PYTHON": "import sys, json\\r\\n\\r\\ndef generateParenthesis(n):\\r\\n    result = []\\r\\n    def backtrack(current, open_count, close_count):\\r\\n        if len(current) == 2 * n:\\r\\n            result.append(current)\\r\\n            return\\r\\n        if open_count < n:\\r\\n            backtrack(current + '(', open_count + 1, close_count)\\r\\n        if close_count < open_count:\\r\\n            backtrack(current + ')', open_count, close_count + 1)\\r\\n    backtrack('', 0, 0)\\r\\n    return result\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    n = int(sys.stdin.read().strip())\\r\\n    print(json.dumps(generateParenthesis(n)))", "JAVASCRIPT": "const fs = require(\\"fs\\");\\r\\n\\r\\nfunction generateParenthesis(n) {\\r\\n  const result = [];\\r\\n  function backtrack(current, openCount, closeCount) {\\r\\n    if (current.length === 2 * n) {\\r\\n      result.push(current);\\r\\n      return;\\r\\n    }\\r\\n    if (openCount < n) {\\r\\n      backtrack(current + \\"(\\", openCount + 1, closeCount);\\r\\n    }\\r\\n    if (closeCount < openCount) {\\r\\n      backtrack(current + \\")\\", openCount, closeCount + 1);\\r\\n    }\\r\\n  }\\r\\n  backtrack(\\"\\", 0, 0);\\r\\n  return result;\\r\\n}\\r\\n\\r\\nconst input = fs.readFileSync(0, \\"utf-8\\").trim();\\r\\nconst n = parseInt(input);\\r\\nconsole.log(JSON.stringify(generateParenthesis(n)));"}	2025-07-26 07:58:02.675	2025-07-26 07:58:02.675	{Google,Amazon}
f50ad570-d2ab-4c5d-8cc7-4eef6e99fff3	Word Search	Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.	MEDIUM	{Backtracking,Matrix,DFS}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "board = [[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]], word = \\"ABCB\\"", "output": "false", "explanation": "The word 'ABCB' cannot be formed without reusing cells."}, "PYTHON": {"input": "board = [[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]], word = \\"ABCCED\\"", "output": "true", "explanation": "The word 'ABCCED' can be formed by traversing letters in adjacent cells."}, "JAVASCRIPT": {"input": "board = [[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]], word = \\"SEE\\"", "output": "true", "explanation": "The word 'SEE' exists in the board."}}	1 ≤ board.length, board[i].length ≤ 200, 1 ≤ word.length ≤ 10^3	\N	\N	[{"input": "[[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]]\\n\\"ABCCED\\"", "output": "true"}, {"input": "[[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]]\\n\\"SEE\\"", "output": "true"}, {"input": "[[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]]\\n\\"ABCB\\"", "output": "false"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    static int rows, cols;\\n    static char[][] board;\\n    static boolean[][] visited;\\n    static String word;\\n\\n    public static boolean exist(char[][] b, String w) {\\n        //Implement here\\n        return false;\\n    }\\n\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String boardLine = sc.nextLine().trim();\\n        word = sc.nextLine().trim();\\n\\n        boardLine = boardLine.replaceAll(\\"\\\\\\\\s\\", \\"\\");\\n        boardLine = boardLine.substring(1, boardLine.length() - 1);\\n\\n        String[] rowsStr = boardLine.split(\\"\\\\\\\\],\\\\\\\\[\\");\\n        rows = rowsStr.length;\\n        cols = rowsStr[0].replaceAll(\\"\\\\\\"\\", \\"\\").length();\\n        board = new char[rows][cols];\\n\\n        for (int i = 0; i < rows; i++) {\\n            String row = rowsStr[i].replaceAll(\\"\\\\\\"\\", \\"\\");\\n            for (int j = 0; j < cols; j++) {\\n                board[i][j] = row.charAt(j);\\n            }\\n        }\\n\\n        System.out.println(exist(board, word));\\n    }\\n}", "PYTHON": "import sys, json\\n\\ndef exist(board, word):\\n    # Implement code here\\n    pass\\n\\nif __name__ == \\"__main__\\":\\n    input_str = sys.stdin.read().strip().split('\\\\n')\\n    board = json.loads(input_str[0])\\n    word = json.loads(input_str[1])\\n    print(exist(board, word))", "JAVASCRIPT": "const fs = require('fs');\\n\\nfunction exist(board, word) {\\n  //Implement code here\\n}\\n\\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\\\n');\\nconst board = JSON.parse(input[0]);\\nconst word = JSON.parse(input[1]);\\nconsole.log(exist(board, word));"}	{"JAVA": "import java.util.*;\\r\\n\\r\\npublic class Main {\\r\\n    static int rows, cols;\\r\\n    static char[][] board;\\r\\n    static boolean[][] visited;\\r\\n    static String word;\\r\\n\\r\\n    public static boolean exist(char[][] b, String w) {\\r\\n        board = b;\\r\\n        word = w;\\r\\n        rows = board.length;\\r\\n        cols = board[0].length;\\r\\n        visited = new boolean[rows][cols];\\r\\n\\r\\n        for (int r = 0; r < rows; r++) {\\r\\n            for (int c = 0; c < cols; c++) {\\r\\n                if (board[r][c] == word.charAt(0) && backtrack(r, c, 0)) {\\r\\n                    return true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    private static boolean backtrack(int r, int c, int idx) {\\r\\n        if (idx == word.length()) return true;\\r\\n        if (r < 0 || c < 0 || r >= rows || c >= cols) return false;\\r\\n        if (visited[r][c] || board[r][c] != word.charAt(idx)) return false;\\r\\n\\r\\n        visited[r][c] = true;\\r\\n        boolean res = backtrack(r + 1, c, idx + 1) ||\\r\\n                      backtrack(r - 1, c, idx + 1) ||\\r\\n                      backtrack(r, c + 1, idx + 1) ||\\r\\n                      backtrack(r, c - 1, idx + 1);\\r\\n        visited[r][c] = false;\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) {\\r\\n        Scanner sc = new Scanner(System.in);\\r\\n        String boardLine = sc.nextLine().trim();\\r\\n        word = sc.nextLine().trim();\\r\\n\\r\\n        boardLine = boardLine.replaceAll(\\"\\\\\\\\s\\", \\"\\");\\r\\n        boardLine = boardLine.substring(1, boardLine.length() - 1);\\r\\n\\r\\n        String[] rowsStr = boardLine.split(\\"\\\\\\\\],\\\\\\\\[\\");\\r\\n        rows = rowsStr.length;\\r\\n        cols = rowsStr[0].replaceAll(\\"\\\\\\"\\", \\"\\").length();\\r\\n        board = new char[rows][cols];\\r\\n\\r\\n        for (int i = 0; i < rows; i++) {\\r\\n            String row = rowsStr[i].replaceAll(\\"\\\\\\"\\", \\"\\");\\r\\n            for (int j = 0; j < cols; j++) {\\r\\n                board[i][j] = row.charAt(j);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        System.out.println(exist(board, word));\\r\\n    }\\r\\n}", "PYTHON": "import sys, json\\r\\n\\r\\ndef exist(board, word):\\r\\n    rows, cols = len(board), len(board[0])\\r\\n    visited = [[False]*cols for _ in range(rows)]\\r\\n\\r\\n    def backtrack(r, c, idx):\\r\\n        if idx == len(word):\\r\\n            return True\\r\\n        if r < 0 or c < 0 or r >= rows or c >= cols:\\r\\n            return False\\r\\n        if visited[r][c] or board[r][c] != word[idx]:\\r\\n            return False\\r\\n\\r\\n        visited[r][c] = True\\r\\n        res = (backtrack(r+1, c, idx+1) or\\r\\n               backtrack(r-1, c, idx+1) or\\r\\n               backtrack(r, c+1, idx+1) or\\r\\n               backtrack(r, c-1, idx+1))\\r\\n        visited[r][c] = False\\r\\n        return res\\r\\n\\r\\n    for r in range(rows):\\r\\n        for c in range(cols):\\r\\n            if board[r][c] == word[0] and backtrack(r, c, 0):\\r\\n                return True\\r\\n    return False\\r\\n\\r\\nif __name__ == \\"__main__\\":\\r\\n    input_str = sys.stdin.read().strip().split('\\\\n')\\r\\n    board = json.loads(input_str[0])\\r\\n    word = json.loads(input_str[1])\\r\\n    print(exist(board, word))", "JAVASCRIPT": "const fs = require('fs');\\r\\n\\r\\nfunction exist(board, word) {\\r\\n  const rows = board.length, cols = board[0].length;\\r\\n  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));\\r\\n\\r\\n  function backtrack(r, c, idx) {\\r\\n    if (idx === word.length) return true;\\r\\n    if (r < 0 || c < 0 || r >= rows || c >= cols) return false;\\r\\n    if (visited[r][c] || board[r][c] !== word[idx]) return false;\\r\\n\\r\\n    visited[r][c] = true;\\r\\n    const res = backtrack(r + 1, c, idx + 1) ||\\r\\n                backtrack(r - 1, c, idx + 1) ||\\r\\n                backtrack(r, c + 1, idx + 1) ||\\r\\n                backtrack(r, c - 1, idx + 1);\\r\\n    visited[r][c] = false;\\r\\n    return res;\\r\\n  }\\r\\n\\r\\n  for (let r = 0; r < rows; r++) {\\r\\n    for (let c = 0; c < cols; c++) {\\r\\n      if (board[r][c] === word[0] && backtrack(r, c, 0)) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  return false;\\r\\n}\\r\\n\\r\\nconst input = fs.readFileSync(0, 'utf-8').trim().split('\\\\n');\\r\\nconst board = JSON.parse(input[0]);\\r\\nconst word = JSON.parse(input[1]);\\r\\nconsole.log(exist(board, word));"}	2025-07-26 08:12:36.378	2025-07-26 08:12:36.378	{Amazon,Microsoft,Google}
592faba6-5882-437c-a9a0-05ffd4de601d	Maximum Weighted Independent Set in a Graph Path	Given a list of integers representing node weights in a simple undirected path graph (each node i is connected to i-1 and i+1, if they exist), select a subset of nodes with maximum total weight such that no two selected nodes are adjacent.	HARD	{"Dynamic Programming","Graph Theory"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "arr = [3, 2, 7, 10]", "output": "13", "explanation": "Choose 3 and 10, skipping adjacent nodes."}, "PYTHON": {"input": "arr = [4, 10, 3, 1, 5]", "output": "15", "explanation": "Take nodes 1 and 4 (10+5=15), skipping adjacent nodes."}, "JAVASCRIPT": {"input": "arr = [2, 1, 4, 9]", "output": "11", "explanation": "Pick 2 and 9 or 1 and 4, but 2+9 gives max sum 11."}}	1 ≤ arr.length ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4	\N	\N	[{"input": "[3, 2, 7, 10]", "output": "13"}, {"input": "[4, 10, 3, 1, 5]", "output": "15"}, {"input": "[2, 1, 4, 9]", "output": "11"}, {"input": "[-1, -2, -3, -4]", "output": "0"}, {"input": "[1000, 1, 1, 1000]", "output": "2000"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int maxWeightIndependentSet(int[] arr) {\\n        // implement here\\n        return 0;\\n    }\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(maxWeightIndependentSet(arr));\\n    }\\n}", "PYTHON": "import sys, json\\narr = json.loads(sys.stdin.read())\\n\\ndef max_weight_independent_set(arr):\\n    # implement here\\n    pass\\n\\nprint(max_weight_independent_set(arr))", "JAVASCRIPT": "const fs = require('fs');\\nconst arr = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction maxWeightIndependentSet(arr) {\\n  // implement here\\n}\\n\\nconsole.log(maxWeightIndependentSet(arr));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int maxWeightIndependentSet(int[] arr) {\\n        int n = arr.length;\\n        if (n == 0) return 0;\\n        if (n == 1) return Math.max(0, arr[0]);\\n        int prev2 = Math.max(0, arr[0]);\\n        int prev1 = Math.max(0, arr[0], arr[1]);\\n        for (int i = 2; i < n; i++) {\\n            int curr = Math.max(prev1, prev2 + arr[i]);\\n            prev2 = prev1;\\n            prev1 = curr;\\n        }\\n        return prev1;\\n    }\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(maxWeightIndependentSet(arr));\\n    }\\n}", "PYTHON": "import sys, json\\narr = json.loads(sys.stdin.read())\\n\\ndef max_weight_independent_set(arr):\\n    n = len(arr)\\n    if n == 0:\\n        return 0\\n    if n == 1:\\n        return max(0, arr[0])\\n    prev2, prev1 = max(0, arr[0]), max(0, arr[0], arr[1])\\n    for i in range(2, n):\\n        curr = max(prev1, prev2 + arr[i])\\n        prev2, prev1 = prev1, curr\\n    return prev1\\n\\nprint(max_weight_independent_set(arr))", "JAVASCRIPT": "const fs = require('fs');\\nconst arr = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction maxWeightIndependentSet(arr) {\\n  const n = arr.length;\\n  if (n === 0) return 0;\\n  if (n === 1) return Math.max(0, arr[0]);\\n  let prev2 = Math.max(0, arr[0]), prev1 = Math.max(0, arr[0], arr[1]);\\n  for (let i = 2; i < n; i++) {\\n    let curr = Math.max(prev1, prev2 + arr[i]);\\n    prev2 = prev1;\\n    prev1 = curr;\\n  }\\n  return prev1;\\n}\\n\\nconsole.log(maxWeightIndependentSet(arr));"}	2025-07-26 08:42:10.59	2025-07-26 08:42:10.59	{Google,Microsoft,Meta}
1e768aaf-45d9-4035-942b-e8c5e97b3012	Calculate Power of a Number	Given two integers x and n, compute x raised to the power n (x^n). Implement an efficient algorithm to handle large n, including negative powers.	EASY	{Math,Recursion}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "x = -2;\\nn = 3;", "output": "-8", "explanation": "(-2)^3 = -8"}, "PYTHON": {"input": "x = 2\\nn = 10", "output": "1024", "explanation": "2^10 = 1024"}, "JAVASCRIPT": {"input": "x = 2;\\nn = -2;", "output": "0.25", "explanation": "2^-2 = 1/(2^2) = 0.25"}}	-10^9 ≤ x ≤ 10^9, -10^9 ≤ n ≤ 10^9	\N	\N	[{"input": "[2, 10]", "output": "1024"}, {"input": "[2, -2]", "output": "0.25"}, {"input": "[5, 0]", "output": "1"}, {"input": "[-2, 3]", "output": "-8"}, {"input": "[10, 5]", "output": "100000"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static double power(double x, int n) {\\n        // implement here\\n        return 0;\\n    }\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        String[] tokens = line.split(\\",\\");\\n        double x = Double.parseDouble(tokens[0].trim());\\n        int n = Integer.parseInt(tokens[1].trim());\\n        System.out.println(power(x, n));\\n    }\\n}", "PYTHON": "import sys, json\\nx, n = json.loads(sys.stdin.read())\\n\\ndef power(x, n):\\n    # implement here\\n    pass\\n\\nprint(power(x, n))", "JAVASCRIPT": "const fs = require('fs');\\nconst [x, n] = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction power(x, n) {\\n  // implement here\\n}\\n\\nconsole.log(power(x, n));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static double power(double x, int n) {\\n        if (n == 0) return 1;\\n        if (n < 0) return 1 / power(x, -n);\\n        double temp = power(x, n / 2);\\n        if (n % 2 == 0) return temp * temp;\\n        else return temp * temp * x;\\n    }\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        String[] tokens = line.split(\\",\\");\\n        double x = Double.parseDouble(tokens[0].trim());\\n        int n = Integer.parseInt(tokens[1].trim());\\n        System.out.println(power(x, n));\\n    }\\n}", "PYTHON": "import sys, json\\nx, n = json.loads(sys.stdin.read())\\n\\ndef power(x, n):\\n    if n == 0:\\n        return 1\\n    if n < 0:\\n        return 1 / power(x, -n)\\n    temp = power(x, n // 2)\\n    if n % 2 == 0:\\n        return temp * temp\\n    else:\\n        return temp * temp * x\\n\\nprint(power(x, n))", "JAVASCRIPT": "const fs = require('fs');\\nconst [x, n] = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction power(x, n) {\\n  if (n === 0) return 1;\\n  if (n < 0) return 1 / power(x, -n);\\n  let temp = power(x, Math.floor(n / 2));\\n  if (n % 2 === 0) {\\n    return temp * temp;\\n  } else {\\n    return temp * temp * x;\\n  }\\n}\\n\\nconsole.log(power(x, n));"}	2025-07-26 08:49:53.123	2025-07-26 08:49:53.123	{Amazon,Microsoft}
a1b831ed-83d6-4bc7-b7e4-d62554872280	Find the Maximum Digit in a Number	Given a non-negative integer n as a string, find and return the maximum digit present in it.	EASY	{Math,Strings}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "n = \\"10001\\"", "output": "1", "explanation": "Maximum digit is 1."}, "PYTHON": {"input": "n = \\"1234567890\\"", "output": "9", "explanation": "Maximum digit in the number is 9."}, "JAVASCRIPT": {"input": "n = \\"55555\\"", "output": "5", "explanation": "All digits are 5, so max is 5."}}	1 ≤ n.length ≤ 100, n consists of digits only, n does not have leading zeros unless it is '0'.	\N	\N	[{"input": "\\"1234567890\\"", "output": "9"}, {"input": "\\"55555\\"", "output": "5"}, {"input": "\\"10001\\"", "output": "1"}, {"input": "\\"987654321\\"", "output": "9"}, {"input": "\\"0\\"", "output": "0"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int maxDigit(String n) {\\n        // implement here\\n        return 0;\\n    }\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String n = sc.nextLine();\\n        if (n.startsWith(\\"\\\\\\"\\") && n.endsWith(\\"\\\\\\"\\")) {\\n            n = n.substring(1, n.length()-1);\\n        }\\n        System.out.println(maxDigit(n));\\n    }\\n}", "PYTHON": "import sys, json\\nn = json.loads(sys.stdin.read())\\n\\ndef max_digit(n):\\n    # implement here\\n    pass\\n\\nprint(max_digit(n))", "JAVASCRIPT": "const fs = require('fs');\\nconst n = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction maxDigit(n) {\\n  // implement here\\n}\\n\\nconsole.log(maxDigit(n));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int maxDigit(String n) {\\n        int maxD = 0;\\n        for (char c : n.toCharArray()) {\\n            maxD = Math.max(maxD, c - '0');\\n        }\\n        return maxD;\\n    }\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String n = sc.nextLine();\\n        if (n.startsWith(\\"\\\\\\"\\") && n.endsWith(\\"\\\\\\"\\")) {\\n            n = n.substring(1, n.length() - 1);\\n        }\\n        System.out.println(maxDigit(n));\\n    }\\n}", "PYTHON": "import sys, json\\nn = json.loads(sys.stdin.read())\\n\\ndef max_digit(n):\\n    return max(int(c) for c in n)\\n\\nprint(max_digit(n))", "JAVASCRIPT": "const fs = require('fs');\\nconst n = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction maxDigit(n) {\\n  let maxD = 0;\\n  for (let c of n) {\\n    maxD = Math.max(maxD, Number(c));\\n  }\\n  return maxD;\\n}\\n\\nconsole.log(maxDigit(n));"}	2025-07-26 08:51:53.565	2025-07-26 08:51:53.565	{Infosys,TCS}
a1ef8f45-4e63-4168-bf36-0a448490e9f2	Products of Array Except Self	Given an integer array nums, return an array output where output[i] is the product of all the elements of nums except nums[i]. Solve the problem in O(n) time without using the division operation.	MEDIUM	{Arrays,"Prefix Product","Suffix Product"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "nums = [2,3]", "output": "[3,2]", "explanation": "With just two numbers, products except self are just the other number."}, "PYTHON": {"input": "nums = [1,2,4,6]", "output": "[48,24,12,8]", "explanation": "Products except self: index 0 is 2*4*6=48, index 1 is 1*4*6=24, etc."}, "JAVASCRIPT": {"input": "nums = [-1,0,1,2,3]", "output": "[0,-6,0,0,0]", "explanation": "Zero in array leads to zero products except where zero itself is excluded."}}	2 <= nums.length <= 1000, -20 <= nums[i] <= 20	\N	\N	[{"input": "[1,2,4,6]", "output": "[48,24,12,8]"}, {"input": "[-1,0,1,2,3]", "output": "[0,-6,0,0,0]"}, {"input": "[2,3]", "output": "[3,2]"}, {"input": "[5,0,2,1]", "output": "[0,10,0,0]"}, {"input": "[4,4,4,4]", "output": "[64,64,64,64]"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int[] productExceptSelf(int[] nums) {\\n        // implement here\\n        return new int[nums.length];\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] nums = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            nums[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        int[] res = productExceptSelf(nums);\\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < res.length; i++) {\\n            System.out.print(res[i]);\\n            if (i != res.length - 1) System.out.print(\\",\\");\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "PYTHON": "import sys, json\\nnums = json.loads(sys.stdin.read())\\n\\ndef product_except_self(nums):\\n    # implement here\\n    pass\\n\\n# Example usage:\\nprint(json.dumps(product_except_self(nums)))", "JAVASCRIPT": "const fs = require('fs');\\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction productExceptSelf(nums) {\\n  // implement here\\n}\\n\\n// Example usage:\\nconsole.log(JSON.stringify(productExceptSelf(nums)));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int[] productExceptSelf(int[] nums) {\\n        int n = nums.length;\\n        int[] answer = new int[n];\\n        Arrays.fill(answer, 1);\\n        int prefix = 1;\\n        for (int i = 0; i < n; i++) {\\n            answer[i] = prefix;\\n            prefix *= nums[i];\\n        }\\n        int suffix = 1;\\n        for (int i = n - 1; i >= 0; i--) {\\n            answer[i] *= suffix;\\n            suffix *= nums[i];\\n        }\\n        return answer;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] nums = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            nums[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        int[] res = productExceptSelf(nums);\\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < res.length; i++) {\\n            System.out.print(res[i]);\\n            if (i != res.length - 1) System.out.print(\\",\\");\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "PYTHON": "import sys, json\\r\\nnums = json.loads(sys.stdin.read())\\r\\n\\r\\ndef product_except_self(nums):\\r\\n    n = len(nums)\\r\\n    answer = [1] * n\\r\\n    prefix = 1\\r\\n    for i in range(n):\\r\\n        answer[i] = prefix\\r\\n        prefix *= nums[i]\\r\\n    suffix = 1\\r\\n    for i in range(n - 1, -1, -1):\\r\\n        answer[i] *= suffix\\r\\n        suffix *= nums[i]\\r\\n    return answer\\r\\n\\r\\nprint(json.dumps(product_except_self(nums)))", "JAVASCRIPT": "const fs = require('fs');\\r\\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8'));\\r\\n\\r\\nfunction productExceptSelf(nums) {\\r\\n  const n = nums.length;\\r\\n  const answer = new Array(n).fill(1);\\r\\n  let prefix = 1;\\r\\n  for(let i = 0; i < n; i++) {\\r\\n    answer[i] = prefix;\\r\\n    prefix *= nums[i];\\r\\n  }\\r\\n  let suffix = 1;\\r\\n  for(let i = n - 1; i >= 0; i--) {\\r\\n    answer[i] *= suffix;\\r\\n    suffix *= nums[i];\\r\\n  }\\r\\n  return answer;\\r\\n}\\r\\n\\r\\nconsole.log(JSON.stringify(productExceptSelf(nums)));"}	2025-07-26 13:33:34.125	2025-07-26 13:33:34.125	{Google,Amazon,Microsoft}
b83dca8f-edc6-4c99-882d-4c5be56d1701	Contains Duplicate	Given an integer array nums, return true if any value appears more than once in the array, otherwise return false.	EASY	{Arrays,"Hash Table"}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "nums = [2, 2, 2, 2, 2]", "output": "true", "explanation": "2 appears multiple times."}, "PYTHON": {"input": "nums = [1, 2, 3, 3]", "output": "true", "explanation": "3 appears twice in the array."}, "JAVASCRIPT": {"input": "nums = [1, 2, 3, 4]", "output": "false", "explanation": "No duplicates in the array."}}	1 <= nums.length <= 10^5, -10^9 <= nums[i] <= 10^9	\N	\N	[{"input": "[1, 2, 3, 3]", "output": "true"}, {"input": "[1, 2, 3, 4]", "output": "false"}, {"input": "[2, 2, 2, 2, 2]", "output": "true"}, {"input": "[100000, -100000, 0]", "output": "false"}, {"input": "[1]", "output": "false"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static boolean containsDuplicate(int[] nums) {\\n        // implement here\\n        return false;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(\\"false\\");\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] nums = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            nums[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(containsDuplicate(nums));\\n    }\\n}", "PYTHON": "import sys, json\\nnums = json.loads(sys.stdin.read())\\n\\ndef contains_duplicate(nums):\\n    # implement here\\n    pass\\n\\n# Example usage:\\nprint(contains_duplicate(nums))", "JAVASCRIPT": "const fs = require('fs');\\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction containsDuplicate(nums) {\\n  // implement here\\n}\\n\\n// Example usage:\\nconsole.log(containsDuplicate(nums));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static boolean containsDuplicate(int[] nums) {\\n        Set<Integer> seen = new HashSet<>();\\n        for (int num : nums) {\\n            if (seen.contains(num)) return true;\\n            seen.add(num);\\n        }\\n        return false;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(\\"false\\");\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] nums = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            nums[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(containsDuplicate(nums));\\n    }\\n}", "PYTHON": "import sys, json\\nnums = json.loads(sys.stdin.read())\\n\\ndef contains_duplicate(nums):\\n    seen = set()\\n    for num in nums:\\n        if num in seen:\\n            return True\\n        seen.add(num)\\n    return False\\n\\nprint(str(contains_duplicate(nums)).lower())", "JAVASCRIPT": "const fs = require('fs');\\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction containsDuplicate(nums) {\\n  const seen = new Set();\\n  for (const num of nums) {\\n    if (seen.has(num)) return true;\\n    seen.add(num);\\n  }\\n  return false;\\n}\\n\\nconsole.log(containsDuplicate(nums));"}	2025-07-26 13:49:19.573	2025-07-26 13:49:19.573	{Amazon,Google,Microsoft}
3b25a41a-4d7a-405a-a97f-9ebbd7f5f6e0	Best Time to Buy and Sell Stock	You are given an integer array prices where prices[i] is the price of NeetCoin on the ith day. You may choose a single day to buy one NeetCoin and a different day in the future to sell it. Return the maximum profit you can achieve. You may choose to not make any transactions, in which case the profit would be 0.	EASY	{Arrays,Greedy}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "prices = [7,1,5,3,6,4]", "output": "5", "explanation": "Buy at 1 (day 1), sell at 6 (day 4), profit = 5."}, "PYTHON": {"input": "prices = [10,1,5,6,7,1]", "output": "6", "explanation": "Buy at price 1 (day 1) and sell at price 7 (day 4), profit = 7 - 1 = 6."}, "JAVASCRIPT": {"input": "prices = [10,8,7,5,2]", "output": "0", "explanation": "No profitable transactions possible, so output is 0."}}	1 <= prices.length <= 100, 0 <= prices[i] <= 100	\N	\N	[{"input": "[10,1,5,6,7,1]", "output": "6"}, {"input": "[10,8,7,5,2]", "output": "0"}, {"input": "[7,1,5,3,6,4]", "output": "5"}, {"input": "[1,2,3,4,5]", "output": "4"}, {"input": "[5,4,3,2,1]", "output": "0"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int maxProfit(int[] prices) {\\n        // implement here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] prices = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            prices[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(maxProfit(prices));\\n    }\\n}", "PYTHON": "import sys, json\\nprices = json.loads(sys.stdin.read())\\n\\ndef max_profit(prices):\\n    # implement here\\n    pass\\n\\n# Example usage:\\nprint(max_profit(prices))", "JAVASCRIPT": "const fs = require('fs');\\nconst prices = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction maxProfit(prices) {\\n  // implement here\\n}\\n\\n// Example usage:\\nconsole.log(maxProfit(prices));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static int maxProfit(int[] prices) {\\n        int minPrice = Integer.MAX_VALUE;\\n        int maxProfit = 0;\\n        for (int price : prices) {\\n            if (price < minPrice) {\\n                minPrice = price;\\n            } else if (price - minPrice > maxProfit) {\\n                maxProfit = price - minPrice;\\n            }\\n        }\\n        return maxProfit;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] prices = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            prices[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        System.out.println(maxProfit(prices));\\n    }\\n}", "PYTHON": "import sys, json\\nprices = json.loads(sys.stdin.read())\\n\\ndef max_profit(prices):\\n    min_price = float('inf')\\n    max_profit = 0\\n    for price in prices:\\n        if price < min_price:\\n            min_price = price\\n        elif price - min_price > max_profit:\\n            max_profit = price - min_price\\n    return max_profit\\n\\nprint(max_profit(prices))", "JAVASCRIPT": "const fs = require('fs');\\nconst prices = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction maxProfit(prices) {\\n  let minPrice = Infinity;\\n  let maxProfit = 0;\\n  for (const price of prices) {\\n    if (price < minPrice) {\\n      minPrice = price;\\n    } else if (price - minPrice > maxProfit) {\\n      maxProfit = price - minPrice;\\n    }\\n  }\\n  return maxProfit;\\n}\\n\\nconsole.log(maxProfit(prices));"}	2025-07-26 13:54:46.072	2025-07-26 13:54:46.072	{Amazon,Google,Microsoft}
8d1dd81d-a357-45a6-9afa-dafb457ac560	3Sum	Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] where nums[i] + nums[j] + nums[k] == 0, and the indices i, j, k are all distinct. The output must not contain any duplicate triplets. Triplets can be returned in any order.	MEDIUM	{Arrays,"Two Pointers",Sorting}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "nums = [0,1,1]", "output": "[]", "explanation": "No triplet sums to zero."}, "PYTHON": {"input": "nums = [-1,0,1,2,-1,-4]", "output": "[[-1,-1,2],[-1,0,1]]", "explanation": "There are two triplets that sum to zero: [-1, -1, 2] and [-1, 0, 1]."}, "JAVASCRIPT": {"input": "nums = [0,0,0]", "output": "[[0,0,0]]", "explanation": "The only triplet that sums to zero is [0, 0, 0]."}}	3 <= nums.length <= 1000, -10^5 <= nums[i] <= 10^5	\N	\N	[{"input": "[-1,0,1,2,-1,-4]", "output": "[[-1,-1,2],[-1,0,1]]"}, {"input": "[0,1,1]", "output": "[]"}, {"input": "[0,0,0]", "output": "[[0,0,0]]"}, {"input": "[-2,0,1,1,2]", "output": "[[-2,0,2],[-2,1,1]]"}, {"input": "[3,-2,1,0]", "output": "[]"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static List<List<Integer>> threeSum(int[] nums) {\\n        // implement here\\n        return new ArrayList<>();\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] nums = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            nums[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        List<List<Integer>> res = threeSum(nums);\\n        System.out.println(toJson(res));\\n    }\\n\\n    public static String toJson(List<List<Integer>> list) {\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(\\"[\\");\\n        for (int i = 0; i < list.size(); i++) {\\n            List<Integer> triplet = list.get(i);\\n            sb.append(\\"[\\");\\n            for (int j = 0; j < triplet.size(); j++) {\\n                sb.append(triplet.get(j));\\n                if (j != triplet.size() - 1) sb.append(\\",\\");\\n            }\\n            sb.append(\\"]\\");\\n            if (i != list.size() - 1) sb.append(\\",\\");\\n        }\\n        sb.append(\\"]\\");\\n        return sb.toString();\\n    }\\n}", "PYTHON": "import sys, json\\nnums = json.loads(sys.stdin.read())\\n\\ndef three_sum(nums):\\n    # implement here\\n    pass\\n\\n# Example usage:\\nprint(json.dumps(three_sum(nums)))", "JAVASCRIPT": "const fs = require('fs');\\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction threeSum(nums) {\\n  // implement here\\n}\\n\\n// Example usage:\\nconsole.log(JSON.stringify(threeSum(nums)));"}	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static List<List<Integer>> threeSum(int[] nums) {\\n        Arrays.sort(nums);\\n        List<List<Integer>> res = new ArrayList<>();\\n        int n = nums.length;\\n        for (int i = 0; i < n; i++) {\\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\\n            int left = i + 1, right = n - 1;\\n            while (left < right) {\\n                int sum = nums[i] + nums[left] + nums[right];\\n                if (sum < 0) left++;\\n                else if (sum > 0) right--;\\n                else {\\n                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));\\n                    left++;\\n                    right--;\\n                    while (left < right && nums[left] == nums[left - 1]) left++;\\n                    while (left < right && nums[right] == nums[right + 1]) right--;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n        String[] tokens = line.split(\\",\\");\\n        int[] nums = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            nums[i] = Integer.parseInt(tokens[i].trim());\\n        }\\n        List<List<Integer>> res = threeSum(nums);\\n        System.out.println(toJson(res));\\n    }\\n\\n    public static String toJson(List<List<Integer>> list) {\\n        StringBuilder sb = new StringBuilder();\\n        sb.append(\\"[\\");\\n        for (int i = 0; i < list.size(); i++) {\\n            List<Integer> triplet = list.get(i);\\n            sb.append(\\"[\\");\\n            for (int j = 0; j < triplet.size(); j++) {\\n                sb.append(triplet.get(j));\\n                if (j != triplet.size() - 1) sb.append(\\",\\");\\n            }\\n            sb.append(\\"]\\");\\n            if (i != list.size() - 1) sb.append(\\",\\");\\n        }\\n        sb.append(\\"]\\");\\n        return sb.toString();\\n    }\\n}", "PYTHON": "import sys, json\\nnums = json.loads(sys.stdin.read())\\n\\ndef three_sum(nums):\\n    nums.sort()\\n    res = []\\n    n = len(nums)\\n    for i in range(n):\\n        if i > 0 and nums[i] == nums[i - 1]:\\n            continue\\n        left, right = i + 1, n - 1\\n        while left < right:\\n            s = nums[i] + nums[left] + nums[right]\\n            if s < 0:\\n                left += 1\\n            elif s > 0:\\n                right -= 1\\n            else:\\n                res.append([nums[i], nums[left], nums[right]])\\n                left += 1\\n                right -= 1\\n                while left < right and nums[left] == nums[left - 1]:\\n                    left += 1\\n                while left < right and nums[right] == nums[right + 1]:\\n                    right -= 1\\n    return res\\n\\nprint(json.dumps(three_sum(nums)))", "JAVASCRIPT": "const fs = require('fs');\\nconst nums = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction threeSum(nums) {\\n  nums.sort((a, b) => a - b);\\n  const res = [];\\n  for (let i = 0; i < nums.length; i++) {\\n    if (i > 0 && nums[i] === nums[i - 1]) continue;\\n    let left = i + 1, right = nums.length - 1;\\n    while (left < right) {\\n      const sum = nums[i] + nums[left] + nums[right];\\n      if (sum < 0) left++;\\n      else if (sum > 0) right--;\\n      else {\\n        res.push([nums[i], nums[left], nums[right]]);\\n        left++;\\n        right--;\\n        while (left < right && nums[left] === nums[left - 1]) left++;\\n        while (left < right && nums[right] === nums[right + 1]) right--;\\n      }\\n    }\\n  }\\n  return res;\\n}\\n\\nconsole.log(JSON.stringify(threeSum(nums)));"}	2025-07-26 13:59:22.021	2025-07-26 13:59:22.021	{Amazon,Google,Facebook}
76e88d22-c1d1-4ccb-b243-38522b60b35f	Merge Two Sorted Linked Lists	You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted linked list and return the head of the new sorted linked list. The new list should be made up of nodes from list1 and list2.	EASY	{"Linked List",Recursion,Pointers}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "list1 = [], list2 = []", "output": "[]", "explanation": "Both lists empty, output empty."}, "PYTHON": {"input": "list1 = [1,2,4], list2 = [1,3,5]", "output": "[1,1,2,3,4,5]", "explanation": "Merge nodes maintaining sorted order."}, "JAVASCRIPT": {"input": "list1 = [], list2 = [1,2]", "output": "[1,2]", "explanation": "One list empty, output is the other."}}	0 <= length of each list <= 100, -100 <= Node.val <= 100	\N	\N	[{"input": "{\\"list1\\":\\"[1,2,4]\\",\\"list2\\":\\"[1,3,5]\\"}", "output": "[1,1,2,3,4,5]"}, {"input": "{\\"list1\\":\\"[]\\",\\"list2\\":\\"[1,2]\\"}", "output": "[1,2]"}, {"input": "{\\"list1\\":\\"[]\\",\\"list2\\":\\"[]\\"}", "output": "[]"}, {"input": "{\\"list1\\":\\"[5,10,15]\\",\\"list2\\":\\"[2,3,20]\\"}", "output": "[2,3,5,10,15,20]"}, {"input": "{\\"list1\\":\\"[-10,-5,0]\\",\\"list2\\":\\"[-7,-3,1]\\"}", "output": "[-10,-7,-5,-3,0,1]"}]	{"JAVA": "import java.util.*;\\n\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\npublic class Main {\\n    public static ListNode arrayToLinkedList(int[] arr) {\\n        ListNode dummy = new ListNode(0);\\n        ListNode current = dummy;\\n        for (int val : arr) {\\n            current.next = new ListNode(val);\\n            current = current.next;\\n        }\\n        return dummy.next;\\n    }\\n\\n    public static int[] linkedListToArray(ListNode head) {\\n        List<Integer> res = new ArrayList<>();\\n        while (head != null) {\\n            res.add(head.val);\\n            head = head.next;\\n        }\\n        return res.stream().mapToInt(i -> i).toArray();\\n    }\\n\\n    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode(0);\\n        ListNode tail = dummy;\\n        while (l1 != null && l2 != null) {\\n            if (l1.val < l2.val) {\\n                tail.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                tail.next = l2;\\n                l2 = l2.next;\\n            }\\n            tail = tail.next;\\n        }\\n        tail.next = (l1 != null) ? l1 : l2;\\n        return dummy.next;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        // input format: {\\"list1\\": [...], \\"list2\\": [...]}\\n        // parse manually\\n        line = line.replaceAll(\\"^\\\\{|\\\\}$\\", \\"\\");\\n        String[] parts = line.split(\\",\\\\s*\\" + \\"(?=\\\\\\"list[12]\\\\\\"\\":)\\");\\n        int[] list1Arr = new int[0];\\n        int[] list2Arr = new int[0];\\n        for (String part : parts) {\\n            String[] kv = part.split(\\":\\", 2);\\n            String key = kv[0].trim().replaceAll(\\"\\\\\\"\\", \\"\\");\\n            String val = kv[1].trim();\\n            val = val.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n            String[] numsStr = val.isEmpty() ? new String[0] : val.split(\\",\\");\\n            int[] nums = new int[numsStr.length];\\n            for (int i = 0; i < numsStr.length; i++) {\\n                nums[i] = Integer.parseInt(numsStr[i].trim());\\n            }\\n            if (key.equals(\\"list1\\")) list1Arr = nums;\\n            else if (key.equals(\\"list2\\")) list2Arr = nums;\\n        }\\n        ListNode list1 = arrayToLinkedList(list1Arr);\\n        ListNode list2 = arrayToLinkedList(list2Arr);\\n        ListNode merged = mergeTwoLists(list1, list2);\\n        int[] result = linkedListToArray(merged);\\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < result.length; i++) {\\n            System.out.print(result[i]);\\n            if (i != result.length - 1) System.out.print(\\",\\");\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "PYTHON": "import sys, json\\n\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n# Helper to convert list to linked list\\n\\ndef list_to_linked(lst):\\n    dummy = ListNode()\\n    current = dummy\\n    for val in lst:\\n        current.next = ListNode(val)\\n        current = current.next\\n    return dummy.next\\n\\n# Helper to convert linked list to list\\n\\ndef linked_to_list(node):\\n    result = []\\n    while node:\\n        result.append(node.val)\\n        node = node.next\\n    return result\\n\\ninput_json = sys.stdin.read()\\ninputs = json.loads(input_json)\\nlist1 = list_to_linked(inputs[\\"list1\\"])\\nlist2 = list_to_linked(inputs[\\"list2\\"])\\n\\ndef merge_two_lists(l1, l2):\\n    dummy = ListNode()\\n    tail = dummy\\n    while l1 and l2:\\n        if l1.val < l2.val:\\n            tail.next = l1\\n            l1 = l1.next\\n        else:\\n            tail.next = l2\\n            l2 = l2.next\\n        tail = tail.next\\n    tail.next = l1 or l2\\n    return dummy.next\\n\\nmerged_head = merge_two_lists(list1, list2)\\nprint(json.dumps(linked_to_list(merged_head)))", "JAVASCRIPT": "const fs = require('fs');\\n\\n// Definition for singly-linked list.\\nfunction ListNode(val, next = null) {\\n  this.val = val;\\n  this.next = next;\\n}\\n\\n// Helper: convert array to linked list\\nfunction arrayToLinkedList(arr) {\\n  let dummy = new ListNode(0);\\n  let current = dummy;\\n  for (let val of arr) {\\n    current.next = new ListNode(val);\\n    current = current.next;\\n  }\\n  return dummy.next;\\n}\\n\\n// Helper: convert linked list to array\\nfunction linkedListToArray(node) {\\n  let arr = [];\\n  while (node) {\\n    arr.push(node.val);\\n    node = node.next;\\n  }\\n  return arr;\\n}\\n\\nconst input = JSON.parse(fs.readFileSync(0, 'utf-8'));\\nconst list1 = arrayToLinkedList(JSON.parse(input.list1));\\nconst list2 = arrayToLinkedList(JSON.parse(input.list2));\\n\\nfunction mergeTwoLists(l1, l2) {\\n  let dummy = new ListNode(0);\\n  let tail = dummy;\\n  while (l1 && l2) {\\n    if (l1.val < l2.val) {\\n      tail.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      tail.next = l2;\\n      l2 = l2.next;\\n    }\\n    tail = tail.next;\\n  }\\n  tail.next = l1 || l2;\\n  return dummy.next;\\n}\\n\\nconst mergedHead = mergeTwoLists(list1, list2);\\nconsole.log(JSON.stringify(linkedListToArray(mergedHead)));"}	{"JAVA": "import java.util.*;\\n\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\npublic class Main {\\n    public static ListNode arrayToLinkedList(int[] arr) {\\n        ListNode dummy = new ListNode(0);\\n        ListNode current = dummy;\\n        for (int val : arr) {\\n            current.next = new ListNode(val);\\n            current = current.next;\\n        }\\n        return dummy.next;\\n    }\\n\\n    public static int[] linkedListToArray(ListNode head) {\\n        List<Integer> res = new ArrayList<>();\\n        while (head != null) {\\n            res.add(head.val);\\n            head = head.next;\\n        }\\n        return res.stream().mapToInt(i -> i).toArray();\\n    }\\n\\n    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode(0);\\n        ListNode tail = dummy;\\n        while (l1 != null && l2 != null) {\\n            if (l1.val < l2.val) {\\n                tail.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                tail.next = l2;\\n                l2 = l2.next;\\n            }\\n            tail = tail.next;\\n        }\\n        tail.next = (l1 != null) ? l1 : l2;\\n        return dummy.next;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        // input format: {\\"list1\\": [...], \\"list2\\": [...]}\\n        // parse manually\\n        line = line.replaceAll(\\"^\\\\{|\\\\}$\\", \\"\\");\\n        String[] parts = line.split(\\",\\\\s*\\" + \\"(?=\\\\\\"list[12]\\\\\\"\\":)\\");\\n        int[] list1Arr = new int[0];\\n        int[] list2Arr = new int[0];\\n        for (String part : parts) {\\n            String[] kv = part.split(\\":\\", 2);\\n            String key = kv[0].trim().replaceAll(\\"\\\\\\"\\", \\"\\");\\n            String val = kv[1].trim();\\n            val = val.replaceAll(\\"^\\\\[|\\\\]$\\", \\"\\");\\n            String[] numsStr = val.isEmpty() ? new String[0] : val.split(\\",\\");\\n            int[] nums = new int[numsStr.length];\\n            for (int i = 0; i < numsStr.length; i++) {\\n                nums[i] = Integer.parseInt(numsStr[i].trim());\\n            }\\n            if (key.equals(\\"list1\\")) list1Arr = nums;\\n            else if (key.equals(\\"list2\\")) list2Arr = nums;\\n        }\\n        ListNode list1 = arrayToLinkedList(list1Arr);\\n        ListNode list2 = arrayToLinkedList(list2Arr);\\n        ListNode merged = mergeTwoLists(list1, list2);\\n        int[] result = linkedListToArray(merged);\\n        System.out.print(\\"[\\");\\n        for (int i = 0; i < result.length; i++) {\\n            System.out.print(result[i]);\\n            if (i != result.length - 1) System.out.print(\\",\\");\\n        }\\n        System.out.println(\\"]\\");\\n    }\\n}", "PYTHON": "import sys, json\\n\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\ndef list_to_linked(lst):\\n    dummy = ListNode()\\n    current = dummy\\n    for val in lst:\\n        current.next = ListNode(val)\\n        current = current.next\\n    return dummy.next\\n\\ndef linked_to_list(node):\\n    result = []\\n    while node:\\n        result.append(node.val)\\n        node = node.next\\n    return result\\n\\ninputs = json.loads(sys.stdin.read())\\nlist1 = list_to_linked(inputs[\\"list1\\"])\\nlist2 = list_to_linked(inputs[\\"list2\\"])\\n\\ndef merge_two_lists(l1, l2):\\n    dummy = ListNode()\\n    tail = dummy\\n    while l1 and l2:\\n        if l1.val < l2.val:\\n            tail.next = l1\\n            l1 = l1.next\\n        else:\\n            tail.next = l2\\n            l2 = l2.next\\n        tail = tail.next\\n    tail.next = l1 or l2\\n    return dummy.next\\n\\nmerged_head = merge_two_lists(list1, list2)\\nprint(json.dumps(linked_to_list(merged_head)))", "JAVASCRIPT": "const fs = require('fs');\\r\\n\\r\\nfunction ListNode(val, next = null) {\\r\\n  this.val = val;\\r\\n  this.next = next;\\r\\n}\\r\\n\\r\\nfunction arrayToLinkedList(arr) {\\r\\n  let dummy = new ListNode(0);\\r\\n  let current = dummy;\\r\\n  for (let val of arr) {\\r\\n    current.next = new ListNode(val);\\r\\n    current = current.next;\\r\\n  }\\r\\n  return dummy.next;\\r\\n}\\r\\n\\r\\nfunction linkedListToArray(node) {\\r\\n  let arr = [];\\r\\n  while (node) {\\r\\n    arr.push(node.val);\\r\\n    node = node.next;\\r\\n  }\\r\\n  return arr;\\r\\n}\\r\\n\\r\\nconst input = JSON.parse(fs.readFileSync(0, 'utf-8'));\\r\\nconst list1 = arrayToLinkedList(JSON.parse(input.list1));\\r\\nconst list2 = arrayToLinkedList(JSON.parse(input.list2));\\r\\n\\r\\nfunction mergeTwoLists(l1, l2) {\\r\\n  let dummy = new ListNode(0);\\r\\n  let tail = dummy;\\r\\n  while (l1 && l2) {\\r\\n    if (l1.val < l2.val) {\\r\\n      tail.next = l1;\\r\\n      l1 = l1.next;\\r\\n    } else {\\r\\n      tail.next = l2;\\r\\n      l2 = l2.next;\\r\\n    }\\r\\n    tail = tail.next;\\r\\n  }\\r\\n  tail.next = l1 || l2;\\r\\n  return dummy.next;\\r\\n}\\r\\n\\r\\nconst mergedHead = mergeTwoLists(list1, list2);\\r\\nconsole.log(JSON.stringify(linkedListToArray(mergedHead)));"}	2025-07-26 14:41:52.608	2025-07-26 14:41:52.608	{Amazon,Google,Microsoft}
cba48378-80a3-4668-b379-092d37b725de	Meeting Rooms	Given an array of meeting time interval objects consisting of start and end times [[start_1,end_1],[start_2,end_2],...] (start_i < end_i), determine if a person could add all meetings to their schedule without any conflicts.	EASY	{Sorting,Intervals}	2a179277-32c9-4853-a8c2-3d2de754781d	{"JAVA": {"input": "intervals = [[0,5],[5,10],[10,15]]", "output": "true", "explanation": "Meetings end and start exactly at the same time but do not overlap."}, "PYTHON": {"input": "intervals = [[0,30],[5,10],[15,20]]", "output": "false", "explanation": "The first meeting (0-30) conflicts with (5-10) and (15-20)."}, "JAVASCRIPT": {"input": "intervals = [[5,8],[9,15]]", "output": "true", "explanation": "No meetings overlap, so scheduling is possible."}}	0 <= intervals.length <= 500, 0 <= intervals[i][0] < intervals[i][1] <= 1,000,000	\N	\N	[{"input": "[[0,30],[5,10],[15,20]]", "output": "false"}, {"input": "[[5,8],[9,15]]", "output": "true"}, {"input": "[]", "output": "true"}, {"input": "[[0,5],[5,10],[10,15]]", "output": "true"}, {"input": "[[1,10],[2,3],[4,5]]", "output": "false"}]	{"JAVA": "import java.util.*;\\n\\npublic class Main {\\n    public static boolean canAttendMeetings(int[][] intervals) {\\n        //Write code here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String line = sc.nextLine().trim();\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\n        if (line.isEmpty()) {\\n            System.out.println(\\"true\\");\\n            return;\\n        }\\n        String[] items = line.split(\\"\\\\\\\\],\\\\\\\\[\\");\\n        int[][] intervals = new int[items.length][2];\\n        for (int i = 0; i < items.length; i++) {\\n            String item = items[i].replaceAll(\\"\\\\\\\\[|\\\\\\\\]\\", \\"\\");\\n            String[] parts = item.split(\\",\\");\\n            intervals[i][0] = Integer.parseInt(parts[0].trim());\\n            intervals[i][1] = Integer.parseInt(parts[1].trim());\\n        }\\n        System.out.println(canAttendMeetings(intervals));\\n    }\\n}", "PYTHON": "import sys, json\\nintervals = json.loads(sys.stdin.read())\\n\\ndef can_attend_meetings(intervals):\\n    #Write code here\\n    pass\\n\\n# Example usage:\\nprint(can_attend_meetings(intervals))", "JAVASCRIPT": "const fs = require('fs');\\nconst intervals = JSON.parse(fs.readFileSync(0, 'utf-8'));\\n\\nfunction canAttendMeetings(intervals) {\\n  //Write code here\\n}\\n\\n// Example usage:\\nconsole.log(canAttendMeetings(intervals));"}	{"JAVA": "import java.util.*;\\r\\n\\r\\npublic class Main {\\r\\n    public static boolean canAttendMeetings(int[][] intervals) {\\r\\n        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\\r\\n        for (int i = 1; i < intervals.length; i++) {\\r\\n            if (intervals[i][0] < intervals[i - 1][1]) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) {\\r\\n        Scanner sc = new Scanner(System.in);\\r\\n        String line = sc.nextLine().trim();\\r\\n        line = line.replaceAll(\\"^\\\\\\\\[|\\\\\\\\]$\\", \\"\\");\\r\\n        if (line.isEmpty()) {\\r\\n            System.out.println(\\"true\\");\\r\\n            return;\\r\\n        }\\r\\n        String[] items = line.split(\\"\\\\\\\\],\\\\\\\\[\\");\\r\\n        int[][] intervals = new int[items.length][2];\\r\\n        for (int i = 0; i < items.length; i++) {\\r\\n            String item = items[i].replaceAll(\\"\\\\\\\\[|\\\\\\\\]\\", \\"\\");\\r\\n            String[] parts = item.split(\\",\\");\\r\\n            intervals[i][0] = Integer.parseInt(parts[0].trim());\\r\\n            intervals[i][1] = Integer.parseInt(parts[1].trim());\\r\\n        }\\r\\n        System.out.println(canAttendMeetings(intervals));\\r\\n    }\\r\\n}", "PYTHON": "import sys, json\\r\\nintervals = json.loads(sys.stdin.read())\\r\\n\\r\\ndef can_attend_meetings(intervals):\\r\\n    intervals.sort(key=lambda x: x[0])\\r\\n    for i in range(1, len(intervals)):\\r\\n        if intervals[i][0] < intervals[i - 1][1]:\\r\\n            return False\\r\\n    return True\\r\\n\\r\\n# Example usage:\\r\\nprint(can_attend_meetings(intervals))", "JAVASCRIPT": "const fs = require('fs');\\r\\nconst intervals = JSON.parse(fs.readFileSync(0, 'utf-8'));\\r\\n\\r\\nfunction canAttendMeetings(intervals) {\\r\\n  intervals.sort((a, b) => a[0] - b[0]);\\r\\n  for (let i = 1; i < intervals.length; i++) {\\r\\n    if (intervals[i][0] < intervals[i - 1][1]) {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n  return true;\\r\\n}\\r\\n\\r\\n// Example usage:\\r\\nconsole.log(canAttendMeetings(intervals));"}	2025-07-26 14:48:51.448	2025-07-26 14:48:51.448	{Google,Facebook,Amazon}
\.


--
-- Data for Name: ProblemInPlaylist; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."ProblemInPlaylist" (id, "playlistId", "problemId", "createdAt", "updatedAt") FROM stdin;
088d9388-0223-41c2-904c-4526a81afa1a	0835749a-651c-4d54-85ed-9743c88f2f48	d773532a-3fbb-4418-9e3b-ed3636de0b87	2025-06-22 18:03:26.277	2025-06-22 18:03:26.277
bd37fa9c-17cd-4c5f-8de3-f1fb24304149	c797e691-3fa7-4a69-a5a1-86d5567b7b98	d773532a-3fbb-4418-9e3b-ed3636de0b87	2025-07-07 11:36:01.332	2025-07-07 11:36:01.332
75143e1e-f0ad-4076-b12c-206e8164bc58	c797e691-3fa7-4a69-a5a1-86d5567b7b98	ba19c1cc-df9b-42ee-a0f7-e598e200de13	2025-07-16 17:40:40.11	2025-07-16 17:40:40.11
a10939dc-733a-4b09-b8fa-2354d7c12ccc	c797e691-3fa7-4a69-a5a1-86d5567b7b98	c3455dcc-2c25-483c-af7b-78f54ca98d5e	2025-07-16 17:40:46.365	2025-07-16 17:40:46.365
36ddbd4f-d650-4632-b71e-6d3b44fccda0	65e56047-4eae-4837-99ca-490d96a1cfb2	d773532a-3fbb-4418-9e3b-ed3636de0b87	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
b381da87-1f1f-450e-8e4e-59e07c4a0f5d	65e56047-4eae-4837-99ca-490d96a1cfb2	380fe475-e22b-49fc-aec5-d9796ebc2a9d	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
4239084f-13e5-4560-830e-70dc49c818fe	65e56047-4eae-4837-99ca-490d96a1cfb2	ba19c1cc-df9b-42ee-a0f7-e598e200de13	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
459af65b-cccb-4f6c-9575-d8fe74e46866	65e56047-4eae-4837-99ca-490d96a1cfb2	8225b2d0-11bf-4cb5-aca1-14287a1f1c53	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
f620cb8a-6b7e-4682-9911-6d083927ea30	65e56047-4eae-4837-99ca-490d96a1cfb2	a1ef8f45-4e63-4168-bf36-0a448490e9f2	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
71becdde-6a5c-441c-abde-734dd548da2c	65e56047-4eae-4837-99ca-490d96a1cfb2	cdb7c83d-ec47-4072-8704-9553ca348cbc	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
8b263828-e43f-4b5a-a108-9f93d8de7b5e	65e56047-4eae-4837-99ca-490d96a1cfb2	7e3ad7ce-53ab-4e66-9df7-857fa84d4522	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
20c5e9ea-8eda-4056-9845-a393e28825f5	65e56047-4eae-4837-99ca-490d96a1cfb2	76e88d22-c1d1-4ccb-b243-38522b60b35f	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
361c9380-34c3-4e8c-b419-7863c531e386	65e56047-4eae-4837-99ca-490d96a1cfb2	1988aa8c-2673-4f7f-a907-89df44bb5074	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
a4c70edc-6bbf-4698-9f46-81b0b07d1902	65e56047-4eae-4837-99ca-490d96a1cfb2	5b978148-bf44-4073-adcc-532f958cbdd9	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
cd0cf2fa-ceeb-4a01-9ce8-61ed69815c9e	65e56047-4eae-4837-99ca-490d96a1cfb2	cba48378-80a3-4668-b379-092d37b725de	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
69ff98e6-d0ec-4c3d-af9e-59e71b1de61f	65e56047-4eae-4837-99ca-490d96a1cfb2	f5488396-8c9a-4479-89d8-b70181bfa61d	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
55081d48-6d7b-4a30-b442-9da83e4b272e	65e56047-4eae-4837-99ca-490d96a1cfb2	c20ef665-5b0f-4886-95ab-236c5828a20e	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
948f14dd-7e34-4949-95c3-1f07ab32583d	65e56047-4eae-4837-99ca-490d96a1cfb2	6645d2d9-2f7a-4dc3-a82f-0b6b556dc29d	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
01ba2f73-8fcf-4a43-b482-40fffc955f1e	65e56047-4eae-4837-99ca-490d96a1cfb2	ca036853-ced3-4ce8-bfc1-d45eb7be1f35	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
e850f121-3b13-432b-a78a-2094c5845178	65e56047-4eae-4837-99ca-490d96a1cfb2	b83dca8f-edc6-4c99-882d-4c5be56d1701	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
63bbf32f-976d-4618-87d0-9e1e6caabb77	65e56047-4eae-4837-99ca-490d96a1cfb2	3b25a41a-4d7a-405a-a97f-9ebbd7f5f6e0	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
746a275c-2237-4543-8996-3ff459c109fe	65e56047-4eae-4837-99ca-490d96a1cfb2	8d1dd81d-a357-45a6-9afa-dafb457ac560	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
71b20d5f-8722-4037-ae90-6bf8b14ebc6a	65e56047-4eae-4837-99ca-490d96a1cfb2	87a550f5-fdd2-4f87-95aa-904ea1604fbb	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
cf38e860-b43d-4e11-8e17-9ce903cbfaaf	65e56047-4eae-4837-99ca-490d96a1cfb2	1e768aaf-45d9-4035-942b-e8c5e97b3012	2025-07-26 15:00:01.738	2025-07-26 15:00:01.738
66a27fd2-dae1-4436-a8a0-6c9a7f166b31	58fd5636-f09c-4894-bada-10e5b66625ab	f5488396-8c9a-4479-89d8-b70181bfa61d	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
0b48600d-c9ff-4f25-b71d-d7667b6e1aa2	58fd5636-f09c-4894-bada-10e5b66625ab	8225b2d0-11bf-4cb5-aca1-14287a1f1c53	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
16d05835-ff2a-484c-9726-0c4cbfbe66bc	58fd5636-f09c-4894-bada-10e5b66625ab	64fe9845-9627-40d7-9c33-ea38a95ae747	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
22e1c7e6-6452-4748-b7e0-b32381e4512b	58fd5636-f09c-4894-bada-10e5b66625ab	6645d2d9-2f7a-4dc3-a82f-0b6b556dc29d	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
a626e055-286c-488a-bc31-5d22c9fc2948	58fd5636-f09c-4894-bada-10e5b66625ab	592faba6-5882-437c-a9a0-05ffd4de601d	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
41163ba7-4264-48f3-a41c-a2eb4b214806	58fd5636-f09c-4894-bada-10e5b66625ab	ca036853-ced3-4ce8-bfc1-d45eb7be1f35	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
ffb53bd2-0ade-48ec-88eb-42a6abd85e55	58fd5636-f09c-4894-bada-10e5b66625ab	1988aa8c-2673-4f7f-a907-89df44bb5074	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
21320e8f-8516-4d88-93e0-a2a563f2ef57	58fd5636-f09c-4894-bada-10e5b66625ab	ea635f68-966a-46df-acc6-56abbc568762	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
d68ee61e-373f-41df-ba22-d69f456136b3	58fd5636-f09c-4894-bada-10e5b66625ab	c3455dcc-2c25-483c-af7b-78f54ca98d5e	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
d503ad2f-efbd-4958-901c-7a30b000adc1	58fd5636-f09c-4894-bada-10e5b66625ab	f50ad570-d2ab-4c5d-8cc7-4eef6e99fff3	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
7f9bda47-bd89-4ac6-8cb8-cd51c6e9374d	58fd5636-f09c-4894-bada-10e5b66625ab	3e8cad48-40cb-4240-80d9-85f7fcb990b6	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
afe141d9-86e5-4252-96b6-b1fa78604831	58fd5636-f09c-4894-bada-10e5b66625ab	87a550f5-fdd2-4f87-95aa-904ea1604fbb	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
f29cabed-de22-4b08-817b-70916bbd8ac6	58fd5636-f09c-4894-bada-10e5b66625ab	8d1dd81d-a357-45a6-9afa-dafb457ac560	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
987342cb-1a7b-4135-98fb-b83acd4d7e0f	58fd5636-f09c-4894-bada-10e5b66625ab	18b38b50-b9c7-4aaf-aa28-77c56f6cabae	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
c26dad08-c7e2-4102-85f2-b4ddf053e11a	58fd5636-f09c-4894-bada-10e5b66625ab	e5fc879c-e9aa-4869-990b-6cb328d20925	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
902752bb-9240-4662-a2e2-8ddcf7a69b1e	58fd5636-f09c-4894-bada-10e5b66625ab	1e768aaf-45d9-4035-942b-e8c5e97b3012	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
6f786ae0-31d3-48af-a25e-bbe0d102aadf	58fd5636-f09c-4894-bada-10e5b66625ab	a1b831ed-83d6-4bc7-b7e4-d62554872280	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
9fca554f-6f63-45d2-a44e-38fe529b69b9	58fd5636-f09c-4894-bada-10e5b66625ab	76e88d22-c1d1-4ccb-b243-38522b60b35f	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
a5b344b0-a3b7-4027-ac72-06135a66697c	58fd5636-f09c-4894-bada-10e5b66625ab	cba48378-80a3-4668-b379-092d37b725de	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
3082c28b-c624-4797-9af3-f45af6ec1474	58fd5636-f09c-4894-bada-10e5b66625ab	cdb7c83d-ec47-4072-8704-9553ca348cbc	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
2d7a9731-2971-4f9a-bc00-efe54941a636	58fd5636-f09c-4894-bada-10e5b66625ab	7e3ad7ce-53ab-4e66-9df7-857fa84d4522	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
dd75ae93-61e6-4506-b9f6-77a2bbdda40c	58fd5636-f09c-4894-bada-10e5b66625ab	763bd38d-7bac-4e5e-ba33-8d2a5c587507	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
33296bdd-d072-4686-82e3-58dfb88b3cd3	58fd5636-f09c-4894-bada-10e5b66625ab	3b25a41a-4d7a-405a-a97f-9ebbd7f5f6e0	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
eff9d51a-2b68-477c-b985-854b7c95b428	58fd5636-f09c-4894-bada-10e5b66625ab	5b978148-bf44-4073-adcc-532f958cbdd9	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
96c01b94-e782-443c-b4bd-0e0d2cf6f48b	58fd5636-f09c-4894-bada-10e5b66625ab	c20ef665-5b0f-4886-95ab-236c5828a20e	2025-07-26 15:35:06.159	2025-07-26 15:35:06.159
7dd53af2-1d17-4e02-ab26-aa6e4bf2a2d1	65e56047-4eae-4837-99ca-490d96a1cfb2	12546f3f-9617-4641-be2e-f2afe0fb9ef5	2025-07-26 23:09:55.68	2025-07-26 23:09:55.68
\.


--
-- Data for Name: ProblemSolved; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."ProblemSolved" (id, "userId", "problemId", "createdAt", "updatedAt") FROM stdin;
8c7a267d-9920-4578-9907-eb35c323acf9	7177a6c7-b397-49e2-a7f7-c50d779154f1	d773532a-3fbb-4418-9e3b-ed3636de0b87	2025-06-22 10:16:38.225	2025-06-22 10:16:38.225
a2b180d9-623f-4504-9697-39a89f4e0096	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	2025-07-06 13:01:50.77	2025-07-06 13:01:50.77
63842f1e-777c-4730-b584-9cea09102629	2a179277-32c9-4853-a8c2-3d2de754781d	ba19c1cc-df9b-42ee-a0f7-e598e200de13	2025-07-14 14:31:44.418	2025-07-14 14:31:44.418
047e94f4-3330-4823-b579-ec821d1a6683	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	2025-07-15 07:53:32.278	2025-07-15 07:53:32.278
cceaf239-9e4b-47d9-9fed-7bf1f7a2059b	2a179277-32c9-4853-a8c2-3d2de754781d	c3455dcc-2c25-483c-af7b-78f54ca98d5e	2025-07-17 17:31:54.907	2025-07-17 17:31:54.907
d4255c16-6ba5-4469-b33e-983de5aa78e5	2a179277-32c9-4853-a8c2-3d2de754781d	380fe475-e22b-49fc-aec5-d9796ebc2a9d	2025-07-24 21:35:18.334	2025-07-24 21:35:18.334
c520ee3f-e21f-45a1-bad5-370a99a70aac	2a179277-32c9-4853-a8c2-3d2de754781d	cdb7c83d-ec47-4072-8704-9553ca348cbc	2025-07-24 21:56:51.868	2025-07-24 21:56:51.868
c6bd4891-7e83-48c9-a6b5-b31c4e2958ae	2a179277-32c9-4853-a8c2-3d2de754781d	12546f3f-9617-4641-be2e-f2afe0fb9ef5	2025-07-24 22:08:10.755	2025-07-24 22:08:10.755
439c30da-4dbf-4e43-a395-c8177294f9d7	2a179277-32c9-4853-a8c2-3d2de754781d	5b978148-bf44-4073-adcc-532f958cbdd9	2025-07-27 17:15:36.808	2025-07-27 17:15:36.808
\.


--
-- Data for Name: Submission; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."Submission" (id, "userId", "problemId", "sourceCode", language, stdin, stdout, stderr, "compileOutput", status, memory, "time", "createdAt", "updatedAt") FROM stdin;
8b4e6651-5637-48c2-93ed-52f3d6952e01	7177a6c7-b397-49e2-a7f7-c50d779154f1	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\nconst input = fs.readFileSync(0, 'utf-8');\\nconst [a, b] = input.trim().split(' ').map(Number);\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["8240 KB","8548 KB","6872 KB"]	["0.517 s","0.522 s","0.327 s"]	2025-06-22 10:13:32.236	2025-06-22 10:13:32.236
4c8eccef-9783-4787-b4e7-f91cd7813633	7177a6c7-b397-49e2-a7f7-c50d779154f1	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\nconst input = fs.readFileSync(0, 'utf-8');\\nconst [a, b] = input.trim().split(' ').map(Number);\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["9532 KB","9024 KB","9364 KB"]	["0.416 s","0.419 s","0.398 s"]	2025-06-22 10:16:38.186	2025-06-22 10:16:38.186
80c3dce8-7363-4db9-9582-1ad8a3ea4e60	7177a6c7-b397-49e2-a7f7-c50d779154f1	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\nconst input = fs.readFileSync(0, 'utf-8');\\nconst [a, b] = input.trim().split(' ').map(Number);\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["6940 KB","7232 KB","7048 KB"]	["0.259 s","0.263 s","0.257 s"]	2025-06-22 10:19:56.815	2025-06-22 10:19:56.815
0b03a0ee-062c-4b56-a31d-c4760f453e98	7177a6c7-b397-49e2-a7f7-c50d779154f1	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\nconst input = fs.readFileSync(0, 'utf-8');\\nconst [a, b] = input.trim().split(' ').map(Number);\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["19236 KB","10076 KB","18264 KB"]	["0.242 s","0.186 s","0.234 s"]	2025-06-22 17:47:23.151	2025-06-22 17:47:23.151
57a2ef11-cb74-40fe-8b82-ccc3dc6893d2	7177a6c7-b397-49e2-a7f7-c50d779154f1	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\nconst input = fs.readFileSync(0, 'utf-8');\\nconst [a, b] = input.trim().split(' ').map(Number);\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["6928 KB","7216 KB","6956 KB"]	["0.082 s","0.071 s","0.062 s"]	2025-06-22 17:47:26.428	2025-06-22 17:47:26.428
b8a5581f-48ca-4d5d-b3bd-eb6ca481e458	7177a6c7-b397-49e2-a7f7-c50d779154f1	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\nconst input = fs.readFileSync(0, 'utf-8');\\nconst [a, b] = input.trim().split(' ').map(Number);\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["7680 KB","6944 KB","6992 KB"]	["0.085 s","0.078 s","0.066 s"]	2025-06-22 17:47:30.04	2025-06-22 17:47:30.04
eeb28d73-5023-42e3-a2b1-a1067fe1099b	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"# Read input and print the sum of two numbers\\nimport sys\\n\\n# Read entire input from stdin\\ninput_line = sys.stdin.read()\\n\\n# Split and convert to integers\\na, b = map(int, input_line.strip().split())\\n\\n# Print the result\\nprint(a + b)"	PYTHON	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["3392 KB","5932 KB","3256 KB"]	["0.017 s","0.023 s","0.019 s"]	2025-07-06 13:01:50.765	2025-07-06 13:01:50.765
e79836a9-92ac-4666-9877-37f20db8b0c9	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["7228 KB","11772 KB","10968 KB"]	["0.035 s","0.125 s","0.124 s"]	2025-07-06 13:01:59.625	2025-07-06 13:01:59.625
693f55ac-7dff-4815-91a3-5971098abba6	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["6888 KB","6836 KB","6840 KB"]	["0.069 s","0.1 s","0.075 s"]	2025-07-06 13:02:16.068	2025-07-06 13:02:16.068
8ed9624d-426c-452b-80f0-df8b24cc37ad	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["15836 KB","15824 KB","16040 KB"]	["0.194 s","0.192 s","0.198 s"]	2025-07-07 08:48:01.976	2025-07-07 08:48:01.976
b0025824-f56a-49da-a5aa-909eeea147a2	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["16272 KB","16080 KB","15100 KB"]	["0.141 s","0.142 s","0.145 s"]	2025-07-07 08:56:47.501	2025-07-07 08:56:47.501
6380c40e-54d9-4c63-872c-b06b8cb8e6b0	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["6788 KB","6848 KB","6904 KB"]	["0.136 s","0.135 s","0.136 s"]	2025-07-07 08:57:03.546	2025-07-07 08:57:03.546
2dc7aa7b-09ea-4727-9046-731b5f807036	2a179277-32c9-4853-a8c2-3d2de754781d	ba19c1cc-df9b-42ee-a0f7-e598e200de13	"const readline = require('readline');\\r\\n\\r\\nconst rl = readline.createInterface({\\r\\n  input: process.stdin,\\r\\n  output: process.stdout,\\r\\n  terminal: false\\r\\n});\\r\\n\\r\\nrl.on('line', (line) => {\\r\\n  const nums = JSON.parse(line.trim());\\r\\n  const result = maxSubArray(nums);\\r\\n  console.log(result);\\r\\n  rl.close();\\r\\n});\\r\\n\\r\\nfunction maxSubArray(nums) {\\r\\n  if (nums.length === 0) return 0;\\r\\n\\r\\n  let maxSoFar = nums[0];\\r\\n  let currentMax = nums[0];\\r\\n\\r\\n  for (let i = 1; i < nums.length; i++) {\\r\\n    currentMax = Math.max(nums[i], currentMax + nums[i]);\\r\\n    maxSoFar = Math.max(maxSoFar, currentMax);\\r\\n  }\\r\\n\\r\\n  return maxSoFar;\\r\\n}\\r\\n"	JAVASCRIPT	[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]	["6","1","23"]	\N	\N	Accepted	["17532 KB","15088 KB","15572 KB"]	["0.238 s","0.232 s","0.244 s"]	2025-07-14 14:31:44.383	2025-07-14 14:31:44.383
561691f1-2d77-47c8-af34-663b5eb80f78	2a179277-32c9-4853-a8c2-3d2de754781d	ba19c1cc-df9b-42ee-a0f7-e598e200de13	"import java.util.*;\\r\\nimport java.io.*;\\r\\n\\r\\npublic class Main {\\r\\n    public int maxSubArray(int[] nums) {\\r\\n        int maxSoFar = nums[0];\\r\\n        int currentMax = nums[0];\\r\\n        \\r\\n        for (int i = 1; i < nums.length; i++) {\\r\\n            currentMax = Math.max(nums[i], currentMax + nums[i]);\\r\\n            maxSoFar = Math.max(maxSoFar, currentMax);\\r\\n        }\\r\\n        \\r\\n        return maxSoFar;\\r\\n    }\\r\\n\\r\\n    public static void main(String[] args) throws Exception {\\r\\n        Scanner scanner = new Scanner(System.in);\\r\\n        String input = scanner.nextLine().trim();\\r\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]]\\", \\"\\");  // Remove brackets if input like \\"[1,-2,3]\\"\\r\\n        String[] parts = input.split(\\",\\");\\r\\n        int[] nums = Arrays.stream(parts).mapToInt(Integer::parseInt).toArray();\\r\\n\\r\\n        Main main = new Main();\\r\\n        int result = main.maxSubArray(nums);\\r\\n\\r\\n        System.out.println(result);\\r\\n        scanner.close();\\r\\n    }\\r\\n}\\r\\n"	JAVA	[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]	["6","1","23"]	\N	\N	Accepted	["30108 KB","25720 KB","24732 KB"]	["0.175 s","0.133 s","0.175 s"]	2025-07-14 14:44:36.329	2025-07-14 14:44:36.329
2f9a7326-d12a-4719-8611-ddb6e0f300af	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["12836 KB","13692 KB","13284 KB"]	["0.225 s","0.236 s","0.241 s"]	2025-07-14 15:19:13.891	2025-07-14 15:19:13.891
e2d5cb66-1ae3-4a56-bbf5-a4e13a6e7a28	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["12820 KB","12624 KB","12736 KB"]	["0.14 s","0.135 s","0.141 s"]	2025-07-14 15:43:05.935	2025-07-14 15:43:05.935
7da1a004-92a0-4494-9ee9-8a67086258c6	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["13520 KB","12896 KB","13196 KB"]	["0.158 s","0.163 s","0.186 s"]	2025-07-14 15:43:43.111	2025-07-14 15:43:43.111
353cca5d-6857-4366-b3a7-4bf95fe39225	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["26400 KB","26032 KB","25900 KB"]	["0.276 s","0.279 s","0.282 s"]	2025-07-15 07:53:32.228	2025-07-15 07:53:32.228
32548210-45f4-4003-a9fc-06eb09ddcae7	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["16072 KB","15568 KB","15568 KB"]	["0.37 s","0.372 s","0.336 s"]	2025-07-15 08:13:58.844	2025-07-15 08:13:58.844
02916817-a956-4caf-a8bc-89b79b3a8404	56100fd2-2245-45c6-9343-574316fc07ae	c20ef665-5b0f-4886-95ab-236c5828a20e	"import java.util.Scanner;\\n  \\n  class Main {\\n    public int climbStairs(int n) {\\n        // Write your code here\\n        return 0;\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = Integer.parseInt(scanner.nextLine().trim());\\n        \\n        // Use Main class instead of Solution\\n        Main main = new Main();\\n        int result = main.climbStairs(n);\\n        \\n        System.out.println(result);\\n        scanner.close();\\n    }\\n  }"	JAVA	2\n3\n4	["0","0","0"]	\N	\N	Wrong Answer	["28180 KB","26800 KB","24228 KB"]	["0.176 s","0.179 s","0.179 s"]	2025-07-15 08:23:51.625	2025-07-15 08:23:51.625
359f0b30-1833-463a-bcd7-6cd67d6d8052	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"# Read input and print the sum of two numbers\\nimport sys\\n\\n# Read entire input from stdin\\ninput_line = sys.stdin.read()\\n\\n# Split and convert to integers\\na, b = map(int, input_line.strip().split())\\n\\n# Print the result\\nprint(a + b)"	PYTHON	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["3328 KB","7328 KB","4384 KB"]	["0.033 s","0.059 s","0.041 s"]	2025-07-15 08:24:11.812	2025-07-15 08:24:11.812
74c560f5-6dd4-41df-b4a1-aa03a4012ec6	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"# Read input and print the sum of two numbers\\nimport sys\\n\\n# Read entire input from stdin\\ninput_line = sys.stdin.read()\\n\\n# Split and convert to integers\\na, b = map(int, input_line.strip().split())\\n\\n# Print the result\\nprint(a + b)"	PYTHON	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["3232 KB","3232 KB","3284 KB"]	["0.11 s","0.11 s","0.092 s"]	2025-07-15 08:31:36.519	2025-07-15 08:31:36.519
c52c41de-4c95-47e2-9658-e074785037b0	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["14068 KB","14400 KB","13864 KB"]	["0.161 s","0.152 s","0.154 s"]	2025-07-15 08:36:21.93	2025-07-15 08:36:21.93
cb941cd3-ddfd-4085-ac87-815eaab6e400	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["12532 KB","12348 KB","12660 KB"]	["0.189 s","0.193 s","0.201 s"]	2025-07-15 08:36:56.713	2025-07-15 08:36:56.713
5cf1e9ff-0e9c-41fc-b031-28286ab5d963	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["13244 KB","13604 KB","12832 KB"]	["0.325 s","0.333 s","0.315 s"]	2025-07-15 08:41:18.146	2025-07-15 08:41:18.146
6f61ad54-4841-4233-a536-72895258b120	56100fd2-2245-45c6-9343-574316fc07ae	ba19c1cc-df9b-42ee-a0f7-e598e200de13	"import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public int maxSubArray(int[] nums) {\\n        // Implement your solution here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws Exception {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]]\\", \\"\\");\\n        String[] parts = input.split(\\",\\");\\n        int[] nums = Arrays.stream(parts).mapToInt(Integer::parseInt).toArray();\\n\\n        Main main = new Main();\\n        int result = main.maxSubArray(nums);\\n\\n        System.out.println(result);\\n        scanner.close();\\n    }\\n}\\n"	JAVA	[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]	["0","0","0"]	\N	\N	Wrong Answer	["12676 KB","12824 KB","14788 KB"]	["0.183 s","0.196 s","0.225 s"]	2025-07-15 08:42:50.068	2025-07-15 08:42:50.068
ea70c4d9-5e0c-4b8b-b49c-6fb77108fc5c	56100fd2-2245-45c6-9343-574316fc07ae	ba19c1cc-df9b-42ee-a0f7-e598e200de13	"import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public int maxSubArray(int[] nums) {\\n        // Implement your solution here\\n        return 0;\\n    }\\n\\n    public static void main(String[] args) throws Exception {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]]\\", \\"\\");\\n        String[] parts = input.split(\\",\\");\\n        int[] nums = Arrays.stream(parts).mapToInt(Integer::parseInt).toArray();\\n\\n        Main main = new Main();\\n        int result = main.maxSubArray(nums);\\n\\n        System.out.println(result);\\n        scanner.close();\\n    }\\n}\\n"	JAVA	[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]	["0","0","0"]	\N	\N	Wrong Answer	["15776 KB","13512 KB","12976 KB"]	["0.21 s","0.208 s","0.202 s"]	2025-07-15 08:43:24.762	2025-07-15 08:43:24.762
89641b2c-6672-44f7-83ee-68f8d46145b5	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["13128 KB","13456 KB","12536 KB"]	["0.202 s","0.193 s","0.196 s"]	2025-07-15 08:43:43.376	2025-07-15 08:43:43.376
18e13b75-2073-425c-8fab-0f887b01b83a	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + bnnl);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["","",""]	\N	["Main.java:14: error: cannot find symbol\\n    System.out.println(a + bnnl);\\n                           ^\\n  symbol:   variable bnnl\\n  location: class Main\\n1 error\\n","Main.java:14: error: cannot find symbol\\n    System.out.println(a + bnnl);\\n                           ^\\n  symbol:   variable bnnl\\n  location: class Main\\n1 error\\n","Main.java:14: error: cannot find symbol\\n    System.out.println(a + bnnl);\\n                           ^\\n  symbol:   variable bnnl\\n  location: class Main\\n1 error\\n"]	Wrong Answer	\N	\N	2025-07-15 08:43:55.498	2025-07-15 08:43:55.498
d650848d-6bc3-42d5-8ec5-78f15b9bc866	56100fd2-2245-45c6-9343-574316fc07ae	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["12820 KB","12684 KB","14428 KB"]	["0.206 s","0.21 s","0.217 s"]	2025-07-15 08:49:55.136	2025-07-15 08:49:55.136
7411c1bd-4437-4eda-8fc0-c206766b166e	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["27356 KB","27212 KB","24716 KB"]	["0.185 s","0.189 s","0.191 s"]	2025-07-16 19:41:11.966	2025-07-16 19:41:11.966
4fa2e5ce-54bd-4d73-a88b-eae26b8530c7	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["12732 KB","15928 KB","13352 KB"]	["0.134 s","0.143 s","0.147 s"]	2025-07-23 08:37:02.046	2025-07-23 08:37:02.046
931fdb65-cfcd-4f11-b426-71c040887ec2	2a179277-32c9-4853-a8c2-3d2de754781d	c20ef665-5b0f-4886-95ab-236c5828a20e	"import java.util.Scanner;\\n  \\n  class Main {\\n    public int climbStairs(int n) {\\n        // Write your code here\\n        return 0;\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        int n = Integer.parseInt(scanner.nextLine().trim());\\n        \\n        // Use Main class instead of Solution\\n        Main main = new Main();\\n        int result = main.climbStairs(n);\\n        \\n        System.out.println(result);\\n        scanner.close();\\n    }\\n  }"	JAVA	2\n3\n4	["0","0","0"]	\N	\N	Wrong Answer	["13928 KB","13528 KB","13512 KB"]	["0.221 s","0.239 s","0.255 s"]	2025-07-16 19:43:12.12	2025-07-16 19:43:12.12
a1c27c5c-955d-4e19-a6ba-fb267787904c	2a179277-32c9-4853-a8c2-3d2de754781d	c3455dcc-2c25-483c-af7b-78f54ca98d5e	"import java.util.*;\\nimport java.io.*;\\n\\n// Definition for singly-linked list\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\npublic class Main {\\n    public static ListNode mergeKLists(ListNode[] lists) {\\n        // Implement your solution here\\n        return null;\\n    }\\n    \\n    // Helper function to convert array to linked list\\n    public static ListNode arrayToList(int[] arr) {\\n        if (arr == null || arr.length == 0) return null;\\n        ListNode head = new ListNode(arr[0]);\\n        ListNode current = head;\\n        for (int i = 1; i < arr.length; i++) {\\n            current.next = new ListNode(arr[i]);\\n            current = current.next;\\n        }\\n        return head;\\n    }\\n    \\n    // Helper function to convert linked list to array\\n    public static List<Integer> listToArray(ListNode head) {\\n        List<Integer> result = new ArrayList<>();\\n        while (head != null) {\\n            result.add(head.val);\\n            head = head.next;\\n        }\\n        return result;\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine();\\n        \\n        // Parse input (simplified for this example)\\n        // Handle JSON-like input: [[1,4,5],[1,3,4],[2,6]]\\n        input = input.trim();\\n        \\n        if (input.equals(\\"[]\\")) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n        \\n        List<ListNode> lists = new ArrayList<>();\\n        // Simple parsing for the example\\n        // In practice, you'd need more robust JSON parsing\\n        \\n        ListNode result = mergeKLists(lists.toArray(new ListNode[0]));\\n        System.out.println(listToArray(result));\\n    }\\n}"	JAVA	[[1,4,5],[1,3,4],[2,6]]\n[]	["[]","[]"]	\N	\N	Wrong Answer	["33748 KB","33768 KB"]	["0.147 s","0.161 s"]	2025-07-17 17:25:40.343	2025-07-17 17:25:40.343
d6c85b02-1de3-4746-9b2f-aed2d72abefd	2a179277-32c9-4853-a8c2-3d2de754781d	c3455dcc-2c25-483c-af7b-78f54ca98d5e	"import java.util.*;\\nimport java.io.*;\\n\\n// Definition for singly-linked list\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\npublic class Main {\\n    \\n    public static ListNode mergeKLists(ListNode[] lists) {\\n        if (lists == null || lists.length == 0) return null;\\n\\n        // Use PriorityQueue (min-heap) to always get the smallest head node\\n        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));\\n\\n        // Add all the list heads into the minHeap\\n        for (ListNode node : lists) {\\n            if (node != null) {\\n                minHeap.offer(node);\\n            }\\n        }\\n\\n        // Dummy head for result list\\n        ListNode dummy = new ListNode(0);\\n        ListNode current = dummy;\\n\\n        while (!minHeap.isEmpty()) {\\n            ListNode minNode = minHeap.poll();\\n            current.next = minNode;\\n            current = current.next;\\n\\n            // If there's more nodes in that list, add the next one to heap\\n            if (minNode.next != null) {\\n                minHeap.offer(minNode.next);\\n            }\\n        }\\n\\n        return dummy.next;\\n    }\\n    \\n    // Helper function to convert array to linked list\\n    public static ListNode arrayToList(int[] arr) {\\n        if (arr == null || arr.length == 0) return null;\\n        ListNode head = new ListNode(arr[0]);\\n        ListNode current = head;\\n        for (int i = 1; i < arr.length; i++) {\\n            current.next = new ListNode(arr[i]);\\n            current = current.next;\\n        }\\n        return head;\\n    }\\n\\n    // Helper function to convert linked list to array\\n    public static List<Integer> listToArray(ListNode head) {\\n        List<Integer> result = new ArrayList<>();\\n        while (head != null) {\\n            result.add(head.val);\\n            head = head.next;\\n        }\\n        return result;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine().trim();\\n\\n        // Example Input: [[1,4,5],[1,3,4],[2,6]]\\n        if (input.equals(\\"[]\\")) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n\\n        // Remove brackets and split\\n        input = input.substring(1, input.length() - 1); // Remove outer brackets\\n        String[] parts = input.split(\\"],\\\\\\\\[\\");\\n        List<ListNode> lists = new ArrayList<>();\\n\\n        for (String part : parts) {\\n            part = part.replace(\\"[\\", \\"\\").replace(\\"]\\", \\"\\").trim();\\n            if (part.isEmpty()) {\\n                lists.add(null);\\n            } else {\\n                String[] nums = part.split(\\",\\");\\n                int[] intArr = Arrays.stream(nums).mapToInt(Integer::parseInt).toArray();\\n                lists.add(arrayToList(intArr));\\n            }\\n        }\\n\\n        ListNode result = mergeKLists(lists.toArray(new ListNode[0]));\\n        System.out.println(listToArray(result));\\n    }\\n}\\n"	JAVA	[[1,4,5],[1,3,4],[2,6]]\n[]	["[1, 1, 2, 3, 4, 4, 5, 6]","[]"]	\N	\N	Wrong Answer	["12924 KB","14260 KB"]	["0.177 s","0.17 s"]	2025-07-17 17:27:00.888	2025-07-17 17:27:00.888
c5c31f24-ef3f-40c3-ab8d-85115a1884a9	2a179277-32c9-4853-a8c2-3d2de754781d	c3455dcc-2c25-483c-af7b-78f54ca98d5e	"import java.util.*;\\nimport java.io.*;\\n\\n// Definition for singly-linked list\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\npublic class Main {\\n    \\n    public static ListNode mergeKLists(ListNode[] lists) {\\n        if (lists == null || lists.length == 0) return null;\\n\\n        // Use PriorityQueue (min-heap) to always get the smallest head node\\n        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));\\n\\n        // Add all the list heads into the minHeap\\n        for (ListNode node : lists) {\\n            if (node != null) {\\n                minHeap.offer(node);\\n            }\\n        }\\n\\n        // Dummy head for result list\\n        ListNode dummy = new ListNode(0);\\n        ListNode current = dummy;\\n\\n        while (!minHeap.isEmpty()) {\\n            ListNode minNode = minHeap.poll();\\n            current.next = minNode;\\n            current = current.next;\\n\\n            // If there's more nodes in that list, add the next one to heap\\n            if (minNode.next != null) {\\n                minHeap.offer(minNode.next);\\n            }\\n        }\\n\\n        return dummy.next;\\n    }\\n    \\n    // Helper function to convert array to linked list\\n    public static ListNode arrayToList(int[] arr) {\\n        if (arr == null || arr.length == 0) return null;\\n        ListNode head = new ListNode(arr[0]);\\n        ListNode current = head;\\n        for (int i = 1; i < arr.length; i++) {\\n            current.next = new ListNode(arr[i]);\\n            current = current.next;\\n        }\\n        return head;\\n    }\\n\\n    // Helper function to convert linked list to array\\n    public static List<Integer> listToArray(ListNode head) {\\n        List<Integer> result = new ArrayList<>();\\n        while (head != null) {\\n            result.add(head.val);\\n            head = head.next;\\n        }\\n        return result;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine().trim();\\n\\n        // Example Input: [[1,4,5],[1,3,4],[2,6]]\\n        if (input.equals(\\"[]\\")) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n\\n        // Remove brackets and split\\n        input = input.substring(1, input.length() - 1); // Remove outer brackets\\n        String[] parts = input.split(\\"],\\\\\\\\[\\");\\n        List<ListNode> lists = new ArrayList<>();\\n\\n        for (String part : parts) {\\n            part = part.replace(\\"[\\", \\"\\").replace(\\"]\\", \\"\\").trim();\\n            if (part.isEmpty()) {\\n                lists.add(null);\\n            } else {\\n                String[] nums = part.split(\\",\\");\\n                int[] intArr = Arrays.stream(nums).mapToInt(Integer::parseInt).toArray();\\n                lists.add(arrayToList(intArr));\\n            }\\n        }\\n\\n        ListNode result = mergeKLists(lists.toArray(new ListNode[0]));\\n        System.out.print(\\"[\\");\\nList<Integer> output = listToArray(result);\\nfor (int i = 0; i < output.size(); i++) {\\n    System.out.print(output.get(i));\\n    if (i < output.size() - 1) System.out.print(\\",\\");\\n}\\nSystem.out.println(\\"]\\");\\n    }\\n}\\n"	JAVA	[[1,4,5],[1,3,4],[2,6]]\n[]	["[1,1,2,3,4,4,5,6]","[]"]	\N	\N	Accepted	["14896 KB","13596 KB"]	["0.169 s","0.141 s"]	2025-07-17 17:31:54.872	2025-07-17 17:31:54.872
cd8e42ed-2ae8-48c7-8722-859b787406d6	2a179277-32c9-4853-a8c2-3d2de754781d	c3455dcc-2c25-483c-af7b-78f54ca98d5e	"import java.util.*;\\nimport java.io.*;\\n\\n// Definition for singly-linked list\\nclass ListNode {\\n    int val;\\n    ListNode next;\\n    ListNode() {}\\n    ListNode(int val) { this.val = val; }\\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n}\\n\\npublic class Main {\\n    // Merge k sorted lists using divide and conquer\\n    public static ListNode mergeKLists(ListNode[] lists) {\\n        if (lists == null || lists.length == 0) return null;\\n        \\n        while (lists.length > 1) {\\n            List<ListNode> mergedLists = new ArrayList<>();\\n            for (int i = 0; i < lists.length; i += 2) {\\n                ListNode l1 = lists[i];\\n                ListNode l2 = (i + 1 < lists.length) ? lists[i + 1] : null;\\n                mergedLists.add(mergeTwoLists(l1, l2));\\n            }\\n            lists = mergedLists.toArray(new ListNode[0]);\\n        }\\n        return lists[0];\\n    }\\n    \\n    // Helper to merge two sorted linked lists\\n    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode dummy = new ListNode(0);\\n        ListNode current = dummy;\\n        \\n        while (l1 != null && l2 != null) {\\n            if (l1.val <= l2.val) {\\n                current.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                current.next = l2;\\n                l2 = l2.next;\\n            }\\n            current = current.next;\\n        }\\n        current.next = (l1 != null) ? l1 : l2;\\n        return dummy.next;\\n    }\\n    \\n    // Helper function to convert array to linked list\\n    public static ListNode arrayToList(int[] arr) {\\n        if (arr == null || arr.length == 0) return null;\\n        ListNode head = new ListNode(arr[0]);\\n        ListNode current = head;\\n        for (int i = 1; i < arr.length; i++) {\\n            current.next = new ListNode(arr[i]);\\n            current = current.next;\\n        }\\n        return head;\\n    }\\n    \\n    // Helper function to convert linked list to array\\n    public static List<Integer> listToArray(ListNode head) {\\n        List<Integer> result = new ArrayList<>();\\n        while (head != null) {\\n            result.add(head.val);\\n            head = head.next;\\n        }\\n        return result;\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine().trim();\\n        \\n        if (input.equals(\\"[]\\")) {\\n            System.out.println(\\"[]\\");\\n            return;\\n        }\\n        \\n        // Remove outer brackets and split input to parse each inner list\\n        // Example input: [[1,4,5],[1,3,4],[2,6]]\\n        input = input.substring(2, input.length() - 2); // remove [[ and ]]\\n        String[] parts = input.split(\\"\\\\\\\\],\\\\\\\\[\\");\\n        \\n        List<ListNode> lists = new ArrayList<>();\\n        for (String part : parts) {\\n            if (part.trim().isEmpty()) {\\n                lists.add(null);\\n                continue;\\n            }\\n            String[] nums = part.split(\\",\\");\\n            int[] arr = Arrays.stream(nums)\\n                              .map(String::trim)\\n                              .mapToInt(Integer::parseInt)\\n                              .toArray();\\n            lists.add(arrayToList(arr));\\n        }\\n        \\n        ListNode result = mergeKLists(lists.toArray(new ListNode[0]));\\n        System.out.println(listToArray(result).toString().replace(\\" \\", \\"\\"));\\n    }\\n}\\n"	JAVA	[[1,4,5],[1,3,4],[2,6]]\n[]	["[1,1,2,3,4,4,5,6]","[]"]	\N	\N	Accepted	["13688 KB","13460 KB"]	["0.254 s","0.254 s"]	2025-07-18 10:57:57.235	2025-07-18 10:57:57.235
81fb4e82-89a3-4456-9ff6-9d0dec038a2b	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["14196 KB","16028 KB","17488 KB"]	["0.165 s","0.167 s","0.192 s"]	2025-07-23 08:37:27.14	2025-07-23 08:37:27.14
af6d2ec0-df19-4d18-a389-32ef072d8ddc	2a179277-32c9-4853-a8c2-3d2de754781d	c3455dcc-2c25-483c-af7b-78f54ca98d5e	"# Definition for singly-linked list\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def mergeKLists(self, lists):\\n        if not lists:\\n            return None\\n        \\n        # Keep merging pairs of lists until only one list remains\\n        while len(lists) > 1:\\n            merged_lists = []\\n            for i in range(0, len(lists), 2):\\n                l1 = lists[i]\\n                l2 = lists[i+1] if i + 1 < len(lists) else None\\n                merged_lists.append(self.mergeTwoLists(l1, l2))\\n            lists = merged_lists\\n        return lists[0]\\n    \\n    def mergeTwoLists(self, l1, l2):\\n        dummy = ListNode(0)\\n        current = dummy\\n        \\n        while l1 and l2:\\n            if l1.val <= l2.val:\\n                current.next = l1\\n                l1 = l1.next\\n            else:\\n                current.next = l2\\n                l2 = l2.next\\n            current = current.next\\n        \\n        current.next = l1 if l1 else l2\\n        return dummy.next\\n\\n# Helper function to convert array to linked list\\ndef array_to_list(arr):\\n    if not arr:\\n        return None\\n    head = ListNode(arr[0])\\n    current = head\\n    for i in range(1, len(arr)):\\n        current.next = ListNode(arr[i])\\n        current = current.next\\n    return head\\n\\n# Helper function to convert linked list to array\\ndef list_to_array(head):\\n    result = []\\n    while head:\\n        result.append(head.val)\\n        head = head.next\\n    return result\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    import json\\n    \\n    input_line = sys.stdin.readline().strip()\\n    \\n    # Parse input - handle both JSON and string formats\\n    if input_line.startswith('[[') and input_line.endswith(']]'):\\n        # Remove outer brackets and split by '],['\\n        input_line = input_line[2:-2]  # Remove [[ and ]]\\n        if input_line == '':\\n            input_data = []\\n        else:\\n            parts = input_line.split('],[')\\n            input_data = []\\n            for part in parts:\\n                if part.strip():\\n                    input_data.append([int(x.strip()) for x in part.split(',')])\\n                else:\\n                    input_data.append([])\\n    else:\\n        # Try JSON parsing\\n        try:\\n            input_data = json.loads(input_line)\\n        except:\\n            input_data = []\\n    \\n    # Convert arrays to linked lists\\n    lists = [array_to_list(arr) for arr in input_data]\\n    \\n    sol = Solution()\\n    result = sol.mergeKLists(lists)\\n    \\n    print(json.dumps(list_to_array(result), separators=(',', ':')))\\n"	PYTHON	[[1,4,5],[1,3,4],[2,6]]\n[]	["[1,1,2,3,4,4,5,6]","[]"]	\N	\N	Accepted	["4192 KB","7800 KB"]	["0.05 s","0.104 s"]	2025-07-18 10:58:48.689	2025-07-18 10:58:48.689
e3f469b8-c9fa-4f0f-8fdb-71364a1af8e2	2a179277-32c9-4853-a8c2-3d2de754781d	c3455dcc-2c25-483c-af7b-78f54ca98d5e	"const readline = require('readline');\\nconst rl = readline.createInterface({\\n    input: process.stdin,\\n    output: process.stdout\\n});\\n\\n// Definition for singly-linked list\\nfunction ListNode(val, next) {\\n    this.val = (val === undefined ? 0 : val);\\n    this.next = (next === undefined ? null : next);\\n}\\n\\nfunction mergeKLists(lists) {\\n    if (!lists || lists.length === 0) return null;\\n\\n    // Keep merging pairs until only one list remains\\n    while (lists.length > 1) {\\n        let mergedLists = [];\\n        for (let i = 0; i < lists.length; i += 2) {\\n            let l1 = lists[i];\\n            let l2 = (i + 1) < lists.length ? lists[i + 1] : null;\\n            mergedLists.push(mergeTwoLists(l1, l2));\\n        }\\n        lists = mergedLists;\\n    }\\n\\n    return lists[0];\\n}\\n\\nfunction mergeTwoLists(l1, l2) {\\n    let dummy = new ListNode(0);\\n    let current = dummy;\\n\\n    while (l1 && l2) {\\n        if (l1.val <= l2.val) {\\n            current.next = l1;\\n            l1 = l1.next;\\n        } else {\\n            current.next = l2;\\n            l2 = l2.next;\\n        }\\n        current = current.next;\\n    }\\n\\n    current.next = l1 ? l1 : l2;\\n    return dummy.next;\\n}\\n\\n// Helper function to convert array to linked list\\nfunction arrayToList(arr) {\\n    if (!arr || arr.length === 0) return null;\\n    let head = new ListNode(arr[0]);\\n    let current = head;\\n    for (let i = 1; i < arr.length; i++) {\\n        current.next = new ListNode(arr[i]);\\n        current = current.next;\\n    }\\n    return head;\\n}\\n\\n// Helper function to convert linked list to array\\nfunction listToArray(head) {\\n    let result = [];\\n    while (head) {\\n        result.push(head.val);\\n        head = head.next;\\n    }\\n    return result;\\n}\\n\\nrl.on('line', (line) => {\\n    const input = JSON.parse(line.trim());\\n    const lists = input.map(arr => arrayToList(arr));\\n    const result = mergeKLists(lists);\\n    console.log(JSON.stringify(listToArray(result))); // ✅ Ensures no extra spaces\\n    rl.close();\\n});\\n"	JAVASCRIPT	[[1,4,5],[1,3,4],[2,6]]\n[]	["[1,1,2,3,4,4,5,6]","[]"]	\N	\N	Accepted	["19468 KB","7520 KB"]	["0.253 s","0.074 s"]	2025-07-18 10:59:31.231	2025-07-18 10:59:31.231
93a4e510-2714-464d-869d-979b818963be	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["25060 KB","27388 KB","26560 KB"]	["0.191 s","0.183 s","0.192 s"]	2025-07-22 09:24:43.707	2025-07-22 09:24:43.707
8940a976-ad5d-49c3-897f-f2693b2dca17	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["26472 KB","24904 KB","24760 KB"]	["0.186 s","0.205 s","0.199 s"]	2025-07-22 09:31:16.782	2025-07-22 09:31:16.782
81c4602e-b310-4650-9c66-b8436c84d7aa	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nconst fs = require('fs');\\n\\n// Read entire input from stdin\\nconst input = fs.readFileSync(0, 'utf-8');\\n\\n// Split input into two numbers and convert to integers\\nconst [a, b] = input.trim().split(' ').map(Number);\\n\\n// Print the result\\nconsole.log(a + b);"	JAVASCRIPT	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["19676 KB","18404 KB","7760 KB"]	["0.067 s","0.067 s","0.068 s"]	2025-07-23 07:45:11.601	2025-07-23 07:45:11.601
1022f1d3-d4bb-46e1-b6ef-2b1a9f84b689	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"# Read input and print the sum of two numbers\\nimport sys\\n\\n# Read entire input from stdin\\ninput_line = sys.stdin.read()\\n\\n# Split and convert to integers\\na, b = map(int, input_line.strip().split())\\n\\n# Print the result\\nprint(a + b)"	PYTHON	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["5492 KB","6268 KB","3148 KB"]	["0.029 s","0.029 s","0.023 s"]	2025-07-23 07:45:23.312	2025-07-23 07:45:23.312
0f2453c9-1a3c-4b3f-92a0-91fef6a127d5	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["","","0"]	\N	["Compilation time limit exceeded.","Compilation time limit exceeded.",null]	Wrong Answer	[null,null,"51560 KB"]	[null,null,"0.186 s"]	2025-07-23 07:45:58.813	2025-07-23 07:45:58.813
c3df84dd-9bd0-4503-a9a4-49b47f85f522	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["300","-1100","0"]	\N	\N	Accepted	["13344 KB","13712 KB","13088 KB"]	["0.135 s","0.136 s","0.138 s"]	2025-07-23 07:51:23.33	2025-07-23 07:51:23.33
cad8be2b-f03e-4849-8f37-e0b850b2d53b	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["","","0"]	\N	["Compilation time limit exceeded.","Compilation time limit exceeded.",null]	Wrong Answer	[null,null,"50940 KB"]	[null,null,"0.192 s"]	2025-07-23 08:23:08.879	2025-07-23 08:23:08.879
2f05b8b7-cdee-4939-b3d2-b3bee9cdbaa9	2a179277-32c9-4853-a8c2-3d2de754781d	d773532a-3fbb-4418-9e3b-ed3636de0b87	"// Read input and print the sum of two numbers\\nimport java.util.*;\\n\\npublic class Main {\\n  public static void main(String[] args) {\\n    // Create scanner for reading input\\n    Scanner sc = new Scanner(System.in);\\n\\n    // Read two integers\\n    int a = sc.nextInt();\\n    int b = sc.nextInt();\\n\\n    // Print the result\\n    System.out.println(a + b);\\n  }\\n}"	JAVA	100 200\n-500 -600\n0 0	["","","0"]	\N	["Compilation time limit exceeded.","Compilation time limit exceeded.",null]	Wrong Answer	[null,null,"48708 KB"]	[null,null,"0.179 s"]	2025-07-23 08:26:29.633	2025-07-23 08:26:29.633
f439713e-f788-4c1b-92b6-bec2a83c4fab	2a179277-32c9-4853-a8c2-3d2de754781d	380fe475-e22b-49fc-aec5-d9796ebc2a9d	"class Solution:\\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\\n        seen = {}\\n        for i, num in enumerate(nums):\\n            complement = target - num\\n            if complement in seen:\\n                return [seen[complement], i]\\n            seen[num] = i\\n        return []\\n\\n# Input parsing\\nif __name__ == \\"__main__\\":\\n    import sys\\n    import json\\n\\n    # Read input\\n    nums_line = sys.stdin.readline().strip()\\n    target_line = sys.stdin.readline().strip()\\n\\n    nums = json.loads(nums_line)\\n    target = int(target_line)\\n\\n    # Call solution\\n    sol = Solution()\\n    result = sol.twoSum(nums, target)\\n\\n    # Output result\\n    print(json.dumps(result))\\n"	PYTHON	[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6	["","",""]	["Traceback (most recent call last):\\n  File \\"script.py\\", line 1, in <module>\\n    class Solution:\\n  File \\"script.py\\", line 2, in Solution\\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\\nTypeError: 'type' object is not subscriptable\\n","Traceback (most recent call last):\\n  File \\"script.py\\", line 1, in <module>\\n    class Solution:\\n  File \\"script.py\\", line 2, in Solution\\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\\nTypeError: 'type' object is not subscriptable\\n","Traceback (most recent call last):\\n  File \\"script.py\\", line 1, in <module>\\n    class Solution:\\n  File \\"script.py\\", line 2, in Solution\\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\\nTypeError: 'type' object is not subscriptable\\n"]	\N	Wrong Answer	["3308 KB","3392 KB","3384 KB"]	["0.017 s","0.016 s","0.023 s"]	2025-07-24 21:33:56.748	2025-07-24 21:33:56.748
0ca7d12b-091f-4f98-a40a-0e77244abb79	2a179277-32c9-4853-a8c2-3d2de754781d	380fe475-e22b-49fc-aec5-d9796ebc2a9d	"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nfunction twoSum(nums, target) {\\n  const map = new Map();\\n\\n  for (let i = 0; i < nums.length; i++) {\\n    const complement = target - nums[i];\\n    if (map.has(complement)) {\\n      return [map.get(complement), i];\\n    }\\n    map.set(nums[i], i);\\n  }\\n\\n  return [];\\n}\\n\\n// Add readline for dynamic input handling\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nlet inputLines = [];\\nrl.on('line', (line) => {\\n  inputLines.push(line.trim());\\n  if (inputLines.length === 2) {\\n    const nums = JSON.parse(inputLines[0]);\\n    const target = parseInt(inputLines[1]);\\n\\n    const result = twoSum(nums, target);\\n    console.log(JSON.stringify(result));\\n    rl.close();\\n  }\\n});\\n"	JAVASCRIPT	[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6	["[0,1]","[1,2]","[0,1]"]	\N	\N	Accepted	["7860 KB","7128 KB","7164 KB"]	["0.059 s","0.046 s","0.049 s"]	2025-07-24 21:35:18.315	2025-07-24 21:35:18.315
7a0c6889-5740-4237-99ce-a3a2593e08cb	2a179277-32c9-4853-a8c2-3d2de754781d	380fe475-e22b-49fc-aec5-d9796ebc2a9d	"from typing import List\\n\\nclass Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        num_map = {}\\n        for i, num in enumerate(nums):\\n            complement = target - num\\n            if complement in num_map:\\n                return [num_map[complement], i]\\n            num_map[num] = i\\n        return []\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    import json\\n\\n    nums_line = sys.stdin.readline().strip()\\n    target_line = sys.stdin.readline().strip()\\n    \\n    nums = json.loads(nums_line)\\n    target = int(target_line)\\n    \\n    sol = Solution()\\n    result = sol.twoSum(nums, target)\\n    \\n    # Ensures output is like [0,1] without spaces\\n    print(json.dumps(result, separators=(',', ':')))\\n"	PYTHON	[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6	["[0,1]","[1,2]","[0,1]"]	\N	\N	Accepted	["4564 KB","4504 KB","4512 KB"]	["0.049 s","0.062 s","0.058 s"]	2025-07-24 21:51:14.959	2025-07-24 21:51:14.959
e66d84c7-bf9e-4103-8e26-a6b5a725f245	2a179277-32c9-4853-a8c2-3d2de754781d	380fe475-e22b-49fc-aec5-d9796ebc2a9d	"import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int[] twoSum(int[] nums, int target) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        \\n        for (int i = 0; i < nums.length; i++) {\\n            int complement = target - nums[i];\\n            if (map.containsKey(complement)) {\\n                return new int[]{map.get(complement), i};\\n            }\\n            map.put(nums[i], i);\\n        }\\n        return new int[0];\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        \\n        // Parse array input\\n        String numsStr = br.readLine().trim();\\n        numsStr = numsStr.substring(1, numsStr.length() - 1); // Remove brackets\\n        String[] numsArray = numsStr.split(\\",\\");\\n        int[] nums = new int[numsArray.length];\\n        for (int i = 0; i < numsArray.length; i++) {\\n            nums[i] = Integer.parseInt(numsArray[i].trim());\\n        }\\n        \\n        // Parse target\\n        int target = Integer.parseInt(br.readLine().trim());\\n        \\n        int[] result = twoSum(nums, target);\\n        if (result.length == 2) {\\n            System.out.println(\\"[\\" + result[0] + \\",\\" + result[1] + \\"]\\");\\n        } else {\\n            System.out.println(\\"[]\\");\\n        }\\n    }\\n}\\n"	JAVA	[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6	["[0,1]","[1,2]","[0,1]"]	\N	\N	Accepted	["11532 KB","13356 KB","11488 KB"]	["0.105 s","0.117 s","0.093 s"]	2025-07-24 21:51:52.917	2025-07-24 21:51:52.917
bcc7de28-2585-4f54-8ccb-c93152899a9e	2a179277-32c9-4853-a8c2-3d2de754781d	cdb7c83d-ec47-4072-8704-9553ca348cbc	"import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int lengthOfLongestSubstring(String s) {\\n        Set<Character> seen = new HashSet<>();\\n        int left = 0, maxLen = 0;\\n\\n        for (int right = 0; right < s.length(); right++) {\\n            while (seen.contains(s.charAt(right))) {\\n                seen.remove(s.charAt(left));\\n                left++;\\n            }\\n            seen.add(s.charAt(right));\\n            maxLen = Math.max(maxLen, right - left + 1);\\n        }\\n\\n        return maxLen;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n\\n        int result = lengthOfLongestSubstring(input);\\n        System.out.println(result);\\n    }\\n}\\n"	JAVA	abcabcbb\nbbbbb\npwwkew\n 	["3","1","3","0"]	\N	\N	Accepted	["11108 KB","10236 KB","10648 KB","10104 KB"]	["0.095 s","0.094 s","0.081 s","0.101 s"]	2025-07-24 21:56:51.783	2025-07-24 21:56:51.783
260a76c4-abfb-4a59-9e49-f4095eee19a9	2a179277-32c9-4853-a8c2-3d2de754781d	cdb7c83d-ec47-4072-8704-9553ca348cbc	"class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        seen = set()\\n        left = 0\\n        max_len = 0\\n\\n        for right in range(len(s)):\\n            while s[right] in seen:\\n                seen.remove(s[left])\\n                left += 1\\n            seen.add(s[right])\\n            max_len = max(max_len, right - left + 1)\\n\\n        return max_len\\n\\n# Input parsing\\nif __name__ == \\"__main__\\":\\n    import sys\\n\\n    # Read input string\\n    s = sys.stdin.readline().strip()\\n\\n    # Call solution\\n    sol = Solution()\\n    result = sol.lengthOfLongestSubstring(s)\\n\\n    # Output result\\n    print(result)\\n"	PYTHON	abcabcbb\nbbbbb\npwwkew\n 	["3","1","3","0"]	\N	\N	Accepted	["3308 KB","3332 KB","3268 KB","3276 KB"]	["0.021 s","0.022 s","0.022 s","0.034 s"]	2025-07-24 21:57:15.753	2025-07-24 21:57:15.753
a0fef775-17ea-4da3-930c-c44f93b10f2d	2a179277-32c9-4853-a8c2-3d2de754781d	cdb7c83d-ec47-4072-8704-9553ca348cbc	"/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction lengthOfLongestSubstring(s) {\\n    const seen = new Set();\\n    let left = 0, maxLen = 0;\\n\\n    for (let right = 0; right < s.length; right++) {\\n        while (seen.has(s[right])) {\\n            seen.delete(s[left]);\\n            left++;\\n        }\\n        seen.add(s[right]);\\n        maxLen = Math.max(maxLen, right - left + 1);\\n    }\\n\\n    return maxLen;\\n}\\n\\n// Add readline for dynamic input handling\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nrl.on('line', (line) => {\\n  const result = lengthOfLongestSubstring(line.trim());\\n  console.log(result);\\n  rl.close();\\n});\\n"	JAVASCRIPT	abcabcbb\nbbbbb\npwwkew\n 	["3","1","3","0"]	\N	\N	Accepted	["7120 KB","7208 KB","7136 KB","7392 KB"]	["0.083 s","0.077 s","0.084 s","0.039 s"]	2025-07-24 21:57:40.999	2025-07-24 21:57:40.999
7bb57e15-7ee7-44aa-9f27-6cb4ddb2eff2	2a179277-32c9-4853-a8c2-3d2de754781d	12546f3f-9617-4641-be2e-f2afe0fb9ef5	"import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int countVowels(String s) {\\n        int count = 0;\\n        for (char c : s.toLowerCase().toCharArray()) {\\n            if (\\"aeiou\\".indexOf(c) != -1) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        int result = countVowels(input);\\n        System.out.println(result);\\n    }\\n}\\n"	JAVA	hello\nabcde\nxyz\nAEIOUaeiou	["2","2","0","10"]	\N	\N	Accepted	["12544 KB","10180 KB","10952 KB","10440 KB"]	["0.12 s","0.087 s","0.141 s","0.078 s"]	2025-07-24 22:08:10.679	2025-07-24 22:08:10.679
2bded157-de7f-4f3f-ad31-e56110bd033d	2a179277-32c9-4853-a8c2-3d2de754781d	12546f3f-9617-4641-be2e-f2afe0fb9ef5	"class Solution:\\n    def countVowels(self, s: str) -> int:\\n        vowels = {'a', 'e', 'i', 'o', 'u'}\\n        return sum(1 for char in s.lower() if char in vowels)\\n\\nif __name__ == \\"__main__\\":\\n    import sys\\n    s = sys.stdin.readline().strip()\\n    sol = Solution()\\n    print(sol.countVowels(s))\\n"	PYTHON	hello\nabcde\nxyz\nAEIOUaeiou	["2","2","0","10"]	\N	\N	Accepted	["3316 KB","3360 KB","3280 KB","3320 KB"]	["0.019 s","0.024 s","0.026 s","0.021 s"]	2025-07-24 22:08:48.915	2025-07-24 22:08:48.915
5ec2d81b-ef08-4163-aa90-4e85c35f4cf9	2a179277-32c9-4853-a8c2-3d2de754781d	12546f3f-9617-4641-be2e-f2afe0fb9ef5	"/**\\n * @param {string} s\\n * @return {number}\\n */\\nfunction countVowels(s) {\\n    s = s.toLowerCase();\\n    let count = 0;\\n    for (let char of s) {\\n        if (\\"aeiou\\".includes(char)) {\\n            count++;\\n        }\\n    }\\n    return count;\\n}\\n\\nconst readline = require('readline');\\nconst rl = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout,\\n  terminal: false\\n});\\n\\nrl.on('line', (line) => {\\n  const result = countVowels(line.trim());\\n  console.log(result);\\n  rl.close();\\n});\\n"	JAVASCRIPT	hello\nabcde\nxyz\nAEIOUaeiou	["2","2","0","10"]	\N	\N	Accepted	["7244 KB","7224 KB","7304 KB","7312 KB"]	["0.041 s","0.038 s","0.063 s","0.042 s"]	2025-07-24 22:09:37.59	2025-07-24 22:09:37.59
4a93e199-251b-4203-8a10-771f22f53173	2a179277-32c9-4853-a8c2-3d2de754781d	5b978148-bf44-4073-adcc-532f958cbdd9	"/**\\n * @param {number[]} head\\n * @return {number}\\n */\\nfunction lengthOfLinkedList(head) {\\n  // The linked list is given as an array of node values\\n  // So length is simply the array's length\\n  if (!head || head.length === 0) return 0;\\n  return head.length;\\n}\\n\\n// Read input and output length\\nconst readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (line) => {\\n  const arr = JSON.parse(line.trim());\\n  const result = lengthOfLinkedList(arr);\\n  console.log(result);\\n  rl.close();\\n});\\n"	JAVASCRIPT	[1,2,3,4]\n[]\n[10]\n[5,5,5,5,5]	["4","0","1","5"]	\N	\N	Accepted	["7168 KB","7304 KB","7120 KB","7424 KB"]	["0.079 s","0.04 s","0.073 s","0.046 s"]	2025-07-27 17:15:36.758	2025-07-27 17:15:36.758
e0609747-cddc-4458-82fa-c78a82e94374	2a179277-32c9-4853-a8c2-3d2de754781d	5b978148-bf44-4073-adcc-532f958cbdd9	"class Solution:\\n    def lengthOfLinkedList(self, head):\\n        # The head is a list of node values (or an empty list for null)\\n        if not head:\\n            return 0\\n        return len(head)\\n\\nif __name__ == \\"__main__\\":\\n    import sys, json\\n    arr = json.loads(sys.stdin.readline().strip())\\n    sol = Solution()\\n    print(sol.lengthOfLinkedList(arr))\\n"	PYTHON	[1,2,3,4]\n[]\n[10]\n[5,5,5,5,5]	["4","0","1","5"]	\N	\N	Accepted	["4188 KB","4176 KB","4192 KB","4108 KB"]	["0.028 s","0.041 s","0.032 s","0.04 s"]	2025-07-27 17:16:02.739	2025-07-27 17:16:02.739
ed93d9bf-2564-4e79-ba70-f3f9a2eb7037	2a179277-32c9-4853-a8c2-3d2de754781d	5b978148-bf44-4073-adcc-532f958cbdd9	"import java.util.*;\\nimport java.io.*;\\n\\npublic class Main {\\n    public static int lengthOfLinkedList(int[] head) {\\n        // If head is null or empty array, length is 0\\n        if (head == null || head.length == 0) return 0;\\n        return head.length;\\n    }\\n\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        String input = br.readLine().trim();\\n        input = input.replaceAll(\\"[\\\\\\\\[\\\\\\\\]\\\\\\\\s]\\", \\"\\");\\n        if (input.isEmpty()) {\\n            System.out.println(0);\\n            return;\\n        }\\n        String[] tokens = input.split(\\",\\");\\n        int[] arr = new int[tokens.length];\\n        for (int i = 0; i < tokens.length; i++) {\\n            arr[i] = Integer.parseInt(tokens[i]);\\n        }\\n        System.out.println(lengthOfLinkedList(arr));\\n    }\\n}\\n"	JAVA	[1,2,3,4]\n[]\n[10]\n[5,5,5,5,5]	["4","0","1","5"]	\N	\N	Accepted	["11428 KB","11100 KB","11380 KB","11228 KB"]	["0.223 s","0.102 s","0.076 s","0.099 s"]	2025-07-27 17:16:34.53	2025-07-27 17:16:34.53
\.


--
-- Data for Name: TestCaseResult; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."TestCaseResult" (id, "submissionId", "testCase", passed, stdout, expected, stderr, "compiledOutput", status, memory, "time", "createdAt", "updatedAt") FROM stdin;
6e06a75c-d115-440d-87ed-c388ded09179	80c3dce8-7363-4db9-9582-1ad8a3ea4e60	1	t	300	300	\N	\N	Accepted	6940 KB	0.259 s	2025-06-22 10:19:56.856	2025-06-22 10:19:56.856
630c3965-5783-46e9-8004-5ff80e63f7db	80c3dce8-7363-4db9-9582-1ad8a3ea4e60	2	t	-1100	-1100	\N	\N	Accepted	7232 KB	0.263 s	2025-06-22 10:19:56.856	2025-06-22 10:19:56.856
8480719c-778c-489c-8dd3-e110ae3d6321	80c3dce8-7363-4db9-9582-1ad8a3ea4e60	3	t	0	0	\N	\N	Accepted	7048 KB	0.257 s	2025-06-22 10:19:56.856	2025-06-22 10:19:56.856
e967cd87-e46b-4586-891e-5cb44bb5caec	0b03a0ee-062c-4b56-a31d-c4760f453e98	1	t	300	300	\N	\N	Accepted	19236 KB	0.242 s	2025-06-22 17:47:23.212	2025-06-22 17:47:23.212
9cadfe5e-1aa1-400c-8f62-ba57bef156c1	0b03a0ee-062c-4b56-a31d-c4760f453e98	2	t	-1100	-1100	\N	\N	Accepted	10076 KB	0.186 s	2025-06-22 17:47:23.212	2025-06-22 17:47:23.212
d83bd607-bdf0-4fc8-ac89-28c4ec30b8b2	0b03a0ee-062c-4b56-a31d-c4760f453e98	3	t	0	0	\N	\N	Accepted	18264 KB	0.234 s	2025-06-22 17:47:23.212	2025-06-22 17:47:23.212
89000a5f-2bd8-43da-9fe3-35fbf20d3c60	57a2ef11-cb74-40fe-8b82-ccc3dc6893d2	1	t	300	300	\N	\N	Accepted	6928 KB	0.082 s	2025-06-22 17:47:26.438	2025-06-22 17:47:26.438
6f38dbf0-94e8-4ea1-b290-d33ff8eb036b	57a2ef11-cb74-40fe-8b82-ccc3dc6893d2	2	t	-1100	-1100	\N	\N	Accepted	7216 KB	0.071 s	2025-06-22 17:47:26.438	2025-06-22 17:47:26.438
f561c4ea-f7e8-42d8-8fe5-a36454923c1a	57a2ef11-cb74-40fe-8b82-ccc3dc6893d2	3	t	0	0	\N	\N	Accepted	6956 KB	0.062 s	2025-06-22 17:47:26.438	2025-06-22 17:47:26.438
ddb737a0-3e74-4c24-b732-532341b88caa	b8a5581f-48ca-4d5d-b3bd-eb6ca481e458	1	t	300	300	\N	\N	Accepted	7680 KB	0.085 s	2025-06-22 17:47:30.056	2025-06-22 17:47:30.056
b2f01d65-0421-4f79-b308-b76373578a72	b8a5581f-48ca-4d5d-b3bd-eb6ca481e458	2	t	-1100	-1100	\N	\N	Accepted	6944 KB	0.078 s	2025-06-22 17:47:30.056	2025-06-22 17:47:30.056
9b9903d4-3ef3-4cd5-b513-3255852fb657	b8a5581f-48ca-4d5d-b3bd-eb6ca481e458	3	t	0	0	\N	\N	Accepted	6992 KB	0.066 s	2025-06-22 17:47:30.056	2025-06-22 17:47:30.056
d3e4cdfc-bde2-450e-9f9d-8fdde03960b0	eeb28d73-5023-42e3-a2b1-a1067fe1099b	1	t	300	300	\N	\N	Accepted	3392 KB	0.017 s	2025-07-06 13:01:50.784	2025-07-06 13:01:50.784
49acf799-030e-44de-8393-cd4a3e28d76e	eeb28d73-5023-42e3-a2b1-a1067fe1099b	2	t	-1100	-1100	\N	\N	Accepted	5932 KB	0.023 s	2025-07-06 13:01:50.784	2025-07-06 13:01:50.784
67f4dd5f-80ab-45fe-bd2a-476690a68345	eeb28d73-5023-42e3-a2b1-a1067fe1099b	3	t	0	0	\N	\N	Accepted	3256 KB	0.019 s	2025-07-06 13:01:50.784	2025-07-06 13:01:50.784
4c6be38a-2712-4910-8d9d-310439a6b940	e79836a9-92ac-4666-9877-37f20db8b0c9	1	t	300	300	\N	\N	Accepted	7228 KB	0.035 s	2025-07-06 13:01:59.635	2025-07-06 13:01:59.635
2d2e016e-d947-4632-a156-ba2d85d0f019	e79836a9-92ac-4666-9877-37f20db8b0c9	2	t	-1100	-1100	\N	\N	Accepted	11772 KB	0.125 s	2025-07-06 13:01:59.635	2025-07-06 13:01:59.635
31a217e8-2b87-449c-a54c-295ccf56c354	e79836a9-92ac-4666-9877-37f20db8b0c9	3	t	0	0	\N	\N	Accepted	10968 KB	0.124 s	2025-07-06 13:01:59.635	2025-07-06 13:01:59.635
f4e34066-20d8-4b06-8de6-b3b60fdd20df	693f55ac-7dff-4815-91a3-5971098abba6	1	t	300	300	\N	\N	Accepted	6888 KB	0.069 s	2025-07-06 13:02:16.079	2025-07-06 13:02:16.079
9b0efec6-88b7-40bd-84d5-583d31c06cfd	693f55ac-7dff-4815-91a3-5971098abba6	2	t	-1100	-1100	\N	\N	Accepted	6836 KB	0.1 s	2025-07-06 13:02:16.079	2025-07-06 13:02:16.079
ddc857b2-3ea2-47aa-bc41-9da3bc31c7fc	693f55ac-7dff-4815-91a3-5971098abba6	3	t	0	0	\N	\N	Accepted	6840 KB	0.075 s	2025-07-06 13:02:16.079	2025-07-06 13:02:16.079
d3d05407-6672-418a-b972-8b8a6577093c	8ed9624d-426c-452b-80f0-df8b24cc37ad	1	t	300	300	\N	\N	Accepted	15836 KB	0.194 s	2025-07-07 08:48:02.049	2025-07-07 08:48:02.049
f0808e46-a6c1-46be-945d-4755eaa67627	8ed9624d-426c-452b-80f0-df8b24cc37ad	2	t	-1100	-1100	\N	\N	Accepted	15824 KB	0.192 s	2025-07-07 08:48:02.049	2025-07-07 08:48:02.049
5583a268-d4be-40f9-98e0-4a00452a122e	8ed9624d-426c-452b-80f0-df8b24cc37ad	3	t	0	0	\N	\N	Accepted	16040 KB	0.198 s	2025-07-07 08:48:02.049	2025-07-07 08:48:02.049
3987a609-ec03-4ee2-af9e-db658eb0105f	b0025824-f56a-49da-a5aa-909eeea147a2	1	t	300	300	\N	\N	Accepted	16272 KB	0.141 s	2025-07-07 08:56:47.551	2025-07-07 08:56:47.551
66178b7e-4ce3-4269-ae18-88346bdfdd3e	b0025824-f56a-49da-a5aa-909eeea147a2	2	t	-1100	-1100	\N	\N	Accepted	16080 KB	0.142 s	2025-07-07 08:56:47.551	2025-07-07 08:56:47.551
c624b796-7264-4e13-af91-893bd5225e38	b0025824-f56a-49da-a5aa-909eeea147a2	3	t	0	0	\N	\N	Accepted	15100 KB	0.145 s	2025-07-07 08:56:47.551	2025-07-07 08:56:47.551
038aa5af-27f3-4e8b-b351-8c0ab46a55a9	6380c40e-54d9-4c63-872c-b06b8cb8e6b0	1	t	300	300	\N	\N	Accepted	6788 KB	0.136 s	2025-07-07 08:57:03.564	2025-07-07 08:57:03.564
a204b593-5e75-4bbd-8c1c-a262941529b8	6380c40e-54d9-4c63-872c-b06b8cb8e6b0	2	t	-1100	-1100	\N	\N	Accepted	6848 KB	0.135 s	2025-07-07 08:57:03.564	2025-07-07 08:57:03.564
0657627a-c739-4e1c-8c3a-407795ae9970	6380c40e-54d9-4c63-872c-b06b8cb8e6b0	3	t	0	0	\N	\N	Accepted	6904 KB	0.136 s	2025-07-07 08:57:03.564	2025-07-07 08:57:03.564
1d58e93b-14d2-432e-b05d-bd10bb5ceaa7	cad8be2b-f03e-4849-8f37-e0b850b2d53b	3	t	0	0	\N	\N	Accepted	50940 KB	0.192 s	2025-07-23 08:23:08.909	2025-07-23 08:23:08.909
20dd2758-d706-4fa7-a160-faeefe258b33	2f05b8b7-cdee-4939-b3d2-b3bee9cdbaa9	1	f		300	\N	Compilation time limit exceeded.	Compilation Error	\N	\N	2025-07-23 08:26:29.666	2025-07-23 08:26:29.666
5912ceb6-7121-4712-b2a2-c4e03eab9bf5	2f05b8b7-cdee-4939-b3d2-b3bee9cdbaa9	2	f		-1100	\N	Compilation time limit exceeded.	Compilation Error	\N	\N	2025-07-23 08:26:29.666	2025-07-23 08:26:29.666
d76cad43-1a9d-4979-bb7c-49837f6fa439	2f05b8b7-cdee-4939-b3d2-b3bee9cdbaa9	3	t	0	0	\N	\N	Accepted	48708 KB	0.179 s	2025-07-23 08:26:29.666	2025-07-23 08:26:29.666
9e8e69a8-5f27-4eef-af16-d4f418a4bab7	4fa2e5ce-54bd-4d73-a88b-eae26b8530c7	1	t	300	300	\N	\N	Accepted	12732 KB	0.134 s	2025-07-23 08:37:02.091	2025-07-23 08:37:02.091
9e98bfda-f214-43ea-bbd6-c9ef4c318610	4fa2e5ce-54bd-4d73-a88b-eae26b8530c7	2	t	-1100	-1100	\N	\N	Accepted	15928 KB	0.143 s	2025-07-23 08:37:02.091	2025-07-23 08:37:02.091
1377e8db-82a4-4fdf-85cf-8e3eaf733bb3	4fa2e5ce-54bd-4d73-a88b-eae26b8530c7	3	t	0	0	\N	\N	Accepted	13352 KB	0.147 s	2025-07-23 08:37:02.091	2025-07-23 08:37:02.091
da36f7e3-b281-4a58-b73a-212099a2a4d7	81fb4e82-89a3-4456-9ff6-9d0dec038a2b	1	t	300	300	\N	\N	Accepted	14196 KB	0.165 s	2025-07-23 08:37:27.154	2025-07-23 08:37:27.154
f2a8f3c5-11ee-4e87-935e-b29e62a967ff	81fb4e82-89a3-4456-9ff6-9d0dec038a2b	2	t	-1100	-1100	\N	\N	Accepted	16028 KB	0.167 s	2025-07-23 08:37:27.154	2025-07-23 08:37:27.154
af0b5911-2e68-4943-b6f6-bfe9142aa6bf	81fb4e82-89a3-4456-9ff6-9d0dec038a2b	3	t	0	0	\N	\N	Accepted	17488 KB	0.192 s	2025-07-23 08:37:27.154	2025-07-23 08:37:27.154
7d02738f-3856-4bf3-99f3-75a8bc851518	ed93d9bf-2564-4e79-ba70-f3f9a2eb7037	1	t	4	4	\N	\N	Accepted	11428 KB	0.223 s	2025-07-27 17:16:34.552	2025-07-27 17:16:34.552
9889cd50-a8e7-4227-8720-06ecb9ae1b0a	ed93d9bf-2564-4e79-ba70-f3f9a2eb7037	2	t	0	0	\N	\N	Accepted	11100 KB	0.102 s	2025-07-27 17:16:34.552	2025-07-27 17:16:34.552
b82de7e7-4ad2-4a40-866a-d0a324ad0039	ed93d9bf-2564-4e79-ba70-f3f9a2eb7037	3	t	1	1	\N	\N	Accepted	11380 KB	0.076 s	2025-07-27 17:16:34.552	2025-07-27 17:16:34.552
dfcf499e-86d8-4872-abc6-f6d1067fb73c	ed93d9bf-2564-4e79-ba70-f3f9a2eb7037	4	t	5	5	\N	\N	Accepted	11228 KB	0.099 s	2025-07-27 17:16:34.552	2025-07-27 17:16:34.552
7ead2382-d253-44ea-871f-33838be05592	2dc7aa7b-09ea-4727-9046-731b5f807036	1	t	6	6	\N	\N	Accepted	17532 KB	0.238 s	2025-07-14 14:31:44.433	2025-07-14 14:31:44.433
d61a7be7-66fb-49d6-a608-67ef878277fd	2dc7aa7b-09ea-4727-9046-731b5f807036	2	t	1	1	\N	\N	Accepted	15088 KB	0.232 s	2025-07-14 14:31:44.433	2025-07-14 14:31:44.433
79cd3f22-40c7-4962-b3e3-0b742fd62d9a	2dc7aa7b-09ea-4727-9046-731b5f807036	3	t	23	23	\N	\N	Accepted	15572 KB	0.244 s	2025-07-14 14:31:44.433	2025-07-14 14:31:44.433
a2974eb8-09cb-442b-b5d8-4a3277b79bf3	561691f1-2d77-47c8-af34-663b5eb80f78	1	t	6	6	\N	\N	Accepted	30108 KB	0.175 s	2025-07-14 14:44:36.369	2025-07-14 14:44:36.369
5697392d-9ed1-4d67-8802-f10fafd2e076	561691f1-2d77-47c8-af34-663b5eb80f78	2	t	1	1	\N	\N	Accepted	25720 KB	0.133 s	2025-07-14 14:44:36.369	2025-07-14 14:44:36.369
d5ad18c6-283f-4d5c-a6b5-2d2e7b1ba250	561691f1-2d77-47c8-af34-663b5eb80f78	3	t	23	23	\N	\N	Accepted	24732 KB	0.175 s	2025-07-14 14:44:36.369	2025-07-14 14:44:36.369
4d6f9e12-f031-4adc-86a2-c27a9a4b7295	2f9a7326-d12a-4719-8611-ddb6e0f300af	1	t	300	300	\N	\N	Accepted	12836 KB	0.225 s	2025-07-14 15:19:13.971	2025-07-14 15:19:13.971
66bbf9b5-da84-4eb2-8798-c789320b684b	2f9a7326-d12a-4719-8611-ddb6e0f300af	2	t	-1100	-1100	\N	\N	Accepted	13692 KB	0.236 s	2025-07-14 15:19:13.971	2025-07-14 15:19:13.971
aac14751-adad-4380-9865-b0962c1543cd	2f9a7326-d12a-4719-8611-ddb6e0f300af	3	t	0	0	\N	\N	Accepted	13284 KB	0.241 s	2025-07-14 15:19:13.971	2025-07-14 15:19:13.971
7da59153-eec2-449d-9b38-24309db5868c	e2d5cb66-1ae3-4a56-bbf5-a4e13a6e7a28	1	t	300	300	\N	\N	Accepted	12820 KB	0.14 s	2025-07-14 15:43:05.971	2025-07-14 15:43:05.971
7bdeaebd-5f5d-4f04-8fa2-5d54c797e3c0	e2d5cb66-1ae3-4a56-bbf5-a4e13a6e7a28	2	t	-1100	-1100	\N	\N	Accepted	12624 KB	0.135 s	2025-07-14 15:43:05.971	2025-07-14 15:43:05.971
8a6a63fd-7845-4ee3-8e6f-1c8ac556bada	e2d5cb66-1ae3-4a56-bbf5-a4e13a6e7a28	3	t	0	0	\N	\N	Accepted	12736 KB	0.141 s	2025-07-14 15:43:05.971	2025-07-14 15:43:05.971
6a6a54ee-a2b6-4fb2-ad33-6bc5bc7ead0f	7da1a004-92a0-4494-9ee9-8a67086258c6	1	t	300	300	\N	\N	Accepted	13520 KB	0.158 s	2025-07-14 15:43:43.2	2025-07-14 15:43:43.2
61f80c30-358a-4956-95bc-f0a9512e58fe	7da1a004-92a0-4494-9ee9-8a67086258c6	2	t	-1100	-1100	\N	\N	Accepted	12896 KB	0.163 s	2025-07-14 15:43:43.2	2025-07-14 15:43:43.2
36154501-1da9-45d9-9254-199b2df8591c	7da1a004-92a0-4494-9ee9-8a67086258c6	3	t	0	0	\N	\N	Accepted	13196 KB	0.186 s	2025-07-14 15:43:43.2	2025-07-14 15:43:43.2
197274a6-c120-4489-968d-6f016439ab27	353cca5d-6857-4366-b3a7-4bf95fe39225	1	t	300	300	\N	\N	Accepted	26400 KB	0.276 s	2025-07-15 07:53:32.299	2025-07-15 07:53:32.299
95a6d171-db7e-4bd4-b768-9c4d7449fa1f	353cca5d-6857-4366-b3a7-4bf95fe39225	2	t	-1100	-1100	\N	\N	Accepted	26032 KB	0.279 s	2025-07-15 07:53:32.299	2025-07-15 07:53:32.299
a3e64a03-463d-45d3-bf2b-4b3e6cae3958	353cca5d-6857-4366-b3a7-4bf95fe39225	3	t	0	0	\N	\N	Accepted	25900 KB	0.282 s	2025-07-15 07:53:32.299	2025-07-15 07:53:32.299
c58069dd-9853-436b-ba72-e610b0031ad7	32548210-45f4-4003-a9fc-06eb09ddcae7	1	t	300	300	\N	\N	Accepted	16072 KB	0.37 s	2025-07-15 08:13:58.914	2025-07-15 08:13:58.914
48832a4e-dc6b-4097-bea2-4423b6f490cb	32548210-45f4-4003-a9fc-06eb09ddcae7	2	t	-1100	-1100	\N	\N	Accepted	15568 KB	0.372 s	2025-07-15 08:13:58.914	2025-07-15 08:13:58.914
b2f3fe42-e230-40cb-a9f6-d01144bc2451	32548210-45f4-4003-a9fc-06eb09ddcae7	3	t	0	0	\N	\N	Accepted	15568 KB	0.336 s	2025-07-15 08:13:58.914	2025-07-15 08:13:58.914
3917dbd7-0ee5-4ec7-b057-5da9b76840fe	02916817-a956-4caf-a8bc-89b79b3a8404	1	f	0	2	\N	\N	Accepted	28180 KB	0.176 s	2025-07-15 08:23:51.673	2025-07-15 08:23:51.673
c1c8b7b3-c9e5-486b-8636-594809090974	02916817-a956-4caf-a8bc-89b79b3a8404	2	f	0	3	\N	\N	Accepted	26800 KB	0.179 s	2025-07-15 08:23:51.673	2025-07-15 08:23:51.673
0b16a0a0-6de0-4743-85c8-9bc285241852	02916817-a956-4caf-a8bc-89b79b3a8404	3	f	0	5	\N	\N	Accepted	24228 KB	0.179 s	2025-07-15 08:23:51.673	2025-07-15 08:23:51.673
a9128c0d-3881-4960-80c7-421d70a4cdf2	359f0b30-1833-463a-bcd7-6cd67d6d8052	1	t	300	300	\N	\N	Accepted	3328 KB	0.033 s	2025-07-15 08:24:11.835	2025-07-15 08:24:11.835
738ff8de-f334-487c-aabe-4cdde5c12843	359f0b30-1833-463a-bcd7-6cd67d6d8052	2	t	-1100	-1100	\N	\N	Accepted	7328 KB	0.059 s	2025-07-15 08:24:11.835	2025-07-15 08:24:11.835
0b27af30-2465-4479-98aa-c29ff1835748	359f0b30-1833-463a-bcd7-6cd67d6d8052	3	t	0	0	\N	\N	Accepted	4384 KB	0.041 s	2025-07-15 08:24:11.835	2025-07-15 08:24:11.835
ab517d3e-2caf-4000-b7f0-f695a4706b4b	74c560f5-6dd4-41df-b4a1-aa03a4012ec6	1	t	300	300	\N	\N	Accepted	3232 KB	0.11 s	2025-07-15 08:31:36.582	2025-07-15 08:31:36.582
848c16f9-2f52-4421-8f6f-91b04c10e278	74c560f5-6dd4-41df-b4a1-aa03a4012ec6	2	t	-1100	-1100	\N	\N	Accepted	3232 KB	0.11 s	2025-07-15 08:31:36.582	2025-07-15 08:31:36.582
73d405ca-2dce-49df-8df2-4b473190a01c	74c560f5-6dd4-41df-b4a1-aa03a4012ec6	3	t	0	0	\N	\N	Accepted	3284 KB	0.092 s	2025-07-15 08:31:36.582	2025-07-15 08:31:36.582
05fdce8e-5b77-49e7-9ffa-a18756d18a41	c52c41de-4c95-47e2-9658-e074785037b0	1	t	300	300	\N	\N	Accepted	14068 KB	0.161 s	2025-07-15 08:36:21.983	2025-07-15 08:36:21.983
c767fd08-8ed5-4f6b-98ef-8c025c589cc0	c52c41de-4c95-47e2-9658-e074785037b0	2	t	-1100	-1100	\N	\N	Accepted	14400 KB	0.152 s	2025-07-15 08:36:21.983	2025-07-15 08:36:21.983
18089705-c851-4724-9b08-9891e8001963	c52c41de-4c95-47e2-9658-e074785037b0	3	t	0	0	\N	\N	Accepted	13864 KB	0.154 s	2025-07-15 08:36:21.983	2025-07-15 08:36:21.983
42154621-3e15-469e-b1c5-90ffa9151e61	cb941cd3-ddfd-4085-ac87-815eaab6e400	1	t	300	300	\N	\N	Accepted	12532 KB	0.189 s	2025-07-15 08:36:56.732	2025-07-15 08:36:56.732
33c5a85a-4b55-46b5-a35f-76d54edfdfe6	cb941cd3-ddfd-4085-ac87-815eaab6e400	2	t	-1100	-1100	\N	\N	Accepted	12348 KB	0.193 s	2025-07-15 08:36:56.732	2025-07-15 08:36:56.732
8a5ecd7f-4794-4be8-b8ed-0ac1eff0f77f	cb941cd3-ddfd-4085-ac87-815eaab6e400	3	t	0	0	\N	\N	Accepted	12660 KB	0.201 s	2025-07-15 08:36:56.732	2025-07-15 08:36:56.732
8fa63448-4e15-4dbd-a0a0-d1c3e6e24baa	5cf1e9ff-0e9c-41fc-b031-28286ab5d963	1	t	300	300	\N	\N	Accepted	13244 KB	0.325 s	2025-07-15 08:41:18.229	2025-07-15 08:41:18.229
bbfca8d2-d5ab-44f4-b89b-6d908929da54	5cf1e9ff-0e9c-41fc-b031-28286ab5d963	2	t	-1100	-1100	\N	\N	Accepted	13604 KB	0.333 s	2025-07-15 08:41:18.229	2025-07-15 08:41:18.229
0d93673c-6e11-431a-b5be-336423b7db31	5cf1e9ff-0e9c-41fc-b031-28286ab5d963	3	t	0	0	\N	\N	Accepted	12832 KB	0.315 s	2025-07-15 08:41:18.229	2025-07-15 08:41:18.229
8d684e7c-c932-4ef9-b156-e132b36833e0	6f61ad54-4841-4233-a536-72895258b120	1	f	0	6	\N	\N	Accepted	12676 KB	0.183 s	2025-07-15 08:42:50.078	2025-07-15 08:42:50.078
c6de818f-c9b6-43d6-a26b-b458cca98a14	6f61ad54-4841-4233-a536-72895258b120	2	f	0	1	\N	\N	Accepted	12824 KB	0.196 s	2025-07-15 08:42:50.078	2025-07-15 08:42:50.078
62e0f810-3595-4471-bbce-e96bed04733d	6f61ad54-4841-4233-a536-72895258b120	3	f	0	23	\N	\N	Accepted	14788 KB	0.225 s	2025-07-15 08:42:50.078	2025-07-15 08:42:50.078
ff7f9937-70be-4d7a-a62a-46c29a2ada3b	ea70c4d9-5e0c-4b8b-b49c-6fb77108fc5c	1	f	0	6	\N	\N	Accepted	15776 KB	0.21 s	2025-07-15 08:43:24.771	2025-07-15 08:43:24.771
77e454a9-99c0-4f34-8783-3338460f34d5	ea70c4d9-5e0c-4b8b-b49c-6fb77108fc5c	2	f	0	1	\N	\N	Accepted	13512 KB	0.208 s	2025-07-15 08:43:24.771	2025-07-15 08:43:24.771
c44dcf6c-65fd-446c-8796-2d1052640b9c	ea70c4d9-5e0c-4b8b-b49c-6fb77108fc5c	3	f	0	23	\N	\N	Accepted	12976 KB	0.202 s	2025-07-15 08:43:24.771	2025-07-15 08:43:24.771
fa1fd48f-7824-4faa-a35e-6e71f7e5dc1a	89641b2c-6672-44f7-83ee-68f8d46145b5	1	t	300	300	\N	\N	Accepted	13128 KB	0.202 s	2025-07-15 08:43:43.395	2025-07-15 08:43:43.395
f29f5a7f-a8e7-4a9a-bc78-e68a5fe7d454	89641b2c-6672-44f7-83ee-68f8d46145b5	2	t	-1100	-1100	\N	\N	Accepted	13456 KB	0.193 s	2025-07-15 08:43:43.395	2025-07-15 08:43:43.395
c9d18c9d-67df-4028-b6c4-c56ffc1f515d	89641b2c-6672-44f7-83ee-68f8d46145b5	3	t	0	0	\N	\N	Accepted	12536 KB	0.196 s	2025-07-15 08:43:43.395	2025-07-15 08:43:43.395
a538959f-750e-4630-9c13-add6fa930343	18e13b75-2073-425c-8fab-0f887b01b83a	1	f		300	\N	Main.java:14: error: cannot find symbol\n    System.out.println(a + bnnl);\n                           ^\n  symbol:   variable bnnl\n  location: class Main\n1 error\n	Compilation Error	\N	\N	2025-07-15 08:43:55.506	2025-07-15 08:43:55.506
24cbad39-27a5-4fb4-88c9-04c676611637	18e13b75-2073-425c-8fab-0f887b01b83a	2	f		-1100	\N	Main.java:14: error: cannot find symbol\n    System.out.println(a + bnnl);\n                           ^\n  symbol:   variable bnnl\n  location: class Main\n1 error\n	Compilation Error	\N	\N	2025-07-15 08:43:55.506	2025-07-15 08:43:55.506
e113e717-83e0-47b5-ac10-0619a1ab382b	18e13b75-2073-425c-8fab-0f887b01b83a	3	f		0	\N	Main.java:14: error: cannot find symbol\n    System.out.println(a + bnnl);\n                           ^\n  symbol:   variable bnnl\n  location: class Main\n1 error\n	Compilation Error	\N	\N	2025-07-15 08:43:55.506	2025-07-15 08:43:55.506
55633f4c-2655-4100-b8b3-f2fdfa1adf01	d650848d-6bc3-42d5-8ec5-78f15b9bc866	1	t	300	300	\N	\N	Accepted	12820 KB	0.206 s	2025-07-15 08:49:55.177	2025-07-15 08:49:55.177
7792e4fc-25c4-41fc-b249-d3d51a0aef80	d650848d-6bc3-42d5-8ec5-78f15b9bc866	2	t	-1100	-1100	\N	\N	Accepted	12684 KB	0.21 s	2025-07-15 08:49:55.177	2025-07-15 08:49:55.177
c61ae4e5-3685-42de-ab97-cc6ab694ba12	d650848d-6bc3-42d5-8ec5-78f15b9bc866	3	t	0	0	\N	\N	Accepted	14428 KB	0.217 s	2025-07-15 08:49:55.177	2025-07-15 08:49:55.177
d6e9387d-4575-4d99-89b6-7fdb1596dd1f	7411c1bd-4437-4eda-8fc0-c206766b166e	1	t	300	300	\N	\N	Accepted	27356 KB	0.185 s	2025-07-16 19:41:12.048	2025-07-16 19:41:12.048
9d3ab69e-81a3-4c29-91e7-8ede09aa5cce	7411c1bd-4437-4eda-8fc0-c206766b166e	2	t	-1100	-1100	\N	\N	Accepted	27212 KB	0.189 s	2025-07-16 19:41:12.048	2025-07-16 19:41:12.048
1f2fcdcc-fe48-42e5-956e-1740b05be871	7411c1bd-4437-4eda-8fc0-c206766b166e	3	t	0	0	\N	\N	Accepted	24716 KB	0.191 s	2025-07-16 19:41:12.048	2025-07-16 19:41:12.048
e4c12c03-2aba-417d-96c3-28e9f69725c2	931fdb65-cfcd-4f11-b426-71c040887ec2	1	f	0	2	\N	\N	Accepted	13928 KB	0.221 s	2025-07-16 19:43:12.193	2025-07-16 19:43:12.193
190b7346-cfc4-4193-aaa4-866e1fd9a3d8	931fdb65-cfcd-4f11-b426-71c040887ec2	2	f	0	3	\N	\N	Accepted	13528 KB	0.239 s	2025-07-16 19:43:12.193	2025-07-16 19:43:12.193
9ffc5a5e-503f-4ad2-b253-36ec378dae3c	931fdb65-cfcd-4f11-b426-71c040887ec2	3	f	0	5	\N	\N	Accepted	13512 KB	0.255 s	2025-07-16 19:43:12.193	2025-07-16 19:43:12.193
97089f9a-db5d-4085-a974-65e9462586ca	a1c27c5c-955d-4e19-a6ba-fb267787904c	1	f	[]	[1,1,2,3,4,4,5,6]	\N	\N	Accepted	33748 KB	0.147 s	2025-07-17 17:25:40.39	2025-07-17 17:25:40.39
fec2d522-d3cb-49e1-b4d4-19c3cea9addd	a1c27c5c-955d-4e19-a6ba-fb267787904c	2	t	[]	[]	\N	\N	Accepted	33768 KB	0.161 s	2025-07-17 17:25:40.39	2025-07-17 17:25:40.39
9e1ae852-4558-4213-8f9a-f300da877525	d6c85b02-1de3-4746-9b2f-aed2d72abefd	1	f	[1, 1, 2, 3, 4, 4, 5, 6]	[1,1,2,3,4,4,5,6]	\N	\N	Accepted	12924 KB	0.177 s	2025-07-17 17:27:00.915	2025-07-17 17:27:00.915
52e4e36f-8037-4cb7-bbc4-cc52d40aa140	d6c85b02-1de3-4746-9b2f-aed2d72abefd	2	t	[]	[]	\N	\N	Accepted	14260 KB	0.17 s	2025-07-17 17:27:00.915	2025-07-17 17:27:00.915
795a241f-a03f-4f6f-b92f-9d5649ec7f29	c5c31f24-ef3f-40c3-ab8d-85115a1884a9	1	t	[1,1,2,3,4,4,5,6]	[1,1,2,3,4,4,5,6]	\N	\N	Accepted	14896 KB	0.169 s	2025-07-17 17:31:54.924	2025-07-17 17:31:54.924
6b61e8cd-5aa4-43a5-8066-4a38fffb121c	c5c31f24-ef3f-40c3-ab8d-85115a1884a9	2	t	[]	[]	\N	\N	Accepted	13596 KB	0.141 s	2025-07-17 17:31:54.924	2025-07-17 17:31:54.924
e228b5c2-1c45-4957-a73f-9a5dbb509991	cd8e42ed-2ae8-48c7-8722-859b787406d6	1	t	[1,1,2,3,4,4,5,6]	[1,1,2,3,4,4,5,6]	\N	\N	Accepted	13688 KB	0.254 s	2025-07-18 10:57:57.283	2025-07-18 10:57:57.283
c8d1f541-25db-467d-8ba2-7d1fbe72fb22	cd8e42ed-2ae8-48c7-8722-859b787406d6	2	t	[]	[]	\N	\N	Accepted	13460 KB	0.254 s	2025-07-18 10:57:57.283	2025-07-18 10:57:57.283
aeadd3e1-6e4c-4fc6-964c-8beb2097a8bc	af6d2ec0-df19-4d18-a389-32ef072d8ddc	1	t	[1,1,2,3,4,4,5,6]	[1,1,2,3,4,4,5,6]	\N	\N	Accepted	4192 KB	0.05 s	2025-07-18 10:58:48.714	2025-07-18 10:58:48.714
1827f6a0-d9f6-4222-8dcf-7830ab49c106	af6d2ec0-df19-4d18-a389-32ef072d8ddc	2	t	[]	[]	\N	\N	Accepted	7800 KB	0.104 s	2025-07-18 10:58:48.714	2025-07-18 10:58:48.714
caafb386-3643-478b-9bb4-913442a89afc	e3f469b8-c9fa-4f0f-8fdb-71364a1af8e2	1	t	[1,1,2,3,4,4,5,6]	[1,1,2,3,4,4,5,6]	\N	\N	Accepted	19468 KB	0.253 s	2025-07-18 10:59:31.251	2025-07-18 10:59:31.251
ca69035e-968e-4786-9d26-a1d402c0998b	e3f469b8-c9fa-4f0f-8fdb-71364a1af8e2	2	t	[]	[]	\N	\N	Accepted	7520 KB	0.074 s	2025-07-18 10:59:31.251	2025-07-18 10:59:31.251
d15e3446-6b5e-4b5c-9596-d3701a207f91	93a4e510-2714-464d-869d-979b818963be	1	t	300	300	\N	\N	Accepted	25060 KB	0.191 s	2025-07-22 09:24:43.776	2025-07-22 09:24:43.776
678b0439-5514-4baa-88dc-a09f63f2763c	93a4e510-2714-464d-869d-979b818963be	2	t	-1100	-1100	\N	\N	Accepted	27388 KB	0.183 s	2025-07-22 09:24:43.776	2025-07-22 09:24:43.776
38b7e14d-c05e-43a7-bdce-046a3750cd4e	93a4e510-2714-464d-869d-979b818963be	3	t	0	0	\N	\N	Accepted	26560 KB	0.192 s	2025-07-22 09:24:43.776	2025-07-22 09:24:43.776
8a3d6830-a115-498a-ade8-40d45ec8d7a7	8940a976-ad5d-49c3-897f-f2693b2dca17	1	t	300	300	\N	\N	Accepted	26472 KB	0.186 s	2025-07-22 09:31:16.902	2025-07-22 09:31:16.902
a9f8f52e-81f4-4bc2-a859-39916a72855f	8940a976-ad5d-49c3-897f-f2693b2dca17	2	t	-1100	-1100	\N	\N	Accepted	24904 KB	0.205 s	2025-07-22 09:31:16.902	2025-07-22 09:31:16.902
e5d27932-5858-4337-be34-4e9ba65f84d9	8940a976-ad5d-49c3-897f-f2693b2dca17	3	t	0	0	\N	\N	Accepted	24760 KB	0.199 s	2025-07-22 09:31:16.902	2025-07-22 09:31:16.902
3a33ff8c-4b7b-44c5-b4b3-dea175ed4ccd	81c4602e-b310-4650-9c66-b8436c84d7aa	1	t	300	300	\N	\N	Accepted	19676 KB	0.067 s	2025-07-23 07:45:11.653	2025-07-23 07:45:11.653
b73683fd-5bec-4de5-9004-0d0882874595	81c4602e-b310-4650-9c66-b8436c84d7aa	2	t	-1100	-1100	\N	\N	Accepted	18404 KB	0.067 s	2025-07-23 07:45:11.653	2025-07-23 07:45:11.653
f4c72780-ee9f-4753-ac1a-d8289c63285b	81c4602e-b310-4650-9c66-b8436c84d7aa	3	t	0	0	\N	\N	Accepted	7760 KB	0.068 s	2025-07-23 07:45:11.653	2025-07-23 07:45:11.653
24daf1c2-6043-46bf-8bd7-a655eb5264e1	1022f1d3-d4bb-46e1-b6ef-2b1a9f84b689	1	t	300	300	\N	\N	Accepted	5492 KB	0.029 s	2025-07-23 07:45:23.322	2025-07-23 07:45:23.322
30b1a303-bd31-45ae-a65f-56d56312a387	1022f1d3-d4bb-46e1-b6ef-2b1a9f84b689	2	t	-1100	-1100	\N	\N	Accepted	6268 KB	0.029 s	2025-07-23 07:45:23.322	2025-07-23 07:45:23.322
a47b93a8-06d2-4ac5-a9df-afb7cd38b76c	1022f1d3-d4bb-46e1-b6ef-2b1a9f84b689	3	t	0	0	\N	\N	Accepted	3148 KB	0.023 s	2025-07-23 07:45:23.322	2025-07-23 07:45:23.322
eb9b8a7f-96b6-4c1b-9a46-490c15273a25	0f2453c9-1a3c-4b3f-92a0-91fef6a127d5	1	f		300	\N	Compilation time limit exceeded.	Compilation Error	\N	\N	2025-07-23 07:45:58.819	2025-07-23 07:45:58.819
dbe0fb9e-4807-415a-bb36-3054efd78d39	0f2453c9-1a3c-4b3f-92a0-91fef6a127d5	2	f		-1100	\N	Compilation time limit exceeded.	Compilation Error	\N	\N	2025-07-23 07:45:58.819	2025-07-23 07:45:58.819
f92890a3-7834-43e4-886e-b1e7f5c1d36a	0f2453c9-1a3c-4b3f-92a0-91fef6a127d5	3	t	0	0	\N	\N	Accepted	51560 KB	0.186 s	2025-07-23 07:45:58.819	2025-07-23 07:45:58.819
207d8acd-747f-4bfe-90b5-5bacc7ff8b7e	c3df84dd-9bd0-4503-a9a4-49b47f85f522	1	t	300	300	\N	\N	Accepted	13344 KB	0.135 s	2025-07-23 07:51:23.425	2025-07-23 07:51:23.425
ef032ca0-453e-425a-af74-1b451070be69	c3df84dd-9bd0-4503-a9a4-49b47f85f522	2	t	-1100	-1100	\N	\N	Accepted	13712 KB	0.136 s	2025-07-23 07:51:23.425	2025-07-23 07:51:23.425
39847301-2b3c-471e-964d-bc9c0619f22a	c3df84dd-9bd0-4503-a9a4-49b47f85f522	3	t	0	0	\N	\N	Accepted	13088 KB	0.138 s	2025-07-23 07:51:23.425	2025-07-23 07:51:23.425
69902c04-470f-426a-904d-c329f403a379	cad8be2b-f03e-4849-8f37-e0b850b2d53b	1	f		300	\N	Compilation time limit exceeded.	Compilation Error	\N	\N	2025-07-23 08:23:08.909	2025-07-23 08:23:08.909
830629fa-1af7-4a83-bfdb-808fa624f17b	cad8be2b-f03e-4849-8f37-e0b850b2d53b	2	f		-1100	\N	Compilation time limit exceeded.	Compilation Error	\N	\N	2025-07-23 08:23:08.909	2025-07-23 08:23:08.909
64a93e08-b74b-454f-8eef-47511554c32d	f439713e-f788-4c1b-92b6-bec2a83c4fab	1	f		[0,1]	Traceback (most recent call last):\n  File "script.py", line 1, in <module>\n    class Solution:\n  File "script.py", line 2, in Solution\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\nTypeError: 'type' object is not subscriptable\n	\N	Runtime Error (NZEC)	3308 KB	0.017 s	2025-07-24 21:33:56.795	2025-07-24 21:33:56.795
e792ebf6-d047-490d-b723-eb229670478e	f439713e-f788-4c1b-92b6-bec2a83c4fab	2	f		[1,2]	Traceback (most recent call last):\n  File "script.py", line 1, in <module>\n    class Solution:\n  File "script.py", line 2, in Solution\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\nTypeError: 'type' object is not subscriptable\n	\N	Runtime Error (NZEC)	3392 KB	0.016 s	2025-07-24 21:33:56.795	2025-07-24 21:33:56.795
80ba6290-990c-44cc-9a41-187039842582	f439713e-f788-4c1b-92b6-bec2a83c4fab	3	f		[0,1]	Traceback (most recent call last):\n  File "script.py", line 1, in <module>\n    class Solution:\n  File "script.py", line 2, in Solution\n    def twoSum(self, nums: list[int], target: int) -> list[int]:\nTypeError: 'type' object is not subscriptable\n	\N	Runtime Error (NZEC)	3384 KB	0.023 s	2025-07-24 21:33:56.795	2025-07-24 21:33:56.795
eee10672-abe4-4282-8a1a-e38d9cb05a0b	0ca7d12b-091f-4f98-a40a-0e77244abb79	1	t	[0,1]	[0,1]	\N	\N	Accepted	7860 KB	0.059 s	2025-07-24 21:35:18.361	2025-07-24 21:35:18.361
8a71e443-400e-47cd-88a6-1f3c727838f1	0ca7d12b-091f-4f98-a40a-0e77244abb79	2	t	[1,2]	[1,2]	\N	\N	Accepted	7128 KB	0.046 s	2025-07-24 21:35:18.361	2025-07-24 21:35:18.361
2fccedf1-3211-4acf-bb3c-6d5f7a4c105d	0ca7d12b-091f-4f98-a40a-0e77244abb79	3	t	[0,1]	[0,1]	\N	\N	Accepted	7164 KB	0.049 s	2025-07-24 21:35:18.361	2025-07-24 21:35:18.361
0bb51861-1745-4940-ab97-f68327a391ac	7a0c6889-5740-4237-99ce-a3a2593e08cb	1	t	[0,1]	[0,1]	\N	\N	Accepted	4564 KB	0.049 s	2025-07-24 21:51:15.002	2025-07-24 21:51:15.002
d37ddd34-fba7-4ddb-b391-b85453eaa633	7a0c6889-5740-4237-99ce-a3a2593e08cb	2	t	[1,2]	[1,2]	\N	\N	Accepted	4504 KB	0.062 s	2025-07-24 21:51:15.002	2025-07-24 21:51:15.002
353a86cb-3e4c-488e-b4d3-c0bfeff596aa	7a0c6889-5740-4237-99ce-a3a2593e08cb	3	t	[0,1]	[0,1]	\N	\N	Accepted	4512 KB	0.058 s	2025-07-24 21:51:15.002	2025-07-24 21:51:15.002
0040dd4f-5b29-4562-ae71-b42a401e9522	e66d84c7-bf9e-4103-8e26-a6b5a725f245	1	t	[0,1]	[0,1]	\N	\N	Accepted	11532 KB	0.105 s	2025-07-24 21:51:52.936	2025-07-24 21:51:52.936
21616152-520e-466a-b07a-f82aea555f42	e66d84c7-bf9e-4103-8e26-a6b5a725f245	2	t	[1,2]	[1,2]	\N	\N	Accepted	13356 KB	0.117 s	2025-07-24 21:51:52.936	2025-07-24 21:51:52.936
07e6e82f-4700-4f2e-b384-9e634e7ea6a8	e66d84c7-bf9e-4103-8e26-a6b5a725f245	3	t	[0,1]	[0,1]	\N	\N	Accepted	11488 KB	0.093 s	2025-07-24 21:51:52.936	2025-07-24 21:51:52.936
73176118-268a-473a-a1f9-5669f0d99a46	bcc7de28-2585-4f54-8ccb-c93152899a9e	1	t	3	3	\N	\N	Accepted	11108 KB	0.095 s	2025-07-24 21:56:51.893	2025-07-24 21:56:51.893
8f560724-13a0-4c67-9f69-567ebb4661b9	bcc7de28-2585-4f54-8ccb-c93152899a9e	2	t	1	1	\N	\N	Accepted	10236 KB	0.094 s	2025-07-24 21:56:51.893	2025-07-24 21:56:51.893
537745bd-d3a5-4f82-80b5-f7c832271469	bcc7de28-2585-4f54-8ccb-c93152899a9e	3	t	3	3	\N	\N	Accepted	10648 KB	0.081 s	2025-07-24 21:56:51.893	2025-07-24 21:56:51.893
3eddca34-fa9d-4479-b48f-f221d090ebc2	bcc7de28-2585-4f54-8ccb-c93152899a9e	4	t	0	0	\N	\N	Accepted	10104 KB	0.101 s	2025-07-24 21:56:51.893	2025-07-24 21:56:51.893
3347fd17-f9ac-40eb-944e-04cfd374fddb	260a76c4-abfb-4a59-9e49-f4095eee19a9	1	t	3	3	\N	\N	Accepted	3308 KB	0.021 s	2025-07-24 21:57:15.766	2025-07-24 21:57:15.766
5f3a3776-10bb-46da-a579-210a530579cd	260a76c4-abfb-4a59-9e49-f4095eee19a9	2	t	1	1	\N	\N	Accepted	3332 KB	0.022 s	2025-07-24 21:57:15.766	2025-07-24 21:57:15.766
11e6d2d1-d451-4e39-b126-9c097ae1d605	260a76c4-abfb-4a59-9e49-f4095eee19a9	3	t	3	3	\N	\N	Accepted	3268 KB	0.022 s	2025-07-24 21:57:15.766	2025-07-24 21:57:15.766
512f911e-4afc-416d-a783-65245ea7fcf0	260a76c4-abfb-4a59-9e49-f4095eee19a9	4	t	0	0	\N	\N	Accepted	3276 KB	0.034 s	2025-07-24 21:57:15.766	2025-07-24 21:57:15.766
8476cecd-231c-4362-bfd3-efbae5062c9a	a0fef775-17ea-4da3-930c-c44f93b10f2d	1	t	3	3	\N	\N	Accepted	7120 KB	0.083 s	2025-07-24 21:57:41.012	2025-07-24 21:57:41.012
5daab91d-7a62-48e5-9cb7-d4cabd2f382c	a0fef775-17ea-4da3-930c-c44f93b10f2d	2	t	1	1	\N	\N	Accepted	7208 KB	0.077 s	2025-07-24 21:57:41.012	2025-07-24 21:57:41.012
d0629942-fdff-4319-a136-3f4eb3d69747	a0fef775-17ea-4da3-930c-c44f93b10f2d	3	t	3	3	\N	\N	Accepted	7136 KB	0.084 s	2025-07-24 21:57:41.012	2025-07-24 21:57:41.012
31deae4a-67d1-48c9-9ccc-a3067a630918	a0fef775-17ea-4da3-930c-c44f93b10f2d	4	t	0	0	\N	\N	Accepted	7392 KB	0.039 s	2025-07-24 21:57:41.012	2025-07-24 21:57:41.012
70d605e1-ec5f-4be9-b536-922c4138a998	7bb57e15-7ee7-44aa-9f27-6cb4ddb2eff2	1	t	2	2	\N	\N	Accepted	12544 KB	0.12 s	2025-07-24 22:08:10.791	2025-07-24 22:08:10.791
a601f4f9-c0d1-499c-ad6c-201476ab4661	7bb57e15-7ee7-44aa-9f27-6cb4ddb2eff2	2	t	2	2	\N	\N	Accepted	10180 KB	0.087 s	2025-07-24 22:08:10.791	2025-07-24 22:08:10.791
24881e27-43fc-409d-83ff-b63164f7866d	7bb57e15-7ee7-44aa-9f27-6cb4ddb2eff2	3	t	0	0	\N	\N	Accepted	10952 KB	0.141 s	2025-07-24 22:08:10.791	2025-07-24 22:08:10.791
3a5a0cf2-718a-4823-b9b7-c4f2952e1409	7bb57e15-7ee7-44aa-9f27-6cb4ddb2eff2	4	t	10	10	\N	\N	Accepted	10440 KB	0.078 s	2025-07-24 22:08:10.791	2025-07-24 22:08:10.791
489c7008-8135-4d44-81d3-3c735562c911	2bded157-de7f-4f3f-ad31-e56110bd033d	1	t	2	2	\N	\N	Accepted	3316 KB	0.019 s	2025-07-24 22:08:48.933	2025-07-24 22:08:48.933
66011047-62d6-4889-91c7-0a28d28bee00	2bded157-de7f-4f3f-ad31-e56110bd033d	2	t	2	2	\N	\N	Accepted	3360 KB	0.024 s	2025-07-24 22:08:48.933	2025-07-24 22:08:48.933
3a65178f-0ba7-44be-9bff-3a59eaebafb3	2bded157-de7f-4f3f-ad31-e56110bd033d	3	t	0	0	\N	\N	Accepted	3280 KB	0.026 s	2025-07-24 22:08:48.933	2025-07-24 22:08:48.933
d15a6c6b-6457-4247-b4d8-65c4e25ed0ff	2bded157-de7f-4f3f-ad31-e56110bd033d	4	t	10	10	\N	\N	Accepted	3320 KB	0.021 s	2025-07-24 22:08:48.933	2025-07-24 22:08:48.933
b02cfc88-1375-4084-9a9f-3f45800d5524	5ec2d81b-ef08-4163-aa90-4e85c35f4cf9	1	t	2	2	\N	\N	Accepted	7244 KB	0.041 s	2025-07-24 22:09:37.604	2025-07-24 22:09:37.604
5805c6f2-25ed-46d9-bb8e-4c1c7c12fdbb	5ec2d81b-ef08-4163-aa90-4e85c35f4cf9	2	t	2	2	\N	\N	Accepted	7224 KB	0.038 s	2025-07-24 22:09:37.604	2025-07-24 22:09:37.604
c89109a8-cee5-4f6a-bf1c-99b996151ea3	5ec2d81b-ef08-4163-aa90-4e85c35f4cf9	3	t	0	0	\N	\N	Accepted	7304 KB	0.063 s	2025-07-24 22:09:37.604	2025-07-24 22:09:37.604
06be8710-d13c-48bb-b822-fae74dd5636c	5ec2d81b-ef08-4163-aa90-4e85c35f4cf9	4	t	10	10	\N	\N	Accepted	7312 KB	0.042 s	2025-07-24 22:09:37.604	2025-07-24 22:09:37.604
348046a3-3e58-4252-ac0d-0b1b9580311d	4a93e199-251b-4203-8a10-771f22f53173	1	t	4	4	\N	\N	Accepted	7168 KB	0.079 s	2025-07-27 17:15:36.828	2025-07-27 17:15:36.828
6f763bda-4e0f-46c2-b6e8-f94789d38d3d	4a93e199-251b-4203-8a10-771f22f53173	2	t	0	0	\N	\N	Accepted	7304 KB	0.04 s	2025-07-27 17:15:36.828	2025-07-27 17:15:36.828
11ca07ec-a3de-4778-b4d9-2726a4eb78f4	4a93e199-251b-4203-8a10-771f22f53173	3	t	1	1	\N	\N	Accepted	7120 KB	0.073 s	2025-07-27 17:15:36.828	2025-07-27 17:15:36.828
dfd81011-f69a-449c-ae47-e3d65c42a223	4a93e199-251b-4203-8a10-771f22f53173	4	t	5	5	\N	\N	Accepted	7424 KB	0.046 s	2025-07-27 17:15:36.828	2025-07-27 17:15:36.828
2d448fef-8017-430e-bbdb-c828879fde81	e0609747-cddc-4458-82fa-c78a82e94374	1	t	4	4	\N	\N	Accepted	4188 KB	0.028 s	2025-07-27 17:16:02.753	2025-07-27 17:16:02.753
426fd410-1b65-4887-bddf-caa0fb04c1b5	e0609747-cddc-4458-82fa-c78a82e94374	2	t	0	0	\N	\N	Accepted	4176 KB	0.041 s	2025-07-27 17:16:02.753	2025-07-27 17:16:02.753
21b472fb-de59-438c-9f38-01628b2d995c	e0609747-cddc-4458-82fa-c78a82e94374	3	t	1	1	\N	\N	Accepted	4192 KB	0.032 s	2025-07-27 17:16:02.753	2025-07-27 17:16:02.753
25a66e33-0e49-41a9-b675-5db000dbd66a	e0609747-cddc-4458-82fa-c78a82e94374	4	t	5	5	\N	\N	Accepted	4108 KB	0.04 s	2025-07-27 17:16:02.753	2025-07-27 17:16:02.753
\.


--
-- Data for Name: User; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public."User" (id, name, email, image, role, password, "createdAt", "updatedAt", plan, "emailVerified", "verificationToken", "resetToken") FROM stdin;
3a971d9b-4f66-450c-95ba-646db4d5aa4e	user3	user3@gmail.com	\N	USER	$2b$10$Bbke./jUpBg4WQDavVCdyux76TVwXRYuflgaES1M4oN0ukS5KnX5m	2025-06-29 17:18:57.698	2025-06-29 17:18:57.698	FREE	f	\N	\N
5a44cf42-41d5-4307-84c5-907d65d8544b	SukhmeetGamer222 Singh	ritulamba114@gmail.com	https://lh3.googleusercontent.com/a/ACg8ocJIw0d20_yw0_jKxP-4FD-TiiVJX6CzTa989iotGMLxR16PxA=s96-c	USER	\N	2025-07-22 16:34:58.817	2025-07-22 16:34:58.817	FREE	f	\N	\N
32c2bab6-06ae-4ec0-ab8c-bb262a9f211a	Sukh	sukhmeetsingh285@gmail.com	\N	USER	\N	2025-07-23 17:06:19.026	2025-07-23 17:06:19.026	FREE	f	\N	\N
8e7cf865-49a1-4464-891e-5588b4a26d5b	Marshall	gulaabox285@gmail.com	\N	USER	\N	2025-07-23 17:27:15.137	2025-07-23 17:27:15.137	FREE	f	\N	\N
3b5857be-f292-4ae5-9c4e-608effc88d44	user6	user6@gmail.com	\N	USER	$2b$10$ZERnGtMeoiFa8MkUgCnpzuHd25SXMpi2QMIhwewQBpko9t2zpWVA6	2025-07-21 23:33:57.728	2025-07-23 20:51:58.896	ADVANCED	f	\N	\N
7177a6c7-b397-49e2-a7f7-c50d779154f1	user1	user1@gmail.com	\N	ADMIN	$2b$10$qs6nT45Ddj4eOHhKmUpCze2S0CIxe0GZP7i5i.GXzHo7KXlGTVtm2	2025-06-21 08:34:35.419	2025-07-25 21:14:58.221	FREE	t	\N	\N
b0eea9b1-72e3-4336-b99c-eb4fc9d3fe82	user8	user8@gmail.com	\N	USER	$2b$10$jdWwXXnZrUy/ZsmpWae1TeoAxWUyXdo66ZamSmqlNea8NCKCALF/m	2025-07-24 20:54:29.918	2025-07-24 20:57:40.371	ADVANCED	f	\N	\N
b3cbb8ae-890f-4c1e-a2b0-8141f668e1f2	user9	user9@gmail.com	\N	USER	$2b$10$fewBRlG9XvhKo1BRBglVkOU2x0yhntCZKW1Br3T3PeYJlRkRPiXlW	2025-07-25 19:43:58.291	2025-07-25 19:43:58.291	FREE	f	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXI5QGdtYWlsLmNvbSIsImlhdCI6MTc1MzQ3MjYzOCwiZXhwIjoxNzUzNTU5MDM4fQ.etblsqd37LDVmsBxkZwlS3lLuuixvt_i_KVtVxSOFZY	\N
9d6b1987-585d-4ffc-ad34-e56906e0bf33	user10	user10@gmail.com	\N	USER	$2b$10$opDeNjgtlKiSNKJzKPDDfu7okkAb3OLd6YiNZF9eKvhbVRMQ4pEbu	2025-07-25 19:45:23.866	2025-07-25 19:45:23.866	FREE	f	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXIxMEBnbWFpbC5jb20iLCJpYXQiOjE3NTM0NzI3MjMsImV4cCI6MTc1MzU1OTEyM30.a7nMHZC9iwnXIqqGGLHbvMl-JCNGgTlkvsuHplSkeis	\N
f246a609-e240-4a52-857d-aca01bc5181d	user11	user11@gmail.com	\N	USER	$2b$10$mqbdhLJmJzh7Wh.yMKE6pOOXpczBKH.JAfxhdFT6c/XPJh4W8EKCW	2025-07-25 19:48:49.005	2025-07-25 19:48:49.005	FREE	f	eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXIxMUBnbWFpbC5jb20iLCJpYXQiOjE3NTM0NzI5MjksImV4cCI6MTc1MzU1OTMyOX0.aUAdWQr9ZuaNPFYZ5XepIeQ5KAwMuiEg9YZrNM2ERdY	\N
6bf29c0b-bdd8-4b11-b8b9-553661036e66	user12	user12@gmail.com	\N	USER	$2b$10$lSPAf11yf8BGOd44ATmSGOvVv8HtdxToponw101qoVrCNRowgLx5q	2025-07-25 19:51:03.431	2025-07-25 20:08:59.851	FREE	t	\N	\N
1ed4df5e-9fec-42e7-a64d-12ca549b34ab	user13	user13@gmail.com	\N	USER	$2b$10$tWrSFz2IpBRLk0U2uJLCDuGESHCw.eK2.HgWDp8IU26b8at3bVCba	2025-07-25 20:29:28.691	2025-07-25 20:30:14.671	FREE	t	\N	\N
29f79bbf-2322-432c-b2dc-f93a6ff14c83	user2	user2@user2.com	\N	USER	$2b$10$XNkdEmXD.ZquWGep88HhruZV9VhjUsVid9E2SewtSv0uAeDpV/yZy	2025-07-25 20:42:58.416	2025-07-25 20:44:58.535	FREE	t	\N	\N
2a179277-32c9-4853-a8c2-3d2de754781d	user4	user4@gmail.com	\N	ADMIN	$2b$10$ELu1sHxgvdv7ooGbI3BIN.9CqJr8yBqVC3ziE01VwICDd4757wi96	2025-06-29 21:42:17.825	2025-07-25 21:32:23.827	ADVANCED	t	\N	\N
56100fd2-2245-45c6-9343-574316fc07ae	user5	user5@gmail.com	\N	USER	$2b$10$OOUjKCEy/oKzNhR3YnfxOuADj28bWhM4t966PNvkKHKLgqFESeoqq	2025-07-12 09:20:11.087	2025-07-26 00:47:50.358	PRO	t	\N	\N
06c807d0-2f95-4f8d-a130-8e77c45627b7	user7	user7@gmail.com	\N	USER	$2b$10$fkejtNLBa.l.h15QVZXYCOIcQ4IkCBWuooXeUup8Y0zhWlCKWEvKy	2025-07-22 09:18:36.064	2025-07-26 15:50:14.066	FREE	t	\N	\N
\.


--
-- Data for Name: _prisma_migrations; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public._prisma_migrations (id, checksum, finished_at, migration_name, logs, rolled_back_at, started_at, applied_steps_count) FROM stdin;
299e33e7-bcb0-4aa9-b41d-059e4285c799	1afb4388e3febd1af5cfec0f21262819ff6928f8dce1da94ded87a107f2aca8c	2025-06-21 08:30:38.109059+00	20250519151853_usermodel_edit	\N	\N	2025-06-21 08:30:38.085042+00	1
9a7af085-bf06-42b0-9b3f-bfac039b8e60	f4bf4191cfab73c1019797d26f0f16312628061f8ff06aba1745ba17095e207f	2025-06-21 08:30:38.134504+00	20250520140516_problem_model_added	\N	\N	2025-06-21 08:30:38.115644+00	1
40a170d9-2e5c-477e-8702-24a97a229400	30d80245a95ec2d6d91b1ac72693e67323958860cb3455e0fe613e1ddbaa016e	2025-06-21 20:20:15.244517+00	20250621202014_added_submission_testcases_problem_solved	\N	\N	2025-06-21 20:20:15.212662+00	1
ec3446a6-eea6-468b-a9a7-23a108a35ed2	235e0dacf9134df61fa7d0190889eab3700e7c5a2b6c164046fd8f721b456b96	2025-06-22 14:28:30.452968+00	20250622142830_playlist_model_problem_in_playlist_model	\N	\N	2025-06-22 14:28:30.413835+00	1
e8ce6b08-b799-4e33-b754-8a9ea3045df3	0ddb2816f659dc40bc7fab7ddf7813833ddf6131467d604dd819504b52b14bf6	2025-07-21 11:40:20.044324+00	20250721114019_add_ai_usage_limit	\N	\N	2025-07-21 11:40:20.019758+00	1
90a9eec1-b3b8-43ae-86e0-d77d45794050	9cb51e0b7636fa960d2bd9f801893d4151f9fbecb6d7514cfd9cd8926b70ca3d	2025-07-22 11:04:43.351107+00	20250722110442_make_password_optional	\N	\N	2025-07-22 11:04:43.333264+00	1
3f1780ff-40d8-49a2-8026-415908e3356d	5dc7f6e3f1dd79fb2822a269213e995d79a66f12b0e4f3e51152b68cc649cf9e	2025-07-23 19:56:47.699848+00	20250723195647_add_user_plan	\N	\N	2025-07-23 19:56:47.672084+00	1
4de732ab-cf10-4e95-aab5-69fb745cfe93	66c86b0e448b0c0b9c5ec51fce19c1e3fc967262a488adc13defe30d4c9d86b0	2025-07-23 21:35:20.993368+00	20250723213520_added_company_tags	\N	\N	2025-07-23 21:35:20.974905+00	1
8f37f50f-87e3-4d57-8e1d-280309254025	8ad8436633bfc4496ec5fd04ca0f4573b413d520989e8847fed896be780bfdcd	2025-07-24 16:00:02.664017+00	20250724160002_add_access_level_to_playlist	\N	\N	2025-07-24 16:00:02.648737+00	1
a9e8cb3a-c585-406e-8f52-badaea8b6f9c	9f5795ea4ee0fd772b998a527c0eb5e00a0fb25f4b490995d5b9ecfc3822747a	2025-07-25 19:14:38.398518+00	20250725191437_add_email_verification	\N	\N	2025-07-25 19:14:38.378006+00	1
85259eea-1e21-4c3f-85c0-fa9291e29933	053efcbe5d22b743f7edd7e5f34680503f132792160c04591c8ea2b9e87a2466	2025-07-25 19:28:25.608603+00	20250725192825_add_reset_token	\N	\N	2025-07-25 19:28:25.589837+00	1
\.


--
-- Name: AiUsage AiUsage_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."AiUsage"
    ADD CONSTRAINT "AiUsage_pkey" PRIMARY KEY (id);


--
-- Name: Playlist Playlist_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Playlist"
    ADD CONSTRAINT "Playlist_pkey" PRIMARY KEY (id);


--
-- Name: ProblemInPlaylist ProblemInPlaylist_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."ProblemInPlaylist"
    ADD CONSTRAINT "ProblemInPlaylist_pkey" PRIMARY KEY (id);


--
-- Name: ProblemSolved ProblemSolved_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."ProblemSolved"
    ADD CONSTRAINT "ProblemSolved_pkey" PRIMARY KEY (id);


--
-- Name: Problem Problem_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Problem"
    ADD CONSTRAINT "Problem_pkey" PRIMARY KEY (id);


--
-- Name: Submission Submission_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Submission"
    ADD CONSTRAINT "Submission_pkey" PRIMARY KEY (id);


--
-- Name: TestCaseResult TestCaseResult_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."TestCaseResult"
    ADD CONSTRAINT "TestCaseResult_pkey" PRIMARY KEY (id);


--
-- Name: User User_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."User"
    ADD CONSTRAINT "User_pkey" PRIMARY KEY (id);


--
-- Name: _prisma_migrations _prisma_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public._prisma_migrations
    ADD CONSTRAINT _prisma_migrations_pkey PRIMARY KEY (id);


--
-- Name: AiUsage_userId_date_key; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX "AiUsage_userId_date_key" ON public."AiUsage" USING btree ("userId", date);


--
-- Name: Playlist_name_userId_key; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX "Playlist_name_userId_key" ON public."Playlist" USING btree (name, "userId");


--
-- Name: ProblemInPlaylist_playlistId_problemId_key; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX "ProblemInPlaylist_playlistId_problemId_key" ON public."ProblemInPlaylist" USING btree ("playlistId", "problemId");


--
-- Name: ProblemSolved_userId_problemId_key; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX "ProblemSolved_userId_problemId_key" ON public."ProblemSolved" USING btree ("userId", "problemId");


--
-- Name: TestCaseResult_submissionId_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX "TestCaseResult_submissionId_idx" ON public."TestCaseResult" USING btree ("submissionId");


--
-- Name: User_email_key; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX "User_email_key" ON public."User" USING btree (email);


--
-- Name: AiUsage AiUsage_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."AiUsage"
    ADD CONSTRAINT "AiUsage_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: Playlist Playlist_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Playlist"
    ADD CONSTRAINT "Playlist_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ProblemInPlaylist ProblemInPlaylist_playlistId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."ProblemInPlaylist"
    ADD CONSTRAINT "ProblemInPlaylist_playlistId_fkey" FOREIGN KEY ("playlistId") REFERENCES public."Playlist"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ProblemInPlaylist ProblemInPlaylist_problemId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."ProblemInPlaylist"
    ADD CONSTRAINT "ProblemInPlaylist_problemId_fkey" FOREIGN KEY ("problemId") REFERENCES public."Problem"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ProblemSolved ProblemSolved_problemId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."ProblemSolved"
    ADD CONSTRAINT "ProblemSolved_problemId_fkey" FOREIGN KEY ("problemId") REFERENCES public."Problem"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ProblemSolved ProblemSolved_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."ProblemSolved"
    ADD CONSTRAINT "ProblemSolved_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Problem Problem_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Problem"
    ADD CONSTRAINT "Problem_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Submission Submission_problemId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Submission"
    ADD CONSTRAINT "Submission_problemId_fkey" FOREIGN KEY ("problemId") REFERENCES public."Problem"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Submission Submission_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."Submission"
    ADD CONSTRAINT "Submission_userId_fkey" FOREIGN KEY ("userId") REFERENCES public."User"(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: TestCaseResult TestCaseResult_submissionId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public."TestCaseResult"
    ADD CONSTRAINT "TestCaseResult_submissionId_fkey" FOREIGN KEY ("submissionId") REFERENCES public."Submission"(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- PostgreSQL database dump complete
--

